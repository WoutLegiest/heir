Loading:
Loading:
Loading: 0 packages loaded
Analyzing: target //tools:heir-opt (0 packages loaded, 0 targets configured)
INFO: Analyzed target //tools:heir-opt (0 packages loaded, 0 targets configured).
INFO: Found 1 target...
[0 / 4] [Prepa] BazelWorkspaceStatusAction stable-status.txt
[1 / 4] Compiling lib/Dialect/Arith/Conversions/ArithToCGGI/ArithToCGGI.cpp; 1s linux-sandbox
INFO: From Compiling lib/Dialect/Arith/Conversions/ArithToCGGI/ArithToCGGI.cpp:
lib/Dialect/Arith/Conversions/ArithToCGGI/ArithToCGGI.cpp:116:10: warning: unused variable 'resultTypeReal' [-Wunused-variable]
    auto resultTypeReal = convertArithToCGGIType(
         ^
lib/Dialect/Arith/Conversions/ArithToCGGI/ArithToCGGI.cpp:119:10: warning: unused variable 'shiftOp' [-Wunused-variable]
    auto shiftOp =
         ^
2 warnings generated.
[2 / 4] [Prepa] Linking tools/heir-opt
[2 / 4] Linking tools/heir-opt; 1s linux-sandbox
Target //tools:heir-opt up-to-date:
  bazel-bin/tools/heir-opt
INFO: Elapsed time: 13.946s, Critical Path: 13.55s
INFO: 3 processes: 1 internal, 2 linux-sandbox.
INFO: Build completed successfully, 3 total actions
INFO: Running command line: bazel-bin/tools/heir-opt --arith-quarter-wide-int -convert-tensor-to-scalars --arith-to-cggi --debug /usr/local/google/home/legiest/heir/tests/Dialect/Arith/Transforms/quarter_wide.mlir
Args: /usr/local/google/home/legiest/.cache/bazel/_bazel_legiest/0167411e4815a34188c70d6ec5fca69a/execroot/heir/bazel-out/k8-dbg/bin/tools/heir-opt --arith-quarter-wide-int -convert-tensor-to-scalars --arith-to-cggi --debug /usr/local/google/home/legiest/heir/tests/Dialect/Arith/Transforms/quarter_wide.mlir
Load new dialect in Context builtin
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ShapedType)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::MemRefLayoutAttrInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::BlobAttr)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::TypedAttr)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ElementsAttr)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DistinctAttr)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::BytecodeOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::SymbolOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpAsmOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RegionKindInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ConditionallySpeculatable)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::MemoryEffectOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ResourceBlobManagerDialectInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpAsmDialectInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::BytecodeDialectInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::AffineBinaryOpExprStorage)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::AffineConstantExprStorage)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::AffineDimExprStorage)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::AffineMapStorage)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::IntegerSetStorage)
Load new dialect in Context builtin
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::ZeroOperands<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OneRegion<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::ZeroResults<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::ZeroSuccessors<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::NoRegionArguments<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::NoTerminator<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::SingleBlock<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OpInvariants<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::BytecodeOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::AffineScope<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::IsIsolatedFromAbove<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::SymbolTable<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::SymbolOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpAsmOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RegionKindInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::HasOnlyGraphRegion<Empty>)
Load new dialect in Context func
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CallOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::SymbolUserOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CallableOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::FunctionOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RegionBranchTerminatorOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DialectInlinerInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ConvertToLLVMPatternInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::bufferization::BufferizableOpInterface)
Load new dialect in Context cf
Load new dialect in Context arith
ImplicitTypeIDRegistry::lookupOrInsert(mlir::arith::ArithFastMathInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::VectorUnrollOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::InferTypeOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::InferIntRangeInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::arith::ArithIntegerOverflowFlagsInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CastOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::arith::ArithRoundingModeInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::SelectLikeOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::bufferization::BufferDeallocationOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ValueBoundsOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::BranchOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::mesh::ShardingInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::AutomaticAllocationScope<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CallableOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::FunctionOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::ZeroRegions<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OneResult<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::ConstantLike<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ConditionallySpeculatable::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::MemoryEffectOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::InferIntRangeInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::InferTypeOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OneOperand<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::SameOperandsAndResultShape<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CastOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::VectorUnrollOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::Elementwise<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::Scalarizable<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::Vectorizable<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::Tensorizable<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::NOperands<2>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::IsCommutative<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::arith::ArithIntegerOverflowFlagsInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::SameOperandsAndResultType<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::VariadicOperands<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::HasParent<mlir::func::FuncOp>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::MemRefsNormalizable<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RegionBranchTerminatorOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::ReturnLike<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::IsTerminator<Empty>)
Load new dialect in Context cggi
ImplicitTypeIDRegistry::lookupOrInsert(mlir::heir::LUTOpInterface)
Load new dialect in Context lwe
ImplicitTypeIDRegistry::lookupOrInsert(mlir::VerifiableTensorEncoding)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::MemRefElementTypeInterface)
Load new dialect in Context tensor
Load new dialect in Context affine
Load new dialect in Context ub
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ub::PoisonAttrInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::affine::AffineDmaStartOp)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::affine::AffineMapAccessInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::affine::AffineDmaWaitOp)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::LoopLikeOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RegionBranchOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::affine::AffineReadOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::affine::AffineWriteOpInterface)
Load new dialect in Context complex
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ReifyRankedShapedTypeOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ShapedDimOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OffsetSizeAndStrideOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DestinationStyleOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::transform::FindPayloadReplacementOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::SubsetOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::SubsetInsertionOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::SubsetExtractionOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::TilingInterface)
Load new dialect in Context linalg
Load new dialect in Context math
Load new dialect in Context memref
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CopyOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::PromotableMemOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DestructurableAccessorOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::PromotableAllocationOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DestructurableAllocationOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ViewLikeOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::bufferization::AllocationOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RuntimeVerifiableOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DestructurableTypeInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::linalg::AggregatedOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::linalg::LinalgOp)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::linalg::ContractionOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::linalg::ConvolutionOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::linalg::FillOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::PartialReductionOpInterface)
Load new dialect in Context vector
ImplicitTypeIDRegistry::lookupOrInsert(mlir::vector::MaskableOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::vector::MaskingOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::VectorTransferOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::OpToOpPassAdaptor)

//===-------------------------------------------===//
Legalizing operation : 'builtin.module'(0x5623a7568820) {
} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.func'(0x5623a75797b0) {
  * Fold {
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DialectFoldInterface)
  } -> FAILURE : unable to fold

  * Pattern : 'func.func -> ()' {
Trying to match "(anonymous namespace)::FunctionOpInterfaceSignatureConversion"
    ** Insert Block into : 'func.func'(0x5623a75797b0)
"(anonymous namespace)::FunctionOpInterfaceSignatureConversion" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'func.func'(0x5623a75797b0) {
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i32') doesn't match function result type ('tensor<4xi16>') in function @test_simple_split
mlir-asm-printer: 'builtin.module' failed to verify and will be printed in generic form
"builtin.module"() ({
  "func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
  ^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
    %0 = "builtin.unrealized_conversion_cast"(%arg1) : (tensor<4xi16>) -> i32
    %1 = "builtin.unrealized_conversion_cast"(%0) : (i32) -> tensor<4xi16>
    %2 = "builtin.unrealized_conversion_cast"(%arg0) : (tensor<4xi16>) -> i32
    %3 = "builtin.unrealized_conversion_cast"(%2) : (i32) -> tensor<4xi16>
    %4 = "arith.constant"() <{value = 522067228 : i32}> : () -> i32
    %5 = "arith.constant"() <{value = 31 : i8}> : () -> i8
    %6 = "arith.extui"(%5) : (i8) -> i32
    %7 = "arith.muli"(%4, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32
    %8 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %6) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32
    "func.return"(%7) : (i32) -> ()
  }) : () -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x5623a7577de0) {
  %4 = "arith.constant"() <{value = 522067228 : i32}> : () -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
Trying to match "mlir::heir::arith::ConvertArithConstant"
    ** Insert  : 'arith.constant'(0x5623a75d3010)
    ** Replace : 'arith.constant'(0x5623a7577de0)
"mlir::heir::arith::ConvertArithConstant" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x5623a75d3010) {
      %4 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i32') doesn't match function result type ('tensor<4xi16>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "builtin.unrealized_conversion_cast"(%arg1) : (tensor<4xi16>) -> i32
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i32) -> tensor<4xi16>
  %2 = "builtin.unrealized_conversion_cast"(%arg0) : (tensor<4xi16>) -> i32
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i32) -> tensor<4xi16>
  %4 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = 522067228 : i32}> : () -> i32
  %6 = "arith.constant"() <{value = 31 : i8}> : () -> i8
  %7 = "arith.extui"(%6) : (i8) -> i32
  %8 = "arith.muli"(%5, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32
  %9 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %7) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32
  "func.return"(%8) : (i32) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x5623a7578320) {
  %6 = "arith.constant"() <{value = 31 : i8}> : () -> i8

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.extui'(0x5623a7578840) {
  %7 = "arith.extui"(%6) : (i8) -> i32

  * Fold {
    ** Insert  : 'arith.constant'(0x5623a75d6e20)
    ** Replace : 'arith.extui'(0x5623a7578840)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x5623a75d6e20) {
      %7 = "arith.constant"() <{value = 31 : i32}> : () -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
Trying to match "mlir::heir::arith::ConvertArithConstant"
        ** Insert  : 'arith.constant'(0x5623a75d1cf0)
        ** Replace : 'arith.constant'(0x5623a75d6e20)
"mlir::heir::arith::ConvertArithConstant" result 1

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x5623a75d1cf0) {
          %7 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i32') doesn't match function result type ('tensor<4xi16>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "builtin.unrealized_conversion_cast"(%arg1) : (tensor<4xi16>) -> i32
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i32) -> tensor<4xi16>
  %2 = "builtin.unrealized_conversion_cast"(%arg0) : (tensor<4xi16>) -> i32
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i32) -> tensor<4xi16>
  %4 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = 522067228 : i32}> : () -> i32
  %6 = "arith.constant"() <{value = 31 : i8}> : () -> i8
  %7 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %8 = "arith.constant"() <{value = 31 : i32}> : () -> i32
  %9 = "arith.extui"(%6) : (i8) -> i32
  %10 = "arith.muli"(%5, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32
  %11 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %9) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32
  "func.return"(%10) : (i32) -> ()
}) : () -> ()


    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS
} -> SUCCESS : operation was folded
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.muli'(0x5623a7563b40) {
  %10 = "arith.muli"(%5, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32

  * Fold {

    //===-------------------------------------------===//
    Legalizing operation : 'arith.muli'(0x5623a7563b40) {
      %10 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %5) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.muli -> ()' {
Trying to match "mlir::heir::arith::ConvertMulI"
        ** Insert  : 'arith.constant'(0x5623a75d5e20)
        ** Insert  : 'arith.constant'(0x5623a75d48f0)
        ** Insert  : 'tensor.extract'(0x5623a757fdb0)
        ** Insert  : 'arith.constant'(0x5623a75d4da0)
        ** Insert  : 'tensor.extract'(0x5623a7599580)
        ** Insert  : 'arith.constant'(0x5623a75d4e70)
        ** Insert  : 'tensor.extract'(0x5623a75d4f10)
        ** Insert  : 'arith.constant'(0x5623a75d7f70)
        ** Insert  : 'tensor.extract'(0x5623a75d8010)
        ** Insert  : 'arith.constant'(0x5623a75d80f0)
        ** Insert  : 'tensor.extract'(0x5623a75d8190)
        ** Insert  : 'arith.constant'(0x5623a75baa70)
        ** Insert  : 'tensor.extract'(0x5623a75d8270)
        ** Insert  : 'arith.constant'(0x5623a75d8350)
        ** Insert  : 'tensor.extract'(0x5623a75d83f0)
        ** Insert  : 'arith.constant'(0x5623a75d84d0)
        ** Insert  : 'tensor.extract'(0x5623a75d8570)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::arith::detail::MulIOpGenericAdaptorBase::Properties)
        ** Insert  : 'arith.muli'(0x5623a75d8680)
        ** Insert  : 'arith.muli'(0x5623a75d5400)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::arith::detail::AddIOpGenericAdaptorBase::Properties)
        ** Insert  : 'arith.addi'(0x5623a75d54e0)
        ** Insert  : 'arith.addi'(0x5623a75d55c0)
        ** Insert  : 'arith.muli'(0x5623a75d56a0)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::arith::detail::SubIOpGenericAdaptorBase::Properties)
        ** Insert  : 'arith.subi'(0x5623a75d5780)
        ** Insert  : 'arith.subi'(0x5623a75d8b90)
        ** Insert  : 'arith.muli'(0x5623a75d8c40)
        ** Insert  : 'arith.muli'(0x5623a75d8cf0)
        ** Insert  : 'arith.addi'(0x5623a75d8da0)
        ** Insert  : 'arith.addi'(0x5623a75d8e50)
        ** Insert  : 'arith.muli'(0x5623a75d8f00)
        ** Insert  : 'arith.subi'(0x5623a75d8fe0)
        ** Insert  : 'arith.subi'(0x5623a75d90c0)
        ** Insert  : 'arith.muli'(0x5623a75d91a0)
        ** Insert  : 'arith.muli'(0x5623a75d9280)
        ** Insert  : 'arith.addi'(0x5623a75d9360)
        ** Insert  : 'arith.addi'(0x5623a75d9440)
        ** Insert  : 'arith.muli'(0x5623a75d9520)
        ** Insert  : 'arith.subi'(0x5623a75d9600)
        ** Insert  : 'arith.subi'(0x5623a75d96e0)
        ** Insert  : 'arith.addi'(0x5623a75d97c0)
        ** Insert  : 'arith.addi'(0x5623a75d98a0)
        ** Insert  : 'arith.addi'(0x5623a75d9980)
        ** Insert  : 'arith.trunci'(0x5623a75d9a60)
        ** Insert  : 'arith.extui'(0x5623a75d9b20)
        ** Insert  : 'arith.shrui'(0x5623a75d9be0)
        ** Insert  : 'arith.trunci'(0x5623a75d9cc0)
        ** Insert  : 'arith.extui'(0x5623a75d9d80)
        ** Insert  : 'arith.shrui'(0x5623a75d9e40)
        ** Insert  : 'arith.trunci'(0x5623a75d9f20)
        ** Insert  : 'arith.extui'(0x5623a75d9fe0)
        ** Insert  : 'arith.shrui'(0x5623a75da0a0)
        ** Insert  : 'arith.trunci'(0x5623a75da180)
        ** Insert  : 'arith.extui'(0x5623a75da240)
        ** Insert  : 'arith.addi'(0x5623a75da300)
        ** Insert  : 'arith.addi'(0x5623a75da3e0)
        ** Insert  : 'arith.addi'(0x5623a75da4c0)
        ** Insert  : 'arith.constant'(0x5623a75daa10)
        ** Insert  : 'arith.constant'(0x5623a75daab0)
        ** Insert  : 'tensor.insert'(0x5623a75dab50)
        ** Insert  : 'arith.constant'(0x5623a75dac50)
        ** Insert  : 'tensor.insert'(0x5623a75dacf0)
        ** Insert  : 'arith.constant'(0x5623a75dadf0)
        ** Insert  : 'tensor.insert'(0x5623a75dae90)
        ** Insert  : 'arith.constant'(0x5623a75daf90)
        ** Insert  : 'tensor.insert'(0x5623a75db030)
        ** Replace : 'arith.muli'(0x5623a7563b40)
"mlir::heir::arith::ConvertMulI" result 1

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x5623a75d5e20) {
          %10 = "arith.constant"() <{value = 8 : i16}> : () -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x5623a75d48f0) {
          %11 = "arith.constant"() <{value = 0 : index}> : () -> index

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'tensor.extract'(0x5623a757fdb0) {
          %12 = "tensor.extract"(%1, %11) : (tensor<4xi16>, index) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x5623a75d4da0) {
          %13 = "arith.constant"() <{value = 1 : index}> : () -> index

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'tensor.extract'(0x5623a7599580) {
          %14 = "tensor.extract"(%1, %13) : (tensor<4xi16>, index) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x5623a75d4e70) {
          %15 = "arith.constant"() <{value = 2 : index}> : () -> index

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'tensor.extract'(0x5623a75d4f10) {
          %16 = "tensor.extract"(%1, %15) : (tensor<4xi16>, index) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x5623a75d7f70) {
          %17 = "arith.constant"() <{value = 3 : index}> : () -> index

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'tensor.extract'(0x5623a75d8010) {
          %18 = "tensor.extract"(%1, %17) : (tensor<4xi16>, index) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x5623a75d80f0) {
          %19 = "arith.constant"() <{value = 0 : index}> : () -> index

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'tensor.extract'(0x5623a75d8190) {
          %20 = "tensor.extract"(%4, %19) : (tensor<4xi16>, index) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x5623a75baa70) {
          %21 = "arith.constant"() <{value = 1 : index}> : () -> index

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'tensor.extract'(0x5623a75d8270) {
          %22 = "tensor.extract"(%4, %21) : (tensor<4xi16>, index) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x5623a75d8350) {
          %23 = "arith.constant"() <{value = 2 : index}> : () -> index

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'tensor.extract'(0x5623a75d83f0) {
          %24 = "tensor.extract"(%4, %23) : (tensor<4xi16>, index) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x5623a75d84d0) {
          %25 = "arith.constant"() <{value = 3 : index}> : () -> index

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'tensor.extract'(0x5623a75d8570) {
          %26 = "tensor.extract"(%4, %25) : (tensor<4xi16>, index) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x5623a75d8680) {
          %27 = "arith.muli"(%12, %20) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x5623a75d5400) {
          %28 = "arith.muli"(%14, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x5623a75d54e0) {
          %29 = "arith.addi"(%12, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x5623a75d55c0) {
          %30 = "arith.addi"(%20, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x5623a75d56a0) {
          %31 = "arith.muli"(%29, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.subi'(0x5623a75d5780) {
          %32 = "arith.subi"(%31, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.subi'(0x5623a75d8b90) {
          %33 = "arith.subi"(%32, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x5623a75d8c40) {
          %34 = "arith.muli"(%12, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x5623a75d8cf0) {
          %35 = "arith.muli"(%14, %26) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x5623a75d8da0) {
          %36 = "arith.addi"(%12, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x5623a75d8e50) {
          %37 = "arith.addi"(%24, %26) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x5623a75d8f00) {
          %38 = "arith.muli"(%36, %37) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.subi'(0x5623a75d8fe0) {
          %39 = "arith.subi"(%38, %34) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.subi'(0x5623a75d90c0) {
          %40 = "arith.subi"(%39, %35) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x5623a75d91a0) {
          %41 = "arith.muli"(%16, %20) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x5623a75d9280) {
          %42 = "arith.muli"(%18, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x5623a75d9360) {
          %43 = "arith.addi"(%16, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x5623a75d9440) {
          %44 = "arith.addi"(%20, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x5623a75d9520) {
          %45 = "arith.muli"(%43, %44) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.subi'(0x5623a75d9600) {
          %46 = "arith.subi"(%45, %41) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.subi'(0x5623a75d96e0) {
          %47 = "arith.subi"(%46, %42) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x5623a75d97c0) {
          %48 = "arith.addi"(%34, %41) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x5623a75d98a0) {
          %49 = "arith.addi"(%48, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x5623a75d9980) {
          %50 = "arith.addi"(%40, %47) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.trunci'(0x5623a75d9a60) {
          %51 = "arith.trunci"(%27) : (i16) -> i8

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.extui'(0x5623a75d9b20) {
          %52 = "arith.extui"(%51) : (i8) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.shrui'(0x5623a75d9be0) {
          %53 = "arith.shrui"(%27, %10) : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.trunci'(0x5623a75d9cc0) {
          %54 = "arith.trunci"(%33) : (i16) -> i8

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.extui'(0x5623a75d9d80) {
          %55 = "arith.extui"(%54) : (i8) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.shrui'(0x5623a75d9e40) {
          %56 = "arith.shrui"(%33, %10) : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.trunci'(0x5623a75d9f20) {
          %57 = "arith.trunci"(%49) : (i16) -> i8

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.extui'(0x5623a75d9fe0) {
          %58 = "arith.extui"(%57) : (i8) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.shrui'(0x5623a75da0a0) {
          %59 = "arith.shrui"(%49, %10) : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.trunci'(0x5623a75da180) {
          %60 = "arith.trunci"(%50) : (i16) -> i8

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.extui'(0x5623a75da240) {
          %61 = "arith.extui"(%60) : (i8) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x5623a75da300) {
          %62 = "arith.addi"(%55, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x5623a75da3e0) {
          %63 = "arith.addi"(%58, %56) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x5623a75da4c0) {
          %64 = "arith.addi"(%61, %59) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x5623a75daa10) {
          %65 = "arith.constant"() <{value = dense<0> : tensor<4xi16>}> : () -> tensor<4xi16>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x5623a75daab0) {
          %66 = "arith.constant"() <{value = 0 : index}> : () -> index

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'tensor.insert'(0x5623a75dab50) {
          %67 = "tensor.insert"(%52, %65, %66) : (i16, tensor<4xi16>, index) -> tensor<4xi16>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x5623a75dac50) {
          %68 = "arith.constant"() <{value = 1 : index}> : () -> index

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'tensor.insert'(0x5623a75dacf0) {
          %69 = "tensor.insert"(%62, %67, %68) : (i16, tensor<4xi16>, index) -> tensor<4xi16>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x5623a75dadf0) {
          %70 = "arith.constant"() <{value = 2 : index}> : () -> index

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'tensor.insert'(0x5623a75dae90) {
          %71 = "tensor.insert"(%63, %69, %70) : (i16, tensor<4xi16>, index) -> tensor<4xi16>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x5623a75daf90) {
          %72 = "arith.constant"() <{value = 3 : index}> : () -> index

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'tensor.insert'(0x5623a75db030) {
          %73 = "tensor.insert"(%64, %71, %72) : (i16, tensor<4xi16>, index) -> tensor<4xi16>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i32') doesn't match function result type ('tensor<4xi16>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "builtin.unrealized_conversion_cast"(%arg1) : (tensor<4xi16>) -> i32
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i32) -> tensor<4xi16>
  %2 = "builtin.unrealized_conversion_cast"(%arg0) : (tensor<4xi16>) -> i32
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i32) -> tensor<4xi16>
  %4 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = 522067228 : i32}> : () -> i32
  %6 = "arith.constant"() <{value = 31 : i8}> : () -> i8
  %7 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %8 = "arith.constant"() <{value = 31 : i32}> : () -> i32
  %9 = "arith.extui"(%6) : (i8) -> i32
  %10 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %11 = "arith.constant"() <{value = 0 : index}> : () -> index
  %12 = "tensor.extract"(%1, %11) : (tensor<4xi16>, index) -> i16
  %13 = "arith.constant"() <{value = 1 : index}> : () -> index
  %14 = "tensor.extract"(%1, %13) : (tensor<4xi16>, index) -> i16
  %15 = "arith.constant"() <{value = 2 : index}> : () -> index
  %16 = "tensor.extract"(%1, %15) : (tensor<4xi16>, index) -> i16
  %17 = "arith.constant"() <{value = 3 : index}> : () -> index
  %18 = "tensor.extract"(%1, %17) : (tensor<4xi16>, index) -> i16
  %19 = "arith.constant"() <{value = 0 : index}> : () -> index
  %20 = "tensor.extract"(%4, %19) : (tensor<4xi16>, index) -> i16
  %21 = "arith.constant"() <{value = 1 : index}> : () -> index
  %22 = "tensor.extract"(%4, %21) : (tensor<4xi16>, index) -> i16
  %23 = "arith.constant"() <{value = 2 : index}> : () -> index
  %24 = "tensor.extract"(%4, %23) : (tensor<4xi16>, index) -> i16
  %25 = "arith.constant"() <{value = 3 : index}> : () -> index
  %26 = "tensor.extract"(%4, %25) : (tensor<4xi16>, index) -> i16
  %27 = "arith.muli"(%12, %20) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.muli"(%14, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.addi"(%12, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.addi"(%20, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.muli"(%29, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.subi"(%31, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.muli"(%12, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.muli"(%14, %26) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.addi"(%12, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.addi"(%24, %26) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.muli"(%36, %37) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %39 = "arith.subi"(%38, %34) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "arith.subi"(%39, %35) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %41 = "arith.muli"(%16, %20) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "arith.muli"(%18, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %43 = "arith.addi"(%16, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "arith.addi"(%20, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %45 = "arith.muli"(%43, %44) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "arith.subi"(%45, %41) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %47 = "arith.subi"(%46, %42) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "arith.addi"(%34, %41) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.addi"(%48, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%40, %47) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.trunci"(%27) : (i16) -> i8
  %52 = "arith.extui"(%51) : (i8) -> i16
  %53 = "arith.shrui"(%27, %10) : (i16, i16) -> i16
  %54 = "arith.trunci"(%33) : (i16) -> i8
  %55 = "arith.extui"(%54) : (i8) -> i16
  %56 = "arith.shrui"(%33, %10) : (i16, i16) -> i16
  %57 = "arith.trunci"(%49) : (i16) -> i8
  %58 = "arith.extui"(%57) : (i8) -> i16
  %59 = "arith.shrui"(%49, %10) : (i16, i16) -> i16
  %60 = "arith.trunci"(%50) : (i16) -> i8
  %61 = "arith.extui"(%60) : (i8) -> i16
  %62 = "arith.addi"(%55, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %63 = "arith.addi"(%58, %56) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "arith.addi"(%61, %59) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %65 = "arith.constant"() <{value = dense<0> : tensor<4xi16>}> : () -> tensor<4xi16>
  %66 = "arith.constant"() <{value = 0 : index}> : () -> index
  %67 = "tensor.insert"(%52, %65, %66) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %68 = "arith.constant"() <{value = 1 : index}> : () -> index
  %69 = "tensor.insert"(%62, %67, %68) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %70 = "arith.constant"() <{value = 2 : index}> : () -> index
  %71 = "tensor.insert"(%63, %69, %70) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %72 = "arith.constant"() <{value = 3 : index}> : () -> index
  %73 = "tensor.insert"(%64, %71, %72) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %74 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %5) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32
  %75 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %9) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32
  "func.return"(%74) : (i32) -> ()
}) : () -> ()


    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : operation was folded
  //===-------------------------------------------===//

  //===-------------------------------------------===//
  Legalizing operation : 'arith.addi'(0x5623a75733b0) {
    %75 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %9) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32

    * Fold {
    } -> FAILURE : unable to fold

    * Pattern : 'arith.addi -> ()' {
Trying to match "mlir::heir::arith::ConvertAddI"
      ** Insert  : 'arith.constant'(0x5623a75de420)
      ** Insert  : 'tensor.extract'(0x5623a75de490)
      ** Insert  : 'arith.constant'(0x5623a75de540)
      ** Insert  : 'tensor.extract'(0x5623a75de5e0)
      ** Insert  : 'arith.constant'(0x5623a75de6c0)
      ** Insert  : 'tensor.extract'(0x5623a75de760)
      ** Insert  : 'arith.constant'(0x5623a75de840)
      ** Insert  : 'tensor.extract'(0x5623a75de8e0)
      ** Insert  : 'arith.constant'(0x5623a75de9c0)
      ** Insert  : 'tensor.extract'(0x5623a75db1d0)
      ** Insert  : 'arith.constant'(0x5623a75db2b0)
      ** Insert  : 'tensor.extract'(0x5623a75db350)
      ** Insert  : 'arith.constant'(0x5623a75db430)
      ** Insert  : 'tensor.extract'(0x5623a75db4d0)
      ** Insert  : 'arith.constant'(0x5623a75db5b0)
      ** Insert  : 'tensor.extract'(0x5623a75db650)
      ** Insert  : 'arith.constant'(0x5623a75db730)
      ** Insert  : 'arith.addi'(0x5623a75db7d0)
      ** Insert  : 'arith.addi'(0x5623a75db8b0)
      ** Insert  : 'arith.addi'(0x5623a75db990)
      ** Insert  : 'arith.addi'(0x5623a75dba70)
      ** Insert  : 'arith.trunci'(0x5623a75dbb50)
      ** Insert  : 'arith.extui'(0x5623a75dbc10)
      ** Insert  : 'arith.trunci'(0x5623a75dbcd0)
      ** Insert  : 'arith.extui'(0x5623a75dbd90)
      ** Insert  : 'arith.trunci'(0x5623a75dbe50)
      ** Insert  : 'arith.extui'(0x5623a75dbf10)
      ** Insert  : 'arith.trunci'(0x5623a75dbfd0)
      ** Insert  : 'arith.extui'(0x5623a75dc090)
      ** Insert  : 'arith.shrui'(0x5623a75dc150)
      ** Insert  : 'arith.shrui'(0x5623a75dc930)
      ** Insert  : 'arith.shrui'(0x5623a75dca10)
      ** Insert  : 'arith.addi'(0x5623a75dcaf0)
      ** Insert  : 'arith.addi'(0x5623a75dcbd0)
      ** Insert  : 'arith.addi'(0x5623a75dccb0)
      ** Insert  : 'arith.constant'(0x5623a75dcd90)
      ** Insert  : 'arith.constant'(0x5623a75dce30)
      ** Insert  : 'tensor.insert'(0x5623a75dced0)
      ** Insert  : 'arith.constant'(0x5623a75dcfd0)
      ** Insert  : 'tensor.insert'(0x5623a75dd070)
      ** Insert  : 'arith.constant'(0x5623a75dd170)
      ** Insert  : 'tensor.insert'(0x5623a75dd210)
      ** Insert  : 'arith.constant'(0x5623a75dd310)
      ** Insert  : 'tensor.insert'(0x5623a75dd3b0)
      ** Replace : 'arith.addi'(0x5623a75733b0)
"mlir::heir::arith::ConvertAddI" result 1

      //===-------------------------------------------===//
      Legalizing operation : 'arith.constant'(0x5623a75de420) {
        %75 = "arith.constant"() <{value = 0 : index}> : () -> index

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'tensor.extract'(0x5623a75de490) {
        %76 = "tensor.extract"(%3, %75) : (tensor<4xi16>, index) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.constant'(0x5623a75de540) {
        %77 = "arith.constant"() <{value = 1 : index}> : () -> index

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'tensor.extract'(0x5623a75de5e0) {
        %78 = "tensor.extract"(%3, %77) : (tensor<4xi16>, index) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.constant'(0x5623a75de6c0) {
        %79 = "arith.constant"() <{value = 2 : index}> : () -> index

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'tensor.extract'(0x5623a75de760) {
        %80 = "tensor.extract"(%3, %79) : (tensor<4xi16>, index) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.constant'(0x5623a75de840) {
        %81 = "arith.constant"() <{value = 3 : index}> : () -> index

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'tensor.extract'(0x5623a75de8e0) {
        %82 = "tensor.extract"(%3, %81) : (tensor<4xi16>, index) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.constant'(0x5623a75de9c0) {
        %83 = "arith.constant"() <{value = 0 : index}> : () -> index

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'tensor.extract'(0x5623a75db1d0) {
        %84 = "tensor.extract"(%7, %83) : (tensor<4xi16>, index) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.constant'(0x5623a75db2b0) {
        %85 = "arith.constant"() <{value = 1 : index}> : () -> index

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'tensor.extract'(0x5623a75db350) {
        %86 = "tensor.extract"(%7, %85) : (tensor<4xi16>, index) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.constant'(0x5623a75db430) {
        %87 = "arith.constant"() <{value = 2 : index}> : () -> index

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'tensor.extract'(0x5623a75db4d0) {
        %88 = "tensor.extract"(%7, %87) : (tensor<4xi16>, index) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.constant'(0x5623a75db5b0) {
        %89 = "arith.constant"() <{value = 3 : index}> : () -> index

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'tensor.extract'(0x5623a75db650) {
        %90 = "tensor.extract"(%7, %89) : (tensor<4xi16>, index) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.constant'(0x5623a75db730) {
        %91 = "arith.constant"() <{value = 8 : i16}> : () -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.addi'(0x5623a75db7d0) {
        %92 = "arith.addi"(%76, %84) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.addi'(0x5623a75db8b0) {
        %93 = "arith.addi"(%78, %86) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.addi'(0x5623a75db990) {
        %94 = "arith.addi"(%80, %88) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.addi'(0x5623a75dba70) {
        %95 = "arith.addi"(%82, %90) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.trunci'(0x5623a75dbb50) {
        %96 = "arith.trunci"(%92) : (i16) -> i8

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.extui'(0x5623a75dbc10) {
        %97 = "arith.extui"(%96) : (i8) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.trunci'(0x5623a75dbcd0) {
        %98 = "arith.trunci"(%93) : (i16) -> i8

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.extui'(0x5623a75dbd90) {
        %99 = "arith.extui"(%98) : (i8) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.trunci'(0x5623a75dbe50) {
        %100 = "arith.trunci"(%94) : (i16) -> i8

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.extui'(0x5623a75dbf10) {
        %101 = "arith.extui"(%100) : (i8) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.trunci'(0x5623a75dbfd0) {
        %102 = "arith.trunci"(%95) : (i16) -> i8

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.extui'(0x5623a75dc090) {
        %103 = "arith.extui"(%102) : (i8) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.shrui'(0x5623a75dc150) {
        %104 = "arith.shrui"(%92, %91) : (i16, i16) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.shrui'(0x5623a75dc930) {
        %105 = "arith.shrui"(%93, %91) : (i16, i16) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.shrui'(0x5623a75dca10) {
        %106 = "arith.shrui"(%94, %91) : (i16, i16) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.addi'(0x5623a75dcaf0) {
        %107 = "arith.addi"(%99, %104) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.addi'(0x5623a75dcbd0) {
        %108 = "arith.addi"(%101, %105) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.addi'(0x5623a75dccb0) {
        %109 = "arith.addi"(%103, %106) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.constant'(0x5623a75dcd90) {
        %110 = "arith.constant"() <{value = dense<0> : tensor<4xi16>}> : () -> tensor<4xi16>

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.constant'(0x5623a75dce30) {
        %111 = "arith.constant"() <{value = 0 : index}> : () -> index

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'tensor.insert'(0x5623a75dced0) {
        %112 = "tensor.insert"(%97, %110, %111) : (i16, tensor<4xi16>, index) -> tensor<4xi16>

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.constant'(0x5623a75dcfd0) {
        %113 = "arith.constant"() <{value = 1 : index}> : () -> index

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'tensor.insert'(0x5623a75dd070) {
        %114 = "tensor.insert"(%107, %112, %113) : (i16, tensor<4xi16>, index) -> tensor<4xi16>

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.constant'(0x5623a75dd170) {
        %115 = "arith.constant"() <{value = 2 : index}> : () -> index

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'tensor.insert'(0x5623a75dd210) {
        %116 = "tensor.insert"(%108, %114, %115) : (i16, tensor<4xi16>, index) -> tensor<4xi16>

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'arith.constant'(0x5623a75dd310) {
        %117 = "arith.constant"() <{value = 3 : index}> : () -> index

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//

      //===-------------------------------------------===//
      Legalizing operation : 'tensor.insert'(0x5623a75dd3b0) {
        %118 = "tensor.insert"(%109, %116, %117) : (i16, tensor<4xi16>, index) -> tensor<4xi16>

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//
    } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i32') doesn't match function result type ('tensor<4xi16>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "builtin.unrealized_conversion_cast"(%arg1) : (tensor<4xi16>) -> i32
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i32) -> tensor<4xi16>
  %2 = "builtin.unrealized_conversion_cast"(%arg0) : (tensor<4xi16>) -> i32
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i32) -> tensor<4xi16>
  %4 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = 522067228 : i32}> : () -> i32
  %6 = "arith.constant"() <{value = 31 : i8}> : () -> i8
  %7 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %8 = "arith.constant"() <{value = 31 : i32}> : () -> i32
  %9 = "arith.extui"(%6) : (i8) -> i32
  %10 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %11 = "arith.constant"() <{value = 0 : index}> : () -> index
  %12 = "tensor.extract"(%1, %11) : (tensor<4xi16>, index) -> i16
  %13 = "arith.constant"() <{value = 1 : index}> : () -> index
  %14 = "tensor.extract"(%1, %13) : (tensor<4xi16>, index) -> i16
  %15 = "arith.constant"() <{value = 2 : index}> : () -> index
  %16 = "tensor.extract"(%1, %15) : (tensor<4xi16>, index) -> i16
  %17 = "arith.constant"() <{value = 3 : index}> : () -> index
  %18 = "tensor.extract"(%1, %17) : (tensor<4xi16>, index) -> i16
  %19 = "arith.constant"() <{value = 0 : index}> : () -> index
  %20 = "tensor.extract"(%4, %19) : (tensor<4xi16>, index) -> i16
  %21 = "arith.constant"() <{value = 1 : index}> : () -> index
  %22 = "tensor.extract"(%4, %21) : (tensor<4xi16>, index) -> i16
  %23 = "arith.constant"() <{value = 2 : index}> : () -> index
  %24 = "tensor.extract"(%4, %23) : (tensor<4xi16>, index) -> i16
  %25 = "arith.constant"() <{value = 3 : index}> : () -> index
  %26 = "tensor.extract"(%4, %25) : (tensor<4xi16>, index) -> i16
  %27 = "arith.muli"(%12, %20) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.muli"(%14, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.addi"(%12, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.addi"(%20, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.muli"(%29, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.subi"(%31, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.muli"(%12, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.muli"(%14, %26) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.addi"(%12, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.addi"(%24, %26) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.muli"(%36, %37) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %39 = "arith.subi"(%38, %34) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "arith.subi"(%39, %35) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %41 = "arith.muli"(%16, %20) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "arith.muli"(%18, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %43 = "arith.addi"(%16, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "arith.addi"(%20, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %45 = "arith.muli"(%43, %44) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "arith.subi"(%45, %41) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %47 = "arith.subi"(%46, %42) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "arith.addi"(%34, %41) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.addi"(%48, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%40, %47) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.trunci"(%27) : (i16) -> i8
  %52 = "arith.extui"(%51) : (i8) -> i16
  %53 = "arith.shrui"(%27, %10) : (i16, i16) -> i16
  %54 = "arith.trunci"(%33) : (i16) -> i8
  %55 = "arith.extui"(%54) : (i8) -> i16
  %56 = "arith.shrui"(%33, %10) : (i16, i16) -> i16
  %57 = "arith.trunci"(%49) : (i16) -> i8
  %58 = "arith.extui"(%57) : (i8) -> i16
  %59 = "arith.shrui"(%49, %10) : (i16, i16) -> i16
  %60 = "arith.trunci"(%50) : (i16) -> i8
  %61 = "arith.extui"(%60) : (i8) -> i16
  %62 = "arith.addi"(%55, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %63 = "arith.addi"(%58, %56) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "arith.addi"(%61, %59) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %65 = "arith.constant"() <{value = dense<0> : tensor<4xi16>}> : () -> tensor<4xi16>
  %66 = "arith.constant"() <{value = 0 : index}> : () -> index
  %67 = "tensor.insert"(%52, %65, %66) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %68 = "arith.constant"() <{value = 1 : index}> : () -> index
  %69 = "tensor.insert"(%62, %67, %68) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %70 = "arith.constant"() <{value = 2 : index}> : () -> index
  %71 = "tensor.insert"(%63, %69, %70) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %72 = "arith.constant"() <{value = 3 : index}> : () -> index
  %73 = "tensor.insert"(%64, %71, %72) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %74 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %5) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32
  %75 = "arith.constant"() <{value = 0 : index}> : () -> index
  %76 = "tensor.extract"(%3, %75) : (tensor<4xi16>, index) -> i16
  %77 = "arith.constant"() <{value = 1 : index}> : () -> index
  %78 = "tensor.extract"(%3, %77) : (tensor<4xi16>, index) -> i16
  %79 = "arith.constant"() <{value = 2 : index}> : () -> index
  %80 = "tensor.extract"(%3, %79) : (tensor<4xi16>, index) -> i16
  %81 = "arith.constant"() <{value = 3 : index}> : () -> index
  %82 = "tensor.extract"(%3, %81) : (tensor<4xi16>, index) -> i16
  %83 = "arith.constant"() <{value = 0 : index}> : () -> index
  %84 = "tensor.extract"(%7, %83) : (tensor<4xi16>, index) -> i16
  %85 = "arith.constant"() <{value = 1 : index}> : () -> index
  %86 = "tensor.extract"(%7, %85) : (tensor<4xi16>, index) -> i16
  %87 = "arith.constant"() <{value = 2 : index}> : () -> index
  %88 = "tensor.extract"(%7, %87) : (tensor<4xi16>, index) -> i16
  %89 = "arith.constant"() <{value = 3 : index}> : () -> index
  %90 = "tensor.extract"(%7, %89) : (tensor<4xi16>, index) -> i16
  %91 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %92 = "arith.addi"(%76, %84) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %93 = "arith.addi"(%78, %86) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %94 = "arith.addi"(%80, %88) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %95 = "arith.addi"(%82, %90) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %96 = "arith.trunci"(%92) : (i16) -> i8
  %97 = "arith.extui"(%96) : (i8) -> i16
  %98 = "arith.trunci"(%93) : (i16) -> i8
  %99 = "arith.extui"(%98) : (i8) -> i16
  %100 = "arith.trunci"(%94) : (i16) -> i8
  %101 = "arith.extui"(%100) : (i8) -> i16
  %102 = "arith.trunci"(%95) : (i16) -> i8
  %103 = "arith.extui"(%102) : (i8) -> i16
  %104 = "arith.shrui"(%92, %91) : (i16, i16) -> i16
  %105 = "arith.shrui"(%93, %91) : (i16, i16) -> i16
  %106 = "arith.shrui"(%94, %91) : (i16, i16) -> i16
  %107 = "arith.addi"(%99, %104) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %108 = "arith.addi"(%101, %105) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %109 = "arith.addi"(%103, %106) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %110 = "arith.constant"() <{value = dense<0> : tensor<4xi16>}> : () -> tensor<4xi16>
  %111 = "arith.constant"() <{value = 0 : index}> : () -> index
  %112 = "tensor.insert"(%97, %110, %111) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %113 = "arith.constant"() <{value = 1 : index}> : () -> index
  %114 = "tensor.insert"(%107, %112, %113) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %115 = "arith.constant"() <{value = 2 : index}> : () -> index
  %116 = "tensor.insert"(%108, %114, %115) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %117 = "arith.constant"() <{value = 3 : index}> : () -> index
  %118 = "tensor.insert"(%109, %116, %117) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %119 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %9) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32
  "func.return"(%74) : (i32) -> ()
}) : () -> ()


  } -> SUCCESS
  //===-------------------------------------------===//

  //===-------------------------------------------===//
  Legalizing operation : 'func.return'(0x5623a75792c0) {
    "func.return"(%74) : (i32) -> ()

    * Fold {
    } -> FAILURE : unable to fold

    * Pattern : 'func.return -> ()' {
Trying to match "(anonymous namespace)::ReturnOpTypeConversion"
      ** Insert  : 'func.return'(0x5623a75cef10)
      ** Replace : 'func.return'(0x5623a75792c0)
"(anonymous namespace)::ReturnOpTypeConversion" result 1

      //===-------------------------------------------===//
      Legalizing operation : 'func.return'(0x5623a75cef10) {
        "func.return"(%73) : (tensor<4xi16>) -> ()

      } -> SUCCESS : operation marked legal by the target
      //===-------------------------------------------===//
    } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
'func.return' op must be the last operation in the parent block
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "builtin.unrealized_conversion_cast"(%arg1) : (tensor<4xi16>) -> i32
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i32) -> tensor<4xi16>
  %2 = "builtin.unrealized_conversion_cast"(%arg0) : (tensor<4xi16>) -> i32
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i32) -> tensor<4xi16>
  %4 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = 522067228 : i32}> : () -> i32
  %6 = "arith.constant"() <{value = 31 : i8}> : () -> i8
  %7 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %8 = "arith.constant"() <{value = 31 : i32}> : () -> i32
  %9 = "arith.extui"(%6) : (i8) -> i32
  %10 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %11 = "arith.constant"() <{value = 0 : index}> : () -> index
  %12 = "tensor.extract"(%1, %11) : (tensor<4xi16>, index) -> i16
  %13 = "arith.constant"() <{value = 1 : index}> : () -> index
  %14 = "tensor.extract"(%1, %13) : (tensor<4xi16>, index) -> i16
  %15 = "arith.constant"() <{value = 2 : index}> : () -> index
  %16 = "tensor.extract"(%1, %15) : (tensor<4xi16>, index) -> i16
  %17 = "arith.constant"() <{value = 3 : index}> : () -> index
  %18 = "tensor.extract"(%1, %17) : (tensor<4xi16>, index) -> i16
  %19 = "arith.constant"() <{value = 0 : index}> : () -> index
  %20 = "tensor.extract"(%4, %19) : (tensor<4xi16>, index) -> i16
  %21 = "arith.constant"() <{value = 1 : index}> : () -> index
  %22 = "tensor.extract"(%4, %21) : (tensor<4xi16>, index) -> i16
  %23 = "arith.constant"() <{value = 2 : index}> : () -> index
  %24 = "tensor.extract"(%4, %23) : (tensor<4xi16>, index) -> i16
  %25 = "arith.constant"() <{value = 3 : index}> : () -> index
  %26 = "tensor.extract"(%4, %25) : (tensor<4xi16>, index) -> i16
  %27 = "arith.muli"(%12, %20) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.muli"(%14, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.addi"(%12, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.addi"(%20, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.muli"(%29, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.subi"(%31, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.muli"(%12, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.muli"(%14, %26) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.addi"(%12, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.addi"(%24, %26) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.muli"(%36, %37) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %39 = "arith.subi"(%38, %34) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "arith.subi"(%39, %35) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %41 = "arith.muli"(%16, %20) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "arith.muli"(%18, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %43 = "arith.addi"(%16, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "arith.addi"(%20, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %45 = "arith.muli"(%43, %44) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "arith.subi"(%45, %41) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %47 = "arith.subi"(%46, %42) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "arith.addi"(%34, %41) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.addi"(%48, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%40, %47) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.trunci"(%27) : (i16) -> i8
  %52 = "arith.extui"(%51) : (i8) -> i16
  %53 = "arith.shrui"(%27, %10) : (i16, i16) -> i16
  %54 = "arith.trunci"(%33) : (i16) -> i8
  %55 = "arith.extui"(%54) : (i8) -> i16
  %56 = "arith.shrui"(%33, %10) : (i16, i16) -> i16
  %57 = "arith.trunci"(%49) : (i16) -> i8
  %58 = "arith.extui"(%57) : (i8) -> i16
  %59 = "arith.shrui"(%49, %10) : (i16, i16) -> i16
  %60 = "arith.trunci"(%50) : (i16) -> i8
  %61 = "arith.extui"(%60) : (i8) -> i16
  %62 = "arith.addi"(%55, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %63 = "arith.addi"(%58, %56) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "arith.addi"(%61, %59) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %65 = "arith.constant"() <{value = dense<0> : tensor<4xi16>}> : () -> tensor<4xi16>
  %66 = "arith.constant"() <{value = 0 : index}> : () -> index
  %67 = "tensor.insert"(%52, %65, %66) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %68 = "arith.constant"() <{value = 1 : index}> : () -> index
  %69 = "tensor.insert"(%62, %67, %68) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %70 = "arith.constant"() <{value = 2 : index}> : () -> index
  %71 = "tensor.insert"(%63, %69, %70) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %72 = "arith.constant"() <{value = 3 : index}> : () -> index
  %73 = "tensor.insert"(%64, %71, %72) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %74 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %5) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32
  %75 = "arith.constant"() <{value = 0 : index}> : () -> index
  %76 = "tensor.extract"(%3, %75) : (tensor<4xi16>, index) -> i16
  %77 = "arith.constant"() <{value = 1 : index}> : () -> index
  %78 = "tensor.extract"(%3, %77) : (tensor<4xi16>, index) -> i16
  %79 = "arith.constant"() <{value = 2 : index}> : () -> index
  %80 = "tensor.extract"(%3, %79) : (tensor<4xi16>, index) -> i16
  %81 = "arith.constant"() <{value = 3 : index}> : () -> index
  %82 = "tensor.extract"(%3, %81) : (tensor<4xi16>, index) -> i16
  %83 = "arith.constant"() <{value = 0 : index}> : () -> index
  %84 = "tensor.extract"(%7, %83) : (tensor<4xi16>, index) -> i16
  %85 = "arith.constant"() <{value = 1 : index}> : () -> index
  %86 = "tensor.extract"(%7, %85) : (tensor<4xi16>, index) -> i16
  %87 = "arith.constant"() <{value = 2 : index}> : () -> index
  %88 = "tensor.extract"(%7, %87) : (tensor<4xi16>, index) -> i16
  %89 = "arith.constant"() <{value = 3 : index}> : () -> index
  %90 = "tensor.extract"(%7, %89) : (tensor<4xi16>, index) -> i16
  %91 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %92 = "arith.addi"(%76, %84) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %93 = "arith.addi"(%78, %86) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %94 = "arith.addi"(%80, %88) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %95 = "arith.addi"(%82, %90) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %96 = "arith.trunci"(%92) : (i16) -> i8
  %97 = "arith.extui"(%96) : (i8) -> i16
  %98 = "arith.trunci"(%93) : (i16) -> i8
  %99 = "arith.extui"(%98) : (i8) -> i16
  %100 = "arith.trunci"(%94) : (i16) -> i8
  %101 = "arith.extui"(%100) : (i8) -> i16
  %102 = "arith.trunci"(%95) : (i16) -> i8
  %103 = "arith.extui"(%102) : (i8) -> i16
  %104 = "arith.shrui"(%92, %91) : (i16, i16) -> i16
  %105 = "arith.shrui"(%93, %91) : (i16, i16) -> i16
  %106 = "arith.shrui"(%94, %91) : (i16, i16) -> i16
  %107 = "arith.addi"(%99, %104) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %108 = "arith.addi"(%101, %105) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %109 = "arith.addi"(%103, %106) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %110 = "arith.constant"() <{value = dense<0> : tensor<4xi16>}> : () -> tensor<4xi16>
  %111 = "arith.constant"() <{value = 0 : index}> : () -> index
  %112 = "tensor.insert"(%97, %110, %111) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %113 = "arith.constant"() <{value = 1 : index}> : () -> index
  %114 = "tensor.insert"(%107, %112, %113) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %115 = "arith.constant"() <{value = 2 : index}> : () -> index
  %116 = "tensor.insert"(%108, %114, %115) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %117 = "arith.constant"() <{value = 3 : index}> : () -> index
  %118 = "tensor.insert"(%109, %116, %117) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %119 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %9) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32
  "func.return"(%73) : (tensor<4xi16>) -> ()
  "func.return"(%74) : (i32) -> ()
}) : () -> ()


  } -> SUCCESS
  //===-------------------------------------------===//
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DominanceInfo)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::HasRecursiveMemoryEffects<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DestinationStyleOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::PostDominanceInfo)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::PreservedAnalyses::AllAnalysesType)

//===-------------------------------------------===//
Processing operation : 'func.return'(0x5623a75cef10) {
  "func.return"(%55) : (tensor<4xi16>) -> ()


  * Pattern (anonymous namespace)::ConvertTypesInFuncReturnOp : 'func.return -> ()' {
Trying to match "(anonymous namespace)::ConvertTypesInFuncReturnOp"
    ** Insert  : 'builtin.unrealized_conversion_cast'(0x5623a75d2680)
    ** Modified: 'func.return'(0x5623a75cef10)
"(anonymous namespace)::ConvertTypesInFuncReturnOp" result 1
  } -> success : pattern applied successfully
// *** IR Dump After Pattern Application ***
'func.return' op has 4 operands, but enclosing function (@test_simple_split) returns 1
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "arith.constant"() <{value = dense<0> : tensor<4xi16>}> : () -> tensor<4xi16>
  %1 = "arith.constant"() <{value = 3 : index}> : () -> index
  %2 = "arith.constant"() <{value = 2 : index}> : () -> index
  %3 = "arith.constant"() <{value = 1 : index}> : () -> index
  %4 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %6 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %7 = "arith.constant"() <{value = 0 : index}> : () -> index
  %8 = "tensor.extract"(%arg1, %7) : (tensor<4xi16>, index) -> i16
  %9 = "tensor.extract"(%arg1, %3) : (tensor<4xi16>, index) -> i16
  %10 = "tensor.extract"(%arg1, %2) : (tensor<4xi16>, index) -> i16
  %11 = "tensor.extract"(%arg1, %1) : (tensor<4xi16>, index) -> i16
  %12 = "tensor.extract"(%4, %7) : (tensor<4xi16>, index) -> i16
  %13 = "tensor.extract"(%4, %3) : (tensor<4xi16>, index) -> i16
  %14 = "tensor.extract"(%4, %2) : (tensor<4xi16>, index) -> i16
  %15 = "tensor.extract"(%4, %1) : (tensor<4xi16>, index) -> i16
  %16 = "arith.muli"(%8, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %17 = "arith.muli"(%9, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %18 = "arith.addi"(%8, %9) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %19 = "arith.addi"(%12, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %20 = "arith.muli"(%18, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %21 = "arith.subi"(%20, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %22 = "arith.subi"(%21, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %23 = "arith.muli"(%8, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %24 = "arith.muli"(%9, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %25 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %26 = "arith.muli"(%18, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %27 = "arith.subi"(%26, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.subi"(%27, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.muli"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.muli"(%11, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.addi"(%10, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.muli"(%31, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.subi"(%33, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.addi"(%23, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.addi"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.addi"(%28, %34) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.trunci"(%16) : (i16) -> i8
  %39 = "arith.extui"(%38) : (i8) -> i16
  %40 = "arith.shrui"(%16, %6) : (i16, i16) -> i16
  %41 = "arith.trunci"(%22) : (i16) -> i8
  %42 = "arith.extui"(%41) : (i8) -> i16
  %43 = "arith.shrui"(%22, %6) : (i16, i16) -> i16
  %44 = "arith.trunci"(%36) : (i16) -> i8
  %45 = "arith.extui"(%44) : (i8) -> i16
  %46 = "arith.shrui"(%36, %6) : (i16, i16) -> i16
  %47 = "arith.trunci"(%37) : (i16) -> i8
  %48 = "arith.extui"(%47) : (i8) -> i16
  %49 = "arith.addi"(%42, %40) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%45, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.addi"(%48, %46) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "tensor.insert"(%39, %0, %7) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %53 = "tensor.insert"(%49, %52, %3) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %54 = "tensor.insert"(%50, %53, %2) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %55 = "tensor.insert"(%51, %54, %1) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %56 = "tensor.extract"(%arg0, %7) : (tensor<4xi16>, index) -> i16
  %57 = "tensor.extract"(%arg0, %3) : (tensor<4xi16>, index) -> i16
  %58 = "tensor.extract"(%arg0, %2) : (tensor<4xi16>, index) -> i16
  %59 = "tensor.extract"(%arg0, %1) : (tensor<4xi16>, index) -> i16
  %60 = "tensor.extract"(%5, %7) : (tensor<4xi16>, index) -> i16
  %61 = "tensor.extract"(%5, %3) : (tensor<4xi16>, index) -> i16
  %62 = "tensor.extract"(%5, %2) : (tensor<4xi16>, index) -> i16
  %63 = "tensor.extract"(%5, %1) : (tensor<4xi16>, index) -> i16
  %64 = "arith.addi"(%56, %60) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %65 = "arith.addi"(%57, %61) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "arith.addi"(%58, %62) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %67 = "arith.addi"(%59, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "arith.trunci"(%64) : (i16) -> i8
  %69 = "arith.extui"(%68) : (i8) -> i16
  %70 = "arith.trunci"(%65) : (i16) -> i8
  %71 = "arith.extui"(%70) : (i8) -> i16
  %72 = "arith.trunci"(%66) : (i16) -> i8
  %73 = "arith.extui"(%72) : (i8) -> i16
  %74 = "arith.trunci"(%67) : (i16) -> i8
  %75 = "arith.extui"(%74) : (i8) -> i16
  %76 = "arith.shrui"(%64, %6) : (i16, i16) -> i16
  %77 = "arith.shrui"(%65, %6) : (i16, i16) -> i16
  %78 = "arith.shrui"(%66, %6) : (i16, i16) -> i16
  %79 = "arith.addi"(%71, %76) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %80 = "arith.addi"(%73, %77) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %81 = "arith.addi"(%75, %78) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %82 = "tensor.insert"(%69, %0, %7) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %83 = "tensor.insert"(%79, %82, %3) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %84 = "tensor.insert"(%80, %83, %2) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %85:4 = "builtin.unrealized_conversion_cast"(%55) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)
  "func.return"(%85#0, %85#1, %85#2, %85#3) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> success : pattern matched
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'func.return'(0x5623a75cef10) {
  "func.return"(%85#0, %85#1, %85#2, %85#3) : (i16, i16, i16, i16) -> ()

ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::VariadicResults<Empty>)

  * Pattern (anonymous namespace)::ConvertTypesInFuncReturnOp : 'func.return -> ()' {
Trying to match "(anonymous namespace)::ConvertTypesInFuncReturnOp"
"(anonymous namespace)::ConvertTypesInFuncReturnOp" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'builtin.unrealized_conversion_cast'(0x5623a75d2680) {
  %85:4 = "builtin.unrealized_conversion_cast"(%55) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.insert'(0x5623a75dd210) {
  %84 = "tensor.insert"(%80, %83, %2) : (i16, tensor<4xi16>, index) -> tensor<4xi16>

  ** Erase   : 'tensor.insert'(0x5623a75dd210)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.insert'(0x5623a75dd070) {
  %83 = "tensor.insert"(%79, %82, %3) : (i16, tensor<4xi16>, index) -> tensor<4xi16>

  ** Erase   : 'tensor.insert'(0x5623a75dd070)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.insert'(0x5623a75dced0) {
  %82 = "tensor.insert"(%69, %0, %7) : (i16, tensor<4xi16>, index) -> tensor<4xi16>

  ** Erase   : 'tensor.insert'(0x5623a75dced0)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75dccb0) {
  %81 = "arith.addi"(%75, %78) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  ** Erase   : 'arith.addi'(0x5623a75dccb0)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75dcbd0) {
  %80 = "arith.addi"(%73, %77) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  ** Erase   : 'arith.addi'(0x5623a75dcbd0)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75dcaf0) {
  %79 = "arith.addi"(%71, %76) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  ** Erase   : 'arith.addi'(0x5623a75dcaf0)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.shrui'(0x5623a75dca10) {
  %78 = "arith.shrui"(%66, %6) : (i16, i16) -> i16

  ** Erase   : 'arith.shrui'(0x5623a75dca10)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.shrui'(0x5623a75dc930) {
  %77 = "arith.shrui"(%65, %6) : (i16, i16) -> i16

  ** Erase   : 'arith.shrui'(0x5623a75dc930)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.shrui'(0x5623a75dc150) {
  %76 = "arith.shrui"(%64, %6) : (i16, i16) -> i16

  ** Erase   : 'arith.shrui'(0x5623a75dc150)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75dc090) {
  %75 = "arith.extui"(%74) : (i8) -> i16

  ** Erase   : 'arith.extui'(0x5623a75dc090)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75dbfd0) {
  %74 = "arith.trunci"(%67) : (i16) -> i8

  ** Erase   : 'arith.trunci'(0x5623a75dbfd0)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75dbf10) {
  %73 = "arith.extui"(%72) : (i8) -> i16

  ** Erase   : 'arith.extui'(0x5623a75dbf10)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75dbe50) {
  %72 = "arith.trunci"(%66) : (i16) -> i8

  ** Erase   : 'arith.trunci'(0x5623a75dbe50)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75dbd90) {
  %71 = "arith.extui"(%70) : (i8) -> i16

  ** Erase   : 'arith.extui'(0x5623a75dbd90)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75dbcd0) {
  %70 = "arith.trunci"(%65) : (i16) -> i8

  ** Erase   : 'arith.trunci'(0x5623a75dbcd0)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75dbc10) {
  %69 = "arith.extui"(%68) : (i8) -> i16

  ** Erase   : 'arith.extui'(0x5623a75dbc10)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75dbb50) {
  %68 = "arith.trunci"(%64) : (i16) -> i8

  ** Erase   : 'arith.trunci'(0x5623a75dbb50)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75dba70) {
  %67 = "arith.addi"(%59, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  ** Erase   : 'arith.addi'(0x5623a75dba70)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75db990) {
  %66 = "arith.addi"(%58, %62) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  ** Erase   : 'arith.addi'(0x5623a75db990)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75db8b0) {
  %65 = "arith.addi"(%57, %61) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  ** Erase   : 'arith.addi'(0x5623a75db8b0)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75db7d0) {
  %64 = "arith.addi"(%56, %60) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  ** Erase   : 'arith.addi'(0x5623a75db7d0)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75db650) {
  %63 = "tensor.extract"(%5, %1) : (tensor<4xi16>, index) -> i16

  ** Erase   : 'tensor.extract'(0x5623a75db650)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75db4d0) {
  %62 = "tensor.extract"(%5, %2) : (tensor<4xi16>, index) -> i16

  ** Erase   : 'tensor.extract'(0x5623a75db4d0)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75db350) {
  %61 = "tensor.extract"(%5, %3) : (tensor<4xi16>, index) -> i16

  ** Erase   : 'tensor.extract'(0x5623a75db350)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75db1d0) {
  %60 = "tensor.extract"(%5, %7) : (tensor<4xi16>, index) -> i16

  ** Erase   : 'tensor.extract'(0x5623a75db1d0)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75de8e0) {
  %59 = "tensor.extract"(%arg0, %1) : (tensor<4xi16>, index) -> i16

  ** Erase   : 'tensor.extract'(0x5623a75de8e0)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75de760) {
  %58 = "tensor.extract"(%arg0, %2) : (tensor<4xi16>, index) -> i16

  ** Erase   : 'tensor.extract'(0x5623a75de760)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75de5e0) {
  %57 = "tensor.extract"(%arg0, %3) : (tensor<4xi16>, index) -> i16

  ** Erase   : 'tensor.extract'(0x5623a75de5e0)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75de490) {
  %56 = "tensor.extract"(%arg0, %7) : (tensor<4xi16>, index) -> i16

  ** Erase   : 'tensor.extract'(0x5623a75de490)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.insert'(0x5623a75db030) {
  %55 = "tensor.insert"(%51, %54, %1) : (i16, tensor<4xi16>, index) -> tensor<4xi16>


  * Pattern mlir::heir::ConvertInsertOp : 'tensor.insert -> ()' {
Trying to match "mlir::heir::ConvertInsertOp"
    ** Insert  : 'builtin.unrealized_conversion_cast'(0x5623a75d5860)
    ** Insert  : 'builtin.unrealized_conversion_cast'(0x5623a7569e00)
    ** Replace : 'tensor.insert'(0x5623a75db030)
    ** Modified: 'builtin.unrealized_conversion_cast'(0x5623a75d2680)
    ** Erase   : 'tensor.insert'(0x5623a75db030)
"mlir::heir::ConvertInsertOp" result 1
  } -> success : pattern applied successfully
// *** IR Dump After Pattern Application ***
'func.return' op has 4 operands, but enclosing function (@test_simple_split) returns 1
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "arith.constant"() <{value = dense<0> : tensor<4xi16>}> : () -> tensor<4xi16>
  %1 = "arith.constant"() <{value = 3 : index}> : () -> index
  %2 = "arith.constant"() <{value = 2 : index}> : () -> index
  %3 = "arith.constant"() <{value = 1 : index}> : () -> index
  %4 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %6 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %7 = "arith.constant"() <{value = 0 : index}> : () -> index
  %8 = "tensor.extract"(%arg1, %7) : (tensor<4xi16>, index) -> i16
  %9 = "tensor.extract"(%arg1, %3) : (tensor<4xi16>, index) -> i16
  %10 = "tensor.extract"(%arg1, %2) : (tensor<4xi16>, index) -> i16
  %11 = "tensor.extract"(%arg1, %1) : (tensor<4xi16>, index) -> i16
  %12 = "tensor.extract"(%4, %7) : (tensor<4xi16>, index) -> i16
  %13 = "tensor.extract"(%4, %3) : (tensor<4xi16>, index) -> i16
  %14 = "tensor.extract"(%4, %2) : (tensor<4xi16>, index) -> i16
  %15 = "tensor.extract"(%4, %1) : (tensor<4xi16>, index) -> i16
  %16 = "arith.muli"(%8, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %17 = "arith.muli"(%9, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %18 = "arith.addi"(%8, %9) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %19 = "arith.addi"(%12, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %20 = "arith.muli"(%18, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %21 = "arith.subi"(%20, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %22 = "arith.subi"(%21, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %23 = "arith.muli"(%8, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %24 = "arith.muli"(%9, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %25 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %26 = "arith.muli"(%18, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %27 = "arith.subi"(%26, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.subi"(%27, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.muli"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.muli"(%11, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.addi"(%10, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.muli"(%31, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.subi"(%33, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.addi"(%23, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.addi"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.addi"(%28, %34) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.trunci"(%16) : (i16) -> i8
  %39 = "arith.extui"(%38) : (i8) -> i16
  %40 = "arith.shrui"(%16, %6) : (i16, i16) -> i16
  %41 = "arith.trunci"(%22) : (i16) -> i8
  %42 = "arith.extui"(%41) : (i8) -> i16
  %43 = "arith.shrui"(%22, %6) : (i16, i16) -> i16
  %44 = "arith.trunci"(%36) : (i16) -> i8
  %45 = "arith.extui"(%44) : (i8) -> i16
  %46 = "arith.shrui"(%36, %6) : (i16, i16) -> i16
  %47 = "arith.trunci"(%37) : (i16) -> i8
  %48 = "arith.extui"(%47) : (i8) -> i16
  %49 = "arith.addi"(%42, %40) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%45, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.addi"(%48, %46) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "tensor.insert"(%39, %0, %7) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %53 = "tensor.insert"(%49, %52, %3) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %54 = "tensor.insert"(%50, %53, %2) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %55:4 = "builtin.unrealized_conversion_cast"(%54) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)
  %56 = "builtin.unrealized_conversion_cast"(%55#0, %55#1, %55#2, %51) {"__one-to-n-type-conversion_cast-kind__" = "source"} : (i16, i16, i16, i16) -> tensor<4xi16>
  %57:4 = "builtin.unrealized_conversion_cast"(%56) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)
  "func.return"(%57#0, %57#1, %57#2, %57#3) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> success : pattern matched
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'builtin.unrealized_conversion_cast'(0x5623a75d2680) {
  %57:4 = "builtin.unrealized_conversion_cast"(%56) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)

} -> success : operation was folded
//===-------------------------------------------===//
** Replace : 'builtin.unrealized_conversion_cast'(0x5623a75d2680)
** Modified: 'func.return'(0x5623a75cef10)
** Modified: 'func.return'(0x5623a75cef10)
** Modified: 'func.return'(0x5623a75cef10)
** Modified: 'func.return'(0x5623a75cef10)
** Erase   : 'builtin.unrealized_conversion_cast'(0x5623a75d2680)
// *** IR Dump After Successful Folding ***
'func.return' op has 4 operands, but enclosing function (@test_simple_split) returns 1
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "arith.constant"() <{value = dense<0> : tensor<4xi16>}> : () -> tensor<4xi16>
  %1 = "arith.constant"() <{value = 3 : index}> : () -> index
  %2 = "arith.constant"() <{value = 2 : index}> : () -> index
  %3 = "arith.constant"() <{value = 1 : index}> : () -> index
  %4 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %6 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %7 = "arith.constant"() <{value = 0 : index}> : () -> index
  %8 = "tensor.extract"(%arg1, %7) : (tensor<4xi16>, index) -> i16
  %9 = "tensor.extract"(%arg1, %3) : (tensor<4xi16>, index) -> i16
  %10 = "tensor.extract"(%arg1, %2) : (tensor<4xi16>, index) -> i16
  %11 = "tensor.extract"(%arg1, %1) : (tensor<4xi16>, index) -> i16
  %12 = "tensor.extract"(%4, %7) : (tensor<4xi16>, index) -> i16
  %13 = "tensor.extract"(%4, %3) : (tensor<4xi16>, index) -> i16
  %14 = "tensor.extract"(%4, %2) : (tensor<4xi16>, index) -> i16
  %15 = "tensor.extract"(%4, %1) : (tensor<4xi16>, index) -> i16
  %16 = "arith.muli"(%8, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %17 = "arith.muli"(%9, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %18 = "arith.addi"(%8, %9) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %19 = "arith.addi"(%12, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %20 = "arith.muli"(%18, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %21 = "arith.subi"(%20, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %22 = "arith.subi"(%21, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %23 = "arith.muli"(%8, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %24 = "arith.muli"(%9, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %25 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %26 = "arith.muli"(%18, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %27 = "arith.subi"(%26, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.subi"(%27, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.muli"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.muli"(%11, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.addi"(%10, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.muli"(%31, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.subi"(%33, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.addi"(%23, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.addi"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.addi"(%28, %34) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.trunci"(%16) : (i16) -> i8
  %39 = "arith.extui"(%38) : (i8) -> i16
  %40 = "arith.shrui"(%16, %6) : (i16, i16) -> i16
  %41 = "arith.trunci"(%22) : (i16) -> i8
  %42 = "arith.extui"(%41) : (i8) -> i16
  %43 = "arith.shrui"(%22, %6) : (i16, i16) -> i16
  %44 = "arith.trunci"(%36) : (i16) -> i8
  %45 = "arith.extui"(%44) : (i8) -> i16
  %46 = "arith.shrui"(%36, %6) : (i16, i16) -> i16
  %47 = "arith.trunci"(%37) : (i16) -> i8
  %48 = "arith.extui"(%47) : (i8) -> i16
  %49 = "arith.addi"(%42, %40) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%45, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.addi"(%48, %46) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "tensor.insert"(%39, %0, %7) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %53 = "tensor.insert"(%49, %52, %3) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %54 = "tensor.insert"(%50, %53, %2) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %55:4 = "builtin.unrealized_conversion_cast"(%54) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)
  %56 = "builtin.unrealized_conversion_cast"(%55#0, %55#1, %55#2, %51) {"__one-to-n-type-conversion_cast-kind__" = "source"} : (i16, i16, i16, i16) -> tensor<4xi16>
  "func.return"(%55#0, %55#1, %55#2, %51) : (i16, i16, i16, i16) -> ()
}) : () -> ()



//===-------------------------------------------===//
Processing operation : 'func.return'(0x5623a75cef10) {
  "func.return"(%55#0, %55#1, %55#2, %51) : (i16, i16, i16, i16) -> ()


  * Pattern (anonymous namespace)::ConvertTypesInFuncReturnOp : 'func.return -> ()' {
Trying to match "(anonymous namespace)::ConvertTypesInFuncReturnOp"
"(anonymous namespace)::ConvertTypesInFuncReturnOp" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'builtin.unrealized_conversion_cast'(0x5623a7569e00) {
  %56 = "builtin.unrealized_conversion_cast"(%55#0, %55#1, %55#2, %51) {"__one-to-n-type-conversion_cast-kind__" = "source"} : (i16, i16, i16, i16) -> tensor<4xi16>

  ** Erase   : 'builtin.unrealized_conversion_cast'(0x5623a7569e00)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'builtin.unrealized_conversion_cast'(0x5623a75d5860) {
  %55:4 = "builtin.unrealized_conversion_cast"(%54) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.insert'(0x5623a75dae90) {
  %54 = "tensor.insert"(%50, %53, %2) : (i16, tensor<4xi16>, index) -> tensor<4xi16>


  * Pattern mlir::heir::ConvertInsertOp : 'tensor.insert -> ()' {
Trying to match "mlir::heir::ConvertInsertOp"
    ** Insert  : 'builtin.unrealized_conversion_cast'(0x5623a75d2680)
    ** Insert  : 'builtin.unrealized_conversion_cast'(0x5623a7569e00)
    ** Replace : 'tensor.insert'(0x5623a75dae90)
    ** Modified: 'builtin.unrealized_conversion_cast'(0x5623a75d5860)
    ** Erase   : 'tensor.insert'(0x5623a75dae90)
"mlir::heir::ConvertInsertOp" result 1
  } -> success : pattern applied successfully
// *** IR Dump After Pattern Application ***
'func.return' op has 4 operands, but enclosing function (@test_simple_split) returns 1
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "arith.constant"() <{value = dense<0> : tensor<4xi16>}> : () -> tensor<4xi16>
  %1 = "arith.constant"() <{value = 3 : index}> : () -> index
  %2 = "arith.constant"() <{value = 2 : index}> : () -> index
  %3 = "arith.constant"() <{value = 1 : index}> : () -> index
  %4 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %6 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %7 = "arith.constant"() <{value = 0 : index}> : () -> index
  %8 = "tensor.extract"(%arg1, %7) : (tensor<4xi16>, index) -> i16
  %9 = "tensor.extract"(%arg1, %3) : (tensor<4xi16>, index) -> i16
  %10 = "tensor.extract"(%arg1, %2) : (tensor<4xi16>, index) -> i16
  %11 = "tensor.extract"(%arg1, %1) : (tensor<4xi16>, index) -> i16
  %12 = "tensor.extract"(%4, %7) : (tensor<4xi16>, index) -> i16
  %13 = "tensor.extract"(%4, %3) : (tensor<4xi16>, index) -> i16
  %14 = "tensor.extract"(%4, %2) : (tensor<4xi16>, index) -> i16
  %15 = "tensor.extract"(%4, %1) : (tensor<4xi16>, index) -> i16
  %16 = "arith.muli"(%8, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %17 = "arith.muli"(%9, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %18 = "arith.addi"(%8, %9) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %19 = "arith.addi"(%12, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %20 = "arith.muli"(%18, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %21 = "arith.subi"(%20, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %22 = "arith.subi"(%21, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %23 = "arith.muli"(%8, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %24 = "arith.muli"(%9, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %25 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %26 = "arith.muli"(%18, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %27 = "arith.subi"(%26, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.subi"(%27, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.muli"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.muli"(%11, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.addi"(%10, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.muli"(%31, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.subi"(%33, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.addi"(%23, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.addi"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.addi"(%28, %34) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.trunci"(%16) : (i16) -> i8
  %39 = "arith.extui"(%38) : (i8) -> i16
  %40 = "arith.shrui"(%16, %6) : (i16, i16) -> i16
  %41 = "arith.trunci"(%22) : (i16) -> i8
  %42 = "arith.extui"(%41) : (i8) -> i16
  %43 = "arith.shrui"(%22, %6) : (i16, i16) -> i16
  %44 = "arith.trunci"(%36) : (i16) -> i8
  %45 = "arith.extui"(%44) : (i8) -> i16
  %46 = "arith.shrui"(%36, %6) : (i16, i16) -> i16
  %47 = "arith.trunci"(%37) : (i16) -> i8
  %48 = "arith.extui"(%47) : (i8) -> i16
  %49 = "arith.addi"(%42, %40) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%45, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.addi"(%48, %46) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "tensor.insert"(%39, %0, %7) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %53 = "tensor.insert"(%49, %52, %3) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %54:4 = "builtin.unrealized_conversion_cast"(%53) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)
  %55 = "builtin.unrealized_conversion_cast"(%54#0, %54#1, %50, %54#3) {"__one-to-n-type-conversion_cast-kind__" = "source"} : (i16, i16, i16, i16) -> tensor<4xi16>
  %56:4 = "builtin.unrealized_conversion_cast"(%55) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)
  "func.return"(%56#0, %56#1, %56#2, %51) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> success : pattern matched
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'builtin.unrealized_conversion_cast'(0x5623a75d5860) {
  %56:4 = "builtin.unrealized_conversion_cast"(%55) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)

} -> success : operation was folded
//===-------------------------------------------===//
** Replace : 'builtin.unrealized_conversion_cast'(0x5623a75d5860)
** Modified: 'func.return'(0x5623a75cef10)
** Modified: 'func.return'(0x5623a75cef10)
** Modified: 'func.return'(0x5623a75cef10)
** Erase   : 'builtin.unrealized_conversion_cast'(0x5623a75d5860)
// *** IR Dump After Successful Folding ***
'func.return' op has 4 operands, but enclosing function (@test_simple_split) returns 1
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "arith.constant"() <{value = dense<0> : tensor<4xi16>}> : () -> tensor<4xi16>
  %1 = "arith.constant"() <{value = 3 : index}> : () -> index
  %2 = "arith.constant"() <{value = 2 : index}> : () -> index
  %3 = "arith.constant"() <{value = 1 : index}> : () -> index
  %4 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %6 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %7 = "arith.constant"() <{value = 0 : index}> : () -> index
  %8 = "tensor.extract"(%arg1, %7) : (tensor<4xi16>, index) -> i16
  %9 = "tensor.extract"(%arg1, %3) : (tensor<4xi16>, index) -> i16
  %10 = "tensor.extract"(%arg1, %2) : (tensor<4xi16>, index) -> i16
  %11 = "tensor.extract"(%arg1, %1) : (tensor<4xi16>, index) -> i16
  %12 = "tensor.extract"(%4, %7) : (tensor<4xi16>, index) -> i16
  %13 = "tensor.extract"(%4, %3) : (tensor<4xi16>, index) -> i16
  %14 = "tensor.extract"(%4, %2) : (tensor<4xi16>, index) -> i16
  %15 = "tensor.extract"(%4, %1) : (tensor<4xi16>, index) -> i16
  %16 = "arith.muli"(%8, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %17 = "arith.muli"(%9, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %18 = "arith.addi"(%8, %9) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %19 = "arith.addi"(%12, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %20 = "arith.muli"(%18, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %21 = "arith.subi"(%20, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %22 = "arith.subi"(%21, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %23 = "arith.muli"(%8, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %24 = "arith.muli"(%9, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %25 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %26 = "arith.muli"(%18, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %27 = "arith.subi"(%26, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.subi"(%27, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.muli"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.muli"(%11, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.addi"(%10, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.muli"(%31, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.subi"(%33, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.addi"(%23, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.addi"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.addi"(%28, %34) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.trunci"(%16) : (i16) -> i8
  %39 = "arith.extui"(%38) : (i8) -> i16
  %40 = "arith.shrui"(%16, %6) : (i16, i16) -> i16
  %41 = "arith.trunci"(%22) : (i16) -> i8
  %42 = "arith.extui"(%41) : (i8) -> i16
  %43 = "arith.shrui"(%22, %6) : (i16, i16) -> i16
  %44 = "arith.trunci"(%36) : (i16) -> i8
  %45 = "arith.extui"(%44) : (i8) -> i16
  %46 = "arith.shrui"(%36, %6) : (i16, i16) -> i16
  %47 = "arith.trunci"(%37) : (i16) -> i8
  %48 = "arith.extui"(%47) : (i8) -> i16
  %49 = "arith.addi"(%42, %40) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%45, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.addi"(%48, %46) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "tensor.insert"(%39, %0, %7) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %53 = "tensor.insert"(%49, %52, %3) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %54:4 = "builtin.unrealized_conversion_cast"(%53) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)
  %55 = "builtin.unrealized_conversion_cast"(%54#0, %54#1, %50, %54#3) {"__one-to-n-type-conversion_cast-kind__" = "source"} : (i16, i16, i16, i16) -> tensor<4xi16>
  "func.return"(%54#0, %54#1, %50, %51) : (i16, i16, i16, i16) -> ()
}) : () -> ()



//===-------------------------------------------===//
Processing operation : 'func.return'(0x5623a75cef10) {
  "func.return"(%54#0, %54#1, %50, %51) : (i16, i16, i16, i16) -> ()


  * Pattern (anonymous namespace)::ConvertTypesInFuncReturnOp : 'func.return -> ()' {
Trying to match "(anonymous namespace)::ConvertTypesInFuncReturnOp"
"(anonymous namespace)::ConvertTypesInFuncReturnOp" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'builtin.unrealized_conversion_cast'(0x5623a7569e00) {
  %55 = "builtin.unrealized_conversion_cast"(%54#0, %54#1, %50, %54#3) {"__one-to-n-type-conversion_cast-kind__" = "source"} : (i16, i16, i16, i16) -> tensor<4xi16>

  ** Erase   : 'builtin.unrealized_conversion_cast'(0x5623a7569e00)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'builtin.unrealized_conversion_cast'(0x5623a75d2680) {
  %54:4 = "builtin.unrealized_conversion_cast"(%53) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.insert'(0x5623a75dacf0) {
  %53 = "tensor.insert"(%49, %52, %3) : (i16, tensor<4xi16>, index) -> tensor<4xi16>


  * Pattern mlir::heir::ConvertInsertOp : 'tensor.insert -> ()' {
Trying to match "mlir::heir::ConvertInsertOp"
    ** Insert  : 'builtin.unrealized_conversion_cast'(0x5623a75d5860)
    ** Insert  : 'builtin.unrealized_conversion_cast'(0x5623a7569e00)
    ** Replace : 'tensor.insert'(0x5623a75dacf0)
    ** Modified: 'builtin.unrealized_conversion_cast'(0x5623a75d2680)
    ** Erase   : 'tensor.insert'(0x5623a75dacf0)
"mlir::heir::ConvertInsertOp" result 1
  } -> success : pattern applied successfully
// *** IR Dump After Pattern Application ***
'func.return' op has 4 operands, but enclosing function (@test_simple_split) returns 1
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "arith.constant"() <{value = dense<0> : tensor<4xi16>}> : () -> tensor<4xi16>
  %1 = "arith.constant"() <{value = 3 : index}> : () -> index
  %2 = "arith.constant"() <{value = 2 : index}> : () -> index
  %3 = "arith.constant"() <{value = 1 : index}> : () -> index
  %4 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %6 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %7 = "arith.constant"() <{value = 0 : index}> : () -> index
  %8 = "tensor.extract"(%arg1, %7) : (tensor<4xi16>, index) -> i16
  %9 = "tensor.extract"(%arg1, %3) : (tensor<4xi16>, index) -> i16
  %10 = "tensor.extract"(%arg1, %2) : (tensor<4xi16>, index) -> i16
  %11 = "tensor.extract"(%arg1, %1) : (tensor<4xi16>, index) -> i16
  %12 = "tensor.extract"(%4, %7) : (tensor<4xi16>, index) -> i16
  %13 = "tensor.extract"(%4, %3) : (tensor<4xi16>, index) -> i16
  %14 = "tensor.extract"(%4, %2) : (tensor<4xi16>, index) -> i16
  %15 = "tensor.extract"(%4, %1) : (tensor<4xi16>, index) -> i16
  %16 = "arith.muli"(%8, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %17 = "arith.muli"(%9, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %18 = "arith.addi"(%8, %9) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %19 = "arith.addi"(%12, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %20 = "arith.muli"(%18, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %21 = "arith.subi"(%20, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %22 = "arith.subi"(%21, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %23 = "arith.muli"(%8, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %24 = "arith.muli"(%9, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %25 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %26 = "arith.muli"(%18, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %27 = "arith.subi"(%26, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.subi"(%27, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.muli"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.muli"(%11, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.addi"(%10, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.muli"(%31, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.subi"(%33, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.addi"(%23, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.addi"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.addi"(%28, %34) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.trunci"(%16) : (i16) -> i8
  %39 = "arith.extui"(%38) : (i8) -> i16
  %40 = "arith.shrui"(%16, %6) : (i16, i16) -> i16
  %41 = "arith.trunci"(%22) : (i16) -> i8
  %42 = "arith.extui"(%41) : (i8) -> i16
  %43 = "arith.shrui"(%22, %6) : (i16, i16) -> i16
  %44 = "arith.trunci"(%36) : (i16) -> i8
  %45 = "arith.extui"(%44) : (i8) -> i16
  %46 = "arith.shrui"(%36, %6) : (i16, i16) -> i16
  %47 = "arith.trunci"(%37) : (i16) -> i8
  %48 = "arith.extui"(%47) : (i8) -> i16
  %49 = "arith.addi"(%42, %40) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%45, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.addi"(%48, %46) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "tensor.insert"(%39, %0, %7) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %53:4 = "builtin.unrealized_conversion_cast"(%52) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)
  %54 = "builtin.unrealized_conversion_cast"(%53#0, %49, %53#2, %53#3) {"__one-to-n-type-conversion_cast-kind__" = "source"} : (i16, i16, i16, i16) -> tensor<4xi16>
  %55:4 = "builtin.unrealized_conversion_cast"(%54) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)
  "func.return"(%55#0, %55#1, %50, %51) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> success : pattern matched
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'builtin.unrealized_conversion_cast'(0x5623a75d2680) {
  %55:4 = "builtin.unrealized_conversion_cast"(%54) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)

} -> success : operation was folded
//===-------------------------------------------===//
** Replace : 'builtin.unrealized_conversion_cast'(0x5623a75d2680)
** Modified: 'func.return'(0x5623a75cef10)
** Modified: 'func.return'(0x5623a75cef10)
** Erase   : 'builtin.unrealized_conversion_cast'(0x5623a75d2680)
// *** IR Dump After Successful Folding ***
'func.return' op has 4 operands, but enclosing function (@test_simple_split) returns 1
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "arith.constant"() <{value = dense<0> : tensor<4xi16>}> : () -> tensor<4xi16>
  %1 = "arith.constant"() <{value = 3 : index}> : () -> index
  %2 = "arith.constant"() <{value = 2 : index}> : () -> index
  %3 = "arith.constant"() <{value = 1 : index}> : () -> index
  %4 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %6 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %7 = "arith.constant"() <{value = 0 : index}> : () -> index
  %8 = "tensor.extract"(%arg1, %7) : (tensor<4xi16>, index) -> i16
  %9 = "tensor.extract"(%arg1, %3) : (tensor<4xi16>, index) -> i16
  %10 = "tensor.extract"(%arg1, %2) : (tensor<4xi16>, index) -> i16
  %11 = "tensor.extract"(%arg1, %1) : (tensor<4xi16>, index) -> i16
  %12 = "tensor.extract"(%4, %7) : (tensor<4xi16>, index) -> i16
  %13 = "tensor.extract"(%4, %3) : (tensor<4xi16>, index) -> i16
  %14 = "tensor.extract"(%4, %2) : (tensor<4xi16>, index) -> i16
  %15 = "tensor.extract"(%4, %1) : (tensor<4xi16>, index) -> i16
  %16 = "arith.muli"(%8, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %17 = "arith.muli"(%9, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %18 = "arith.addi"(%8, %9) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %19 = "arith.addi"(%12, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %20 = "arith.muli"(%18, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %21 = "arith.subi"(%20, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %22 = "arith.subi"(%21, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %23 = "arith.muli"(%8, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %24 = "arith.muli"(%9, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %25 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %26 = "arith.muli"(%18, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %27 = "arith.subi"(%26, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.subi"(%27, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.muli"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.muli"(%11, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.addi"(%10, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.muli"(%31, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.subi"(%33, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.addi"(%23, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.addi"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.addi"(%28, %34) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.trunci"(%16) : (i16) -> i8
  %39 = "arith.extui"(%38) : (i8) -> i16
  %40 = "arith.shrui"(%16, %6) : (i16, i16) -> i16
  %41 = "arith.trunci"(%22) : (i16) -> i8
  %42 = "arith.extui"(%41) : (i8) -> i16
  %43 = "arith.shrui"(%22, %6) : (i16, i16) -> i16
  %44 = "arith.trunci"(%36) : (i16) -> i8
  %45 = "arith.extui"(%44) : (i8) -> i16
  %46 = "arith.shrui"(%36, %6) : (i16, i16) -> i16
  %47 = "arith.trunci"(%37) : (i16) -> i8
  %48 = "arith.extui"(%47) : (i8) -> i16
  %49 = "arith.addi"(%42, %40) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%45, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.addi"(%48, %46) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "tensor.insert"(%39, %0, %7) : (i16, tensor<4xi16>, index) -> tensor<4xi16>
  %53:4 = "builtin.unrealized_conversion_cast"(%52) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)
  %54 = "builtin.unrealized_conversion_cast"(%53#0, %49, %53#2, %53#3) {"__one-to-n-type-conversion_cast-kind__" = "source"} : (i16, i16, i16, i16) -> tensor<4xi16>
  "func.return"(%53#0, %49, %50, %51) : (i16, i16, i16, i16) -> ()
}) : () -> ()



//===-------------------------------------------===//
Processing operation : 'func.return'(0x5623a75cef10) {
  "func.return"(%53#0, %49, %50, %51) : (i16, i16, i16, i16) -> ()


  * Pattern (anonymous namespace)::ConvertTypesInFuncReturnOp : 'func.return -> ()' {
Trying to match "(anonymous namespace)::ConvertTypesInFuncReturnOp"
"(anonymous namespace)::ConvertTypesInFuncReturnOp" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'builtin.unrealized_conversion_cast'(0x5623a7569e00) {
  %54 = "builtin.unrealized_conversion_cast"(%53#0, %49, %53#2, %53#3) {"__one-to-n-type-conversion_cast-kind__" = "source"} : (i16, i16, i16, i16) -> tensor<4xi16>

  ** Erase   : 'builtin.unrealized_conversion_cast'(0x5623a7569e00)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'builtin.unrealized_conversion_cast'(0x5623a75d5860) {
  %53:4 = "builtin.unrealized_conversion_cast"(%52) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.insert'(0x5623a75dab50) {
  %52 = "tensor.insert"(%39, %0, %7) : (i16, tensor<4xi16>, index) -> tensor<4xi16>


  * Pattern mlir::heir::ConvertInsertOp : 'tensor.insert -> ()' {
Trying to match "mlir::heir::ConvertInsertOp"
    ** Insert  : 'builtin.unrealized_conversion_cast'(0x5623a75d2680)
    ** Insert  : 'builtin.unrealized_conversion_cast'(0x5623a7569e00)
    ** Replace : 'tensor.insert'(0x5623a75dab50)
    ** Modified: 'builtin.unrealized_conversion_cast'(0x5623a75d5860)
    ** Erase   : 'tensor.insert'(0x5623a75dab50)
"mlir::heir::ConvertInsertOp" result 1
  } -> success : pattern applied successfully
// *** IR Dump After Pattern Application ***
'func.return' op has 4 operands, but enclosing function (@test_simple_split) returns 1
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "arith.constant"() <{value = dense<0> : tensor<4xi16>}> : () -> tensor<4xi16>
  %1 = "arith.constant"() <{value = 3 : index}> : () -> index
  %2 = "arith.constant"() <{value = 2 : index}> : () -> index
  %3 = "arith.constant"() <{value = 1 : index}> : () -> index
  %4 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %6 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %7 = "arith.constant"() <{value = 0 : index}> : () -> index
  %8 = "tensor.extract"(%arg1, %7) : (tensor<4xi16>, index) -> i16
  %9 = "tensor.extract"(%arg1, %3) : (tensor<4xi16>, index) -> i16
  %10 = "tensor.extract"(%arg1, %2) : (tensor<4xi16>, index) -> i16
  %11 = "tensor.extract"(%arg1, %1) : (tensor<4xi16>, index) -> i16
  %12 = "tensor.extract"(%4, %7) : (tensor<4xi16>, index) -> i16
  %13 = "tensor.extract"(%4, %3) : (tensor<4xi16>, index) -> i16
  %14 = "tensor.extract"(%4, %2) : (tensor<4xi16>, index) -> i16
  %15 = "tensor.extract"(%4, %1) : (tensor<4xi16>, index) -> i16
  %16 = "arith.muli"(%8, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %17 = "arith.muli"(%9, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %18 = "arith.addi"(%8, %9) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %19 = "arith.addi"(%12, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %20 = "arith.muli"(%18, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %21 = "arith.subi"(%20, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %22 = "arith.subi"(%21, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %23 = "arith.muli"(%8, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %24 = "arith.muli"(%9, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %25 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %26 = "arith.muli"(%18, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %27 = "arith.subi"(%26, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.subi"(%27, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.muli"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.muli"(%11, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.addi"(%10, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.muli"(%31, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.subi"(%33, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.addi"(%23, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.addi"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.addi"(%28, %34) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.trunci"(%16) : (i16) -> i8
  %39 = "arith.extui"(%38) : (i8) -> i16
  %40 = "arith.shrui"(%16, %6) : (i16, i16) -> i16
  %41 = "arith.trunci"(%22) : (i16) -> i8
  %42 = "arith.extui"(%41) : (i8) -> i16
  %43 = "arith.shrui"(%22, %6) : (i16, i16) -> i16
  %44 = "arith.trunci"(%36) : (i16) -> i8
  %45 = "arith.extui"(%44) : (i8) -> i16
  %46 = "arith.shrui"(%36, %6) : (i16, i16) -> i16
  %47 = "arith.trunci"(%37) : (i16) -> i8
  %48 = "arith.extui"(%47) : (i8) -> i16
  %49 = "arith.addi"(%42, %40) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%45, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.addi"(%48, %46) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52:4 = "builtin.unrealized_conversion_cast"(%0) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)
  %53 = "builtin.unrealized_conversion_cast"(%39, %52#1, %52#2, %52#3) {"__one-to-n-type-conversion_cast-kind__" = "source"} : (i16, i16, i16, i16) -> tensor<4xi16>
  %54:4 = "builtin.unrealized_conversion_cast"(%53) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)
  "func.return"(%54#0, %49, %50, %51) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> success : pattern matched
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'builtin.unrealized_conversion_cast'(0x5623a75d5860) {
  %54:4 = "builtin.unrealized_conversion_cast"(%53) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)

} -> success : operation was folded
//===-------------------------------------------===//
** Replace : 'builtin.unrealized_conversion_cast'(0x5623a75d5860)
** Modified: 'func.return'(0x5623a75cef10)
** Erase   : 'builtin.unrealized_conversion_cast'(0x5623a75d5860)
// *** IR Dump After Successful Folding ***
'func.return' op has 4 operands, but enclosing function (@test_simple_split) returns 1
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "arith.constant"() <{value = dense<0> : tensor<4xi16>}> : () -> tensor<4xi16>
  %1 = "arith.constant"() <{value = 3 : index}> : () -> index
  %2 = "arith.constant"() <{value = 2 : index}> : () -> index
  %3 = "arith.constant"() <{value = 1 : index}> : () -> index
  %4 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %6 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %7 = "arith.constant"() <{value = 0 : index}> : () -> index
  %8 = "tensor.extract"(%arg1, %7) : (tensor<4xi16>, index) -> i16
  %9 = "tensor.extract"(%arg1, %3) : (tensor<4xi16>, index) -> i16
  %10 = "tensor.extract"(%arg1, %2) : (tensor<4xi16>, index) -> i16
  %11 = "tensor.extract"(%arg1, %1) : (tensor<4xi16>, index) -> i16
  %12 = "tensor.extract"(%4, %7) : (tensor<4xi16>, index) -> i16
  %13 = "tensor.extract"(%4, %3) : (tensor<4xi16>, index) -> i16
  %14 = "tensor.extract"(%4, %2) : (tensor<4xi16>, index) -> i16
  %15 = "tensor.extract"(%4, %1) : (tensor<4xi16>, index) -> i16
  %16 = "arith.muli"(%8, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %17 = "arith.muli"(%9, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %18 = "arith.addi"(%8, %9) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %19 = "arith.addi"(%12, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %20 = "arith.muli"(%18, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %21 = "arith.subi"(%20, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %22 = "arith.subi"(%21, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %23 = "arith.muli"(%8, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %24 = "arith.muli"(%9, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %25 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %26 = "arith.muli"(%18, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %27 = "arith.subi"(%26, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.subi"(%27, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.muli"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.muli"(%11, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.addi"(%10, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.muli"(%31, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.subi"(%33, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.addi"(%23, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.addi"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.addi"(%28, %34) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.trunci"(%16) : (i16) -> i8
  %39 = "arith.extui"(%38) : (i8) -> i16
  %40 = "arith.shrui"(%16, %6) : (i16, i16) -> i16
  %41 = "arith.trunci"(%22) : (i16) -> i8
  %42 = "arith.extui"(%41) : (i8) -> i16
  %43 = "arith.shrui"(%22, %6) : (i16, i16) -> i16
  %44 = "arith.trunci"(%36) : (i16) -> i8
  %45 = "arith.extui"(%44) : (i8) -> i16
  %46 = "arith.shrui"(%36, %6) : (i16, i16) -> i16
  %47 = "arith.trunci"(%37) : (i16) -> i8
  %48 = "arith.extui"(%47) : (i8) -> i16
  %49 = "arith.addi"(%42, %40) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%45, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.addi"(%48, %46) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52:4 = "builtin.unrealized_conversion_cast"(%0) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)
  %53 = "builtin.unrealized_conversion_cast"(%39, %52#1, %52#2, %52#3) {"__one-to-n-type-conversion_cast-kind__" = "source"} : (i16, i16, i16, i16) -> tensor<4xi16>
  "func.return"(%39, %49, %50, %51) : (i16, i16, i16, i16) -> ()
}) : () -> ()



//===-------------------------------------------===//
Processing operation : 'func.return'(0x5623a75cef10) {
  "func.return"(%39, %49, %50, %51) : (i16, i16, i16, i16) -> ()


  * Pattern (anonymous namespace)::ConvertTypesInFuncReturnOp : 'func.return -> ()' {
Trying to match "(anonymous namespace)::ConvertTypesInFuncReturnOp"
"(anonymous namespace)::ConvertTypesInFuncReturnOp" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'builtin.unrealized_conversion_cast'(0x5623a7569e00) {
  %53 = "builtin.unrealized_conversion_cast"(%39, %52#1, %52#2, %52#3) {"__one-to-n-type-conversion_cast-kind__" = "source"} : (i16, i16, i16, i16) -> tensor<4xi16>

  ** Erase   : 'builtin.unrealized_conversion_cast'(0x5623a7569e00)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'builtin.unrealized_conversion_cast'(0x5623a75d2680) {
  %52:4 = "builtin.unrealized_conversion_cast"(%0) {"__one-to-n-type-conversion_cast-kind__" = "target"} : (tensor<4xi16>) -> (i16, i16, i16, i16)

  ** Erase   : 'builtin.unrealized_conversion_cast'(0x5623a75d2680)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75daa10) {
  %0 = "arith.constant"() <{value = dense<0> : tensor<4xi16>}> : () -> tensor<4xi16>

  ** Erase   : 'arith.constant'(0x5623a75daa10)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75da4c0) {
  %50 = "arith.addi"(%47, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75da3e0) {
  %49 = "arith.addi"(%44, %42) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75da300) {
  %48 = "arith.addi"(%41, %39) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75da240) {
  %47 = "arith.extui"(%46) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75da180) {
  %46 = "arith.trunci"(%36) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.shrui'(0x5623a75da0a0) {
  %45 = "arith.shrui"(%35, %5) : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75d9fe0) {
  %44 = "arith.extui"(%43) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75d9f20) {
  %43 = "arith.trunci"(%35) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.shrui'(0x5623a75d9e40) {
  %42 = "arith.shrui"(%21, %5) : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75d9d80) {
  %41 = "arith.extui"(%40) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75d9cc0) {
  %40 = "arith.trunci"(%21) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.shrui'(0x5623a75d9be0) {
  %39 = "arith.shrui"(%15, %5) : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75d9b20) {
  %38 = "arith.extui"(%37) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75d9a60) {
  %37 = "arith.trunci"(%15) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d9980) {
  %36 = "arith.addi"(%27, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d98a0) {
  %35 = "arith.addi"(%34, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d97c0) {
  %34 = "arith.addi"(%22, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d96e0) {
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d9600) {
  %32 = "arith.subi"(%31, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d9520) {
  %31 = "arith.muli"(%30, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d9360) {
  %30 = "arith.addi"(%9, %10) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d9280) {
  %29 = "arith.muli"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d91a0) {
  %28 = "arith.muli"(%9, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d90c0) {
  %27 = "arith.subi"(%26, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d8fe0) {
  %26 = "arith.subi"(%25, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8f00) {
  %25 = "arith.muli"(%17, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d8e50) {
  %24 = "arith.addi"(%13, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8cf0) {
  %23 = "arith.muli"(%8, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8c40) {
  %22 = "arith.muli"(%7, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d8b90) {
  %21 = "arith.subi"(%20, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d5780) {
  %20 = "arith.subi"(%19, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d56a0) {
  %19 = "arith.muli"(%17, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d55c0) {
  %18 = "arith.addi"(%11, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d54e0) {
  %17 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d5400) {
  %16 = "arith.muli"(%8, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8680) {
  %15 = "arith.muli"(%7, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75d8570) {
  %14 = "tensor.extract"(%3, %0) : (tensor<4xi16>, index) -> i16

ImplicitTypeIDRegistry::lookupOrInsert(mlir::Attribute)
ImplicitTypeIDRegistry::lookupOrInsert(unsigned char)
ImplicitTypeIDRegistry::lookupOrInsert(unsigned short)
ImplicitTypeIDRegistry::lookupOrInsert(unsigned int)
ImplicitTypeIDRegistry::lookupOrInsert(unsigned long)
ImplicitTypeIDRegistry::lookupOrInsert(signed char)
ImplicitTypeIDRegistry::lookupOrInsert(short)
ImplicitTypeIDRegistry::lookupOrInsert(int)
ImplicitTypeIDRegistry::lookupOrInsert(long)
ImplicitTypeIDRegistry::lookupOrInsert(std::complex<unsigned char>)
ImplicitTypeIDRegistry::lookupOrInsert(std::complex<unsigned short>)
ImplicitTypeIDRegistry::lookupOrInsert(std::complex<unsigned int>)
ImplicitTypeIDRegistry::lookupOrInsert(std::complex<unsigned long>)
ImplicitTypeIDRegistry::lookupOrInsert(std::complex<signed char>)
ImplicitTypeIDRegistry::lookupOrInsert(std::complex<short>)
ImplicitTypeIDRegistry::lookupOrInsert(std::complex<int>)
ImplicitTypeIDRegistry::lookupOrInsert(std::complex<long>)
ImplicitTypeIDRegistry::lookupOrInsert(float)
ImplicitTypeIDRegistry::lookupOrInsert(double)
ImplicitTypeIDRegistry::lookupOrInsert(std::complex<float>)
ImplicitTypeIDRegistry::lookupOrInsert(std::complex<double>)
} -> success : operation was folded
//===-------------------------------------------===//
** Insert  : 'arith.constant'(0x5623a75daa10)
** Replace : 'tensor.extract'(0x5623a75d8570)
** Modified: 'arith.addi'(0x5623a75d8e50)
** Modified: 'arith.muli'(0x5623a75d8cf0)
** Erase   : 'tensor.extract'(0x5623a75d8570)
// *** IR Dump After Successful Folding ***
'func.return' op has 4 operands, but enclosing function (@test_simple_split) returns 1
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "arith.constant"() <{value = 3 : index}> : () -> index
  %1 = "arith.constant"() <{value = 2 : index}> : () -> index
  %2 = "arith.constant"() <{value = 1 : index}> : () -> index
  %3 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %4 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %6 = "arith.constant"() <{value = 0 : index}> : () -> index
  %7 = "tensor.extract"(%arg1, %6) : (tensor<4xi16>, index) -> i16
  %8 = "tensor.extract"(%arg1, %2) : (tensor<4xi16>, index) -> i16
  %9 = "tensor.extract"(%arg1, %1) : (tensor<4xi16>, index) -> i16
  %10 = "tensor.extract"(%arg1, %0) : (tensor<4xi16>, index) -> i16
  %11 = "tensor.extract"(%3, %6) : (tensor<4xi16>, index) -> i16
  %12 = "tensor.extract"(%3, %2) : (tensor<4xi16>, index) -> i16
  %13 = "tensor.extract"(%3, %1) : (tensor<4xi16>, index) -> i16
  %14 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %15 = "arith.muli"(%7, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %16 = "arith.muli"(%8, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %17 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %18 = "arith.addi"(%11, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %19 = "arith.muli"(%17, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %20 = "arith.subi"(%19, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %21 = "arith.subi"(%20, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %22 = "arith.muli"(%7, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %23 = "arith.muli"(%8, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %24 = "arith.addi"(%13, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %25 = "arith.muli"(%17, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %26 = "arith.subi"(%25, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %27 = "arith.subi"(%26, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.muli"(%9, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.muli"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.addi"(%9, %10) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.muli"(%30, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.subi"(%31, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.addi"(%22, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.addi"(%34, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.addi"(%27, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.trunci"(%15) : (i16) -> i8
  %38 = "arith.extui"(%37) : (i8) -> i16
  %39 = "arith.shrui"(%15, %5) : (i16, i16) -> i16
  %40 = "arith.trunci"(%21) : (i16) -> i8
  %41 = "arith.extui"(%40) : (i8) -> i16
  %42 = "arith.shrui"(%21, %5) : (i16, i16) -> i16
  %43 = "arith.trunci"(%35) : (i16) -> i8
  %44 = "arith.extui"(%43) : (i8) -> i16
  %45 = "arith.shrui"(%35, %5) : (i16, i16) -> i16
  %46 = "arith.trunci"(%36) : (i16) -> i8
  %47 = "arith.extui"(%46) : (i8) -> i16
  %48 = "arith.addi"(%41, %39) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.addi"(%44, %42) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%47, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%38, %48, %49, %50) : (i16, i16, i16, i16) -> ()
}) : () -> ()



//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8cf0) {
  %23 = "arith.muli"(%8, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d8e50) {
  %24 = "arith.addi"(%13, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75daa10) {
  %14 = "arith.constant"() <{value = 31 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75d83f0) {
  %13 = "tensor.extract"(%3, %1) : (tensor<4xi16>, index) -> i16

} -> success : operation was folded
//===-------------------------------------------===//
** Insert  : 'arith.constant'(0x5623a75dce30)
** Replace : 'tensor.extract'(0x5623a75d83f0)
** Modified: 'arith.addi'(0x5623a75d8e50)
** Modified: 'arith.muli'(0x5623a75d8c40)
** Erase   : 'tensor.extract'(0x5623a75d83f0)
// *** IR Dump After Successful Folding ***
'func.return' op has 4 operands, but enclosing function (@test_simple_split) returns 1
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "arith.constant"() <{value = 3 : index}> : () -> index
  %1 = "arith.constant"() <{value = 2 : index}> : () -> index
  %2 = "arith.constant"() <{value = 1 : index}> : () -> index
  %3 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %4 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %6 = "arith.constant"() <{value = 0 : index}> : () -> index
  %7 = "tensor.extract"(%arg1, %6) : (tensor<4xi16>, index) -> i16
  %8 = "tensor.extract"(%arg1, %2) : (tensor<4xi16>, index) -> i16
  %9 = "tensor.extract"(%arg1, %1) : (tensor<4xi16>, index) -> i16
  %10 = "tensor.extract"(%arg1, %0) : (tensor<4xi16>, index) -> i16
  %11 = "tensor.extract"(%3, %6) : (tensor<4xi16>, index) -> i16
  %12 = "tensor.extract"(%3, %2) : (tensor<4xi16>, index) -> i16
  %13 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %14 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %15 = "arith.muli"(%7, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %16 = "arith.muli"(%8, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %17 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %18 = "arith.addi"(%11, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %19 = "arith.muli"(%17, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %20 = "arith.subi"(%19, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %21 = "arith.subi"(%20, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %22 = "arith.muli"(%7, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %23 = "arith.muli"(%8, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %24 = "arith.addi"(%13, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %25 = "arith.muli"(%17, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %26 = "arith.subi"(%25, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %27 = "arith.subi"(%26, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.muli"(%9, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.muli"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.addi"(%9, %10) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.muli"(%30, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.subi"(%31, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.addi"(%22, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.addi"(%34, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.addi"(%27, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.trunci"(%15) : (i16) -> i8
  %38 = "arith.extui"(%37) : (i8) -> i16
  %39 = "arith.shrui"(%15, %5) : (i16, i16) -> i16
  %40 = "arith.trunci"(%21) : (i16) -> i8
  %41 = "arith.extui"(%40) : (i8) -> i16
  %42 = "arith.shrui"(%21, %5) : (i16, i16) -> i16
  %43 = "arith.trunci"(%35) : (i16) -> i8
  %44 = "arith.extui"(%43) : (i8) -> i16
  %45 = "arith.shrui"(%35, %5) : (i16, i16) -> i16
  %46 = "arith.trunci"(%36) : (i16) -> i8
  %47 = "arith.extui"(%46) : (i8) -> i16
  %48 = "arith.addi"(%41, %39) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.addi"(%44, %42) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%47, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%38, %48, %49, %50) : (i16, i16, i16, i16) -> ()
}) : () -> ()



//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8c40) {
  %22 = "arith.muli"(%7, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d8e50) {
  %24 = "arith.addi"(%13, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> success : operation was folded
//===-------------------------------------------===//
** Insert  : 'arith.constant'(0x5623a75dcfd0)
** Replace : 'arith.addi'(0x5623a75d8e50)
** Modified: 'arith.muli'(0x5623a75d8f00)
** Erase   : 'arith.addi'(0x5623a75d8e50)
// *** IR Dump After Successful Folding ***
'func.return' op has 4 operands, but enclosing function (@test_simple_split) returns 1
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "arith.constant"() <{value = 3 : index}> : () -> index
  %1 = "arith.constant"() <{value = 2 : index}> : () -> index
  %2 = "arith.constant"() <{value = 1 : index}> : () -> index
  %3 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %4 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %6 = "arith.constant"() <{value = 0 : index}> : () -> index
  %7 = "tensor.extract"(%arg1, %6) : (tensor<4xi16>, index) -> i16
  %8 = "tensor.extract"(%arg1, %2) : (tensor<4xi16>, index) -> i16
  %9 = "tensor.extract"(%arg1, %1) : (tensor<4xi16>, index) -> i16
  %10 = "tensor.extract"(%arg1, %0) : (tensor<4xi16>, index) -> i16
  %11 = "tensor.extract"(%3, %6) : (tensor<4xi16>, index) -> i16
  %12 = "tensor.extract"(%3, %2) : (tensor<4xi16>, index) -> i16
  %13 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %14 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %15 = "arith.muli"(%7, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %16 = "arith.muli"(%8, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %17 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %18 = "arith.addi"(%11, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %19 = "arith.muli"(%17, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %20 = "arith.subi"(%19, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %21 = "arith.subi"(%20, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %22 = "arith.muli"(%7, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %23 = "arith.muli"(%8, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %24 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %25 = "arith.muli"(%17, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %26 = "arith.subi"(%25, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %27 = "arith.subi"(%26, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.muli"(%9, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.muli"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.addi"(%9, %10) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.muli"(%30, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.subi"(%31, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.addi"(%22, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.addi"(%34, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.addi"(%27, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.trunci"(%15) : (i16) -> i8
  %38 = "arith.extui"(%37) : (i8) -> i16
  %39 = "arith.shrui"(%15, %5) : (i16, i16) -> i16
  %40 = "arith.trunci"(%21) : (i16) -> i8
  %41 = "arith.extui"(%40) : (i8) -> i16
  %42 = "arith.shrui"(%21, %5) : (i16, i16) -> i16
  %43 = "arith.trunci"(%35) : (i16) -> i8
  %44 = "arith.extui"(%43) : (i8) -> i16
  %45 = "arith.shrui"(%35, %5) : (i16, i16) -> i16
  %46 = "arith.trunci"(%36) : (i16) -> i8
  %47 = "arith.extui"(%46) : (i8) -> i16
  %48 = "arith.addi"(%41, %39) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.addi"(%44, %42) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%47, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%38, %48, %49, %50) : (i16, i16, i16, i16) -> ()
}) : () -> ()



//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75daa10) {
  %14 = "arith.constant"() <{value = 31 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8f00) {
  %25 = "arith.muli"(%17, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75dcfd0) {
  %24 = "arith.constant"() <{value = 61 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75dce30) {
  %13 = "arith.constant"() <{value = 30 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75d8270) {
  %12 = "tensor.extract"(%3, %2) : (tensor<4xi16>, index) -> i16

} -> success : operation was folded
//===-------------------------------------------===//
** Insert  : 'arith.constant'(0x5623a75dd170)
** Replace : 'tensor.extract'(0x5623a75d8270)
** Modified: 'arith.muli'(0x5623a75d9280)
** Modified: 'arith.addi'(0x5623a75d55c0)
** Modified: 'arith.muli'(0x5623a75d5400)
** Erase   : 'tensor.extract'(0x5623a75d8270)
// *** IR Dump After Successful Folding ***
'func.return' op has 4 operands, but enclosing function (@test_simple_split) returns 1
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "arith.constant"() <{value = 3 : index}> : () -> index
  %1 = "arith.constant"() <{value = 2 : index}> : () -> index
  %2 = "arith.constant"() <{value = 1 : index}> : () -> index
  %3 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %4 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %6 = "arith.constant"() <{value = 0 : index}> : () -> index
  %7 = "tensor.extract"(%arg1, %6) : (tensor<4xi16>, index) -> i16
  %8 = "tensor.extract"(%arg1, %2) : (tensor<4xi16>, index) -> i16
  %9 = "tensor.extract"(%arg1, %1) : (tensor<4xi16>, index) -> i16
  %10 = "tensor.extract"(%arg1, %0) : (tensor<4xi16>, index) -> i16
  %11 = "tensor.extract"(%3, %6) : (tensor<4xi16>, index) -> i16
  %12 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %13 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %14 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %15 = "arith.muli"(%7, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %16 = "arith.muli"(%8, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %17 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %18 = "arith.addi"(%11, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %19 = "arith.muli"(%17, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %20 = "arith.subi"(%19, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %21 = "arith.subi"(%20, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %22 = "arith.muli"(%7, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %23 = "arith.muli"(%8, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %24 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %25 = "arith.muli"(%17, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %26 = "arith.subi"(%25, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %27 = "arith.subi"(%26, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.muli"(%9, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.muli"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.addi"(%9, %10) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.muli"(%30, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.subi"(%31, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.addi"(%22, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.addi"(%34, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.addi"(%27, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.trunci"(%15) : (i16) -> i8
  %38 = "arith.extui"(%37) : (i8) -> i16
  %39 = "arith.shrui"(%15, %5) : (i16, i16) -> i16
  %40 = "arith.trunci"(%21) : (i16) -> i8
  %41 = "arith.extui"(%40) : (i8) -> i16
  %42 = "arith.shrui"(%21, %5) : (i16, i16) -> i16
  %43 = "arith.trunci"(%35) : (i16) -> i8
  %44 = "arith.extui"(%43) : (i8) -> i16
  %45 = "arith.shrui"(%35, %5) : (i16, i16) -> i16
  %46 = "arith.trunci"(%36) : (i16) -> i8
  %47 = "arith.extui"(%46) : (i8) -> i16
  %48 = "arith.addi"(%41, %39) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.addi"(%44, %42) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%47, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%38, %48, %49, %50) : (i16, i16, i16, i16) -> ()
}) : () -> ()



//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d5400) {
  %16 = "arith.muli"(%8, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d55c0) {
  %18 = "arith.addi"(%11, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d9280) {
  %29 = "arith.muli"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75dd170) {
  %12 = "arith.constant"() <{value = 29 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75d8190) {
  %11 = "tensor.extract"(%3, %6) : (tensor<4xi16>, index) -> i16

} -> success : operation was folded
//===-------------------------------------------===//
** Insert  : 'arith.constant'(0x5623a759ba70)
** Replace : 'tensor.extract'(0x5623a75d8190)
** Modified: 'arith.muli'(0x5623a75d91a0)
** Modified: 'arith.addi'(0x5623a75d55c0)
** Modified: 'arith.muli'(0x5623a75d8680)
** Erase   : 'tensor.extract'(0x5623a75d8190)
// *** IR Dump After Successful Folding ***
'func.return' op has 4 operands, but enclosing function (@test_simple_split) returns 1
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "arith.constant"() <{value = 3 : index}> : () -> index
  %1 = "arith.constant"() <{value = 2 : index}> : () -> index
  %2 = "arith.constant"() <{value = 1 : index}> : () -> index
  %3 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %4 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %6 = "arith.constant"() <{value = 0 : index}> : () -> index
  %7 = "tensor.extract"(%arg1, %6) : (tensor<4xi16>, index) -> i16
  %8 = "tensor.extract"(%arg1, %2) : (tensor<4xi16>, index) -> i16
  %9 = "tensor.extract"(%arg1, %1) : (tensor<4xi16>, index) -> i16
  %10 = "tensor.extract"(%arg1, %0) : (tensor<4xi16>, index) -> i16
  %11 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %12 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %13 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %14 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %15 = "arith.muli"(%7, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %16 = "arith.muli"(%8, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %17 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %18 = "arith.addi"(%11, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %19 = "arith.muli"(%17, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %20 = "arith.subi"(%19, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %21 = "arith.subi"(%20, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %22 = "arith.muli"(%7, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %23 = "arith.muli"(%8, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %24 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %25 = "arith.muli"(%17, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %26 = "arith.subi"(%25, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %27 = "arith.subi"(%26, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.muli"(%9, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.muli"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.addi"(%9, %10) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.muli"(%30, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.subi"(%31, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.addi"(%22, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.addi"(%34, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.addi"(%27, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.trunci"(%15) : (i16) -> i8
  %38 = "arith.extui"(%37) : (i8) -> i16
  %39 = "arith.shrui"(%15, %5) : (i16, i16) -> i16
  %40 = "arith.trunci"(%21) : (i16) -> i8
  %41 = "arith.extui"(%40) : (i8) -> i16
  %42 = "arith.shrui"(%21, %5) : (i16, i16) -> i16
  %43 = "arith.trunci"(%35) : (i16) -> i8
  %44 = "arith.extui"(%43) : (i8) -> i16
  %45 = "arith.shrui"(%35, %5) : (i16, i16) -> i16
  %46 = "arith.trunci"(%36) : (i16) -> i8
  %47 = "arith.extui"(%46) : (i8) -> i16
  %48 = "arith.addi"(%41, %39) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.addi"(%44, %42) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%47, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%38, %48, %49, %50) : (i16, i16, i16, i16) -> ()
}) : () -> ()



//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8680) {
  %15 = "arith.muli"(%7, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d55c0) {
  %18 = "arith.addi"(%11, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> success : operation was folded
//===-------------------------------------------===//
** Insert  : 'arith.constant'(0x5623a7578320)
** Replace : 'arith.addi'(0x5623a75d55c0)
** Modified: 'arith.muli'(0x5623a75d9520)
** Modified: 'arith.muli'(0x5623a75d56a0)
** Erase   : 'arith.addi'(0x5623a75d55c0)
// *** IR Dump After Successful Folding ***
'func.return' op has 4 operands, but enclosing function (@test_simple_split) returns 1
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (tensor<4xi16>, tensor<4xi16>) -> tensor<4xi16>, sym_name = "test_simple_split"}> ({
^bb0(%arg0: tensor<4xi16>, %arg1: tensor<4xi16>):
  %0 = "arith.constant"() <{value = 3 : index}> : () -> index
  %1 = "arith.constant"() <{value = 2 : index}> : () -> index
  %2 = "arith.constant"() <{value = 1 : index}> : () -> index
  %3 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %4 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>
  %5 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %6 = "arith.constant"() <{value = 0 : index}> : () -> index
  %7 = "tensor.extract"(%arg1, %6) : (tensor<4xi16>, index) -> i16
  %8 = "tensor.extract"(%arg1, %2) : (tensor<4xi16>, index) -> i16
  %9 = "tensor.extract"(%arg1, %1) : (tensor<4xi16>, index) -> i16
  %10 = "tensor.extract"(%arg1, %0) : (tensor<4xi16>, index) -> i16
  %11 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %12 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %13 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %14 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %15 = "arith.muli"(%7, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %16 = "arith.muli"(%8, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %17 = "arith.addi"(%7, %8) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %18 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %19 = "arith.muli"(%17, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %20 = "arith.subi"(%19, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %21 = "arith.subi"(%20, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %22 = "arith.muli"(%7, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %23 = "arith.muli"(%8, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %24 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %25 = "arith.muli"(%17, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %26 = "arith.subi"(%25, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %27 = "arith.subi"(%26, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.muli"(%9, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.muli"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.addi"(%9, %10) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.muli"(%30, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.subi"(%31, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.addi"(%22, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.addi"(%34, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.addi"(%27, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.trunci"(%15) : (i16) -> i8
  %38 = "arith.extui"(%37) : (i8) -> i16
  %39 = "arith.shrui"(%15, %5) : (i16, i16) -> i16
  %40 = "arith.trunci"(%21) : (i16) -> i8
  %41 = "arith.extui"(%40) : (i8) -> i16
  %42 = "arith.shrui"(%21, %5) : (i16, i16) -> i16
  %43 = "arith.trunci"(%35) : (i16) -> i8
  %44 = "arith.extui"(%43) : (i8) -> i16
  %45 = "arith.shrui"(%35, %5) : (i16, i16) -> i16
  %46 = "arith.trunci"(%36) : (i16) -> i8
  %47 = "arith.extui"(%46) : (i8) -> i16
  %48 = "arith.addi"(%41, %39) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.addi"(%44, %42) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%47, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%38, %48, %49, %50) : (i16, i16, i16, i16) -> ()
}) : () -> ()



//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d56a0) {
  %19 = "arith.muli"(%17, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d9520) {
  %31 = "arith.muli"(%30, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a7578320) {
  %18 = "arith.constant"() <{value = 57 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d91a0) {
  %28 = "arith.muli"(%9, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a759ba70) {
  %11 = "arith.constant"() <{value = 28 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75d8010) {
  %10 = "tensor.extract"(%arg1, %0) : (tensor<4xi16>, index) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d7f70) {
  %0 = "arith.constant"() <{value = 3 : index}> : () -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75d4f10) {
  %9 = "tensor.extract"(%arg1, %1) : (tensor<4xi16>, index) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d4e70) {
  %1 = "arith.constant"() <{value = 2 : index}> : () -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a7599580) {
  %8 = "tensor.extract"(%arg1, %2) : (tensor<4xi16>, index) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d4da0) {
  %2 = "arith.constant"() <{value = 1 : index}> : () -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a757fdb0) {
  %7 = "tensor.extract"(%arg1, %6) : (tensor<4xi16>, index) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d48f0) {
  %6 = "arith.constant"() <{value = 0 : index}> : () -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d5e20) {
  %5 = "arith.constant"() <{value = 8 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d1cf0) {
  %4 = "arith.constant"() <{value = dense<[31, 0, 0, 0]> : tensor<4xi16>}> : () -> tensor<4xi16>

  ** Erase   : 'arith.constant'(0x5623a75d1cf0)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'func.func'(0x5623a75797b0) {

  * Pattern mlir::(anonymous namespace)::FunctionOpInterfaceSignatureConversion : 'func.func -> ()' {
Trying to match "mlir::(anonymous namespace)::FunctionOpInterfaceSignatureConversion"
    ** Modified: 'func.func'(0x5623a75797b0)
    ** Insert  : 'builtin.unrealized_conversion_cast'(0x5623a7569e00)
    ** Insert  : 'builtin.unrealized_conversion_cast'(0x5623a7569c40)
    ** Modified: 'tensor.extract'(0x5623a757fdb0)
    ** Modified: 'tensor.extract'(0x5623a7599580)
    ** Modified: 'tensor.extract'(0x5623a75d4f10)
    ** Modified: 'tensor.extract'(0x5623a75d8010)
    ** Insert  : 'arith.constant'(0x5623a75d7f70)
    ** Insert  : 'arith.constant'(0x5623a75d4e70)
    ** Insert  : 'arith.constant'(0x5623a75d4da0)
    ** Insert  : 'arith.constant'(0x5623a75d3010)
    ** Insert  : 'arith.constant'(0x5623a75d5e20)
    ** Insert  : 'arith.constant'(0x5623a75d48f0)
    ** Insert  : 'tensor.extract'(0x5623a757fdb0)
    ** Insert  : 'tensor.extract'(0x5623a7599580)
    ** Insert  : 'tensor.extract'(0x5623a75d4f10)
    ** Insert  : 'tensor.extract'(0x5623a75d8010)
    ** Insert  : 'arith.constant'(0x5623a759ba70)
    ** Insert  : 'arith.constant'(0x5623a75dd170)
    ** Insert  : 'arith.constant'(0x5623a75dce30)
    ** Insert  : 'arith.constant'(0x5623a75daa10)
    ** Insert  : 'arith.muli'(0x5623a75d8680)
    ** Insert  : 'arith.muli'(0x5623a75d5400)
    ** Insert  : 'arith.addi'(0x5623a75d54e0)
    ** Insert  : 'arith.constant'(0x5623a7578320)
    ** Insert  : 'arith.muli'(0x5623a75d56a0)
    ** Insert  : 'arith.subi'(0x5623a75d5780)
    ** Insert  : 'arith.subi'(0x5623a75d8b90)
    ** Insert  : 'arith.muli'(0x5623a75d8c40)
    ** Insert  : 'arith.muli'(0x5623a75d8cf0)
    ** Insert  : 'arith.constant'(0x5623a75dcfd0)
    ** Insert  : 'arith.muli'(0x5623a75d8f00)
    ** Insert  : 'arith.subi'(0x5623a75d8fe0)
    ** Insert  : 'arith.subi'(0x5623a75d90c0)
    ** Insert  : 'arith.muli'(0x5623a75d91a0)
    ** Insert  : 'arith.muli'(0x5623a75d9280)
    ** Insert  : 'arith.addi'(0x5623a75d9360)
    ** Insert  : 'arith.muli'(0x5623a75d9520)
    ** Insert  : 'arith.subi'(0x5623a75d9600)
    ** Insert  : 'arith.subi'(0x5623a75d96e0)
    ** Insert  : 'arith.addi'(0x5623a75d97c0)
    ** Insert  : 'arith.addi'(0x5623a75d98a0)
    ** Insert  : 'arith.addi'(0x5623a75d9980)
    ** Insert  : 'arith.trunci'(0x5623a75d9a60)
    ** Insert  : 'arith.extui'(0x5623a75d9b20)
    ** Insert  : 'arith.shrui'(0x5623a75d9be0)
    ** Insert  : 'arith.trunci'(0x5623a75d9cc0)
    ** Insert  : 'arith.extui'(0x5623a75d9d80)
    ** Insert  : 'arith.shrui'(0x5623a75d9e40)
    ** Insert  : 'arith.trunci'(0x5623a75d9f20)
    ** Insert  : 'arith.extui'(0x5623a75d9fe0)
    ** Insert  : 'arith.shrui'(0x5623a75da0a0)
    ** Insert  : 'arith.trunci'(0x5623a75da180)
    ** Insert  : 'arith.extui'(0x5623a75da240)
    ** Insert  : 'arith.addi'(0x5623a75da300)
    ** Insert  : 'arith.addi'(0x5623a75da3e0)
    ** Insert  : 'arith.addi'(0x5623a75da4c0)
    ** Insert  : 'func.return'(0x5623a75cef10)
"mlir::(anonymous namespace)::FunctionOpInterfaceSignatureConversion" result 1
  } -> success : pattern applied successfully
// *** IR Dump After Pattern Application ***
module {
  func.func @test_simple_split(%arg0: i16, %arg1: i16, %arg2: i16, %arg3: i16, %arg4: i16, %arg5: i16, %arg6: i16, %arg7: i16) -> (i16, i16, i16, i16) {
    %0 = builtin.unrealized_conversion_cast %arg4, %arg5, %arg6, %arg7 : i16, i16, i16, i16 to tensor<4xi16> {"__one-to-n-type-conversion_cast-kind__" = "argument"}
    %1 = builtin.unrealized_conversion_cast %arg0, %arg1, %arg2, %arg3 : i16, i16, i16, i16 to tensor<4xi16> {"__one-to-n-type-conversion_cast-kind__" = "argument"}
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %cst = arith.constant dense<[28, 29, 30, 31]> : tensor<4xi16>
    %c8_i16 = arith.constant 8 : i16
    %c0 = arith.constant 0 : index
    %extracted = tensor.extract %0[%c0] : tensor<4xi16>
    %extracted_0 = tensor.extract %0[%c1] : tensor<4xi16>
    %extracted_1 = tensor.extract %0[%c2] : tensor<4xi16>
    %extracted_2 = tensor.extract %0[%c3] : tensor<4xi16>
    %c28_i16 = arith.constant 28 : i16
    %c29_i16 = arith.constant 29 : i16
    %c30_i16 = arith.constant 30 : i16
    %c31_i16 = arith.constant 31 : i16
    %2 = arith.muli %extracted, %c28_i16 : i16
    %3 = arith.muli %extracted_0, %c29_i16 : i16
    %4 = arith.addi %extracted, %extracted_0 : i16
    %c57_i16 = arith.constant 57 : i16
    %5 = arith.muli %4, %c57_i16 : i16
    %6 = arith.subi %5, %2 : i16
    %7 = arith.subi %6, %3 : i16
    %8 = arith.muli %extracted, %c30_i16 : i16
    %9 = arith.muli %extracted_0, %c31_i16 : i16
    %c61_i16 = arith.constant 61 : i16
    %10 = arith.muli %4, %c61_i16 : i16
    %11 = arith.subi %10, %8 : i16
    %12 = arith.subi %11, %9 : i16
    %13 = arith.muli %extracted_1, %c28_i16 : i16
    %14 = arith.muli %extracted_2, %c29_i16 : i16
    %15 = arith.addi %extracted_1, %extracted_2 : i16
    %16 = arith.muli %15, %c57_i16 : i16
    %17 = arith.subi %16, %13 : i16
    %18 = arith.subi %17, %14 : i16
    %19 = arith.addi %8, %13 : i16
    %20 = arith.addi %19, %3 : i16
    %21 = arith.addi %12, %18 : i16
    %22 = arith.trunci %2 : i16 to i8
    %23 = arith.extui %22 : i8 to i16
    %24 = arith.shrui %2, %c8_i16 : i16
    %25 = arith.trunci %7 : i16 to i8
    %26 = arith.extui %25 : i8 to i16
    %27 = arith.shrui %7, %c8_i16 : i16
    %28 = arith.trunci %20 : i16 to i8
    %29 = arith.extui %28 : i8 to i16
    %30 = arith.shrui %20, %c8_i16 : i16
    %31 = arith.trunci %21 : i16 to i8
    %32 = arith.extui %31 : i8 to i16
    %33 = arith.addi %26, %24 : i16
    %34 = arith.addi %29, %27 : i16
    %35 = arith.addi %32, %30 : i16
    return %23, %33, %34, %35 : i16, i16, i16, i16
  }
}


} -> success : pattern matched
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'func.return'(0x5623a75cef10) {
  "func.return"(%39, %49, %50, %51) : (i16, i16, i16, i16) -> ()


  * Pattern (anonymous namespace)::ConvertTypesInFuncReturnOp : 'func.return -> ()' {
Trying to match "(anonymous namespace)::ConvertTypesInFuncReturnOp"
"(anonymous namespace)::ConvertTypesInFuncReturnOp" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75da4c0) {
  %51 = "arith.addi"(%48, %46) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75da3e0) {
  %50 = "arith.addi"(%45, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75da300) {
  %49 = "arith.addi"(%42, %40) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75da240) {
  %48 = "arith.extui"(%47) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75da180) {
  %47 = "arith.trunci"(%37) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.shrui'(0x5623a75da0a0) {
  %46 = "arith.shrui"(%36, %6) : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75d9fe0) {
  %45 = "arith.extui"(%44) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75d9f20) {
  %44 = "arith.trunci"(%36) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.shrui'(0x5623a75d9e40) {
  %43 = "arith.shrui"(%22, %6) : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75d9d80) {
  %42 = "arith.extui"(%41) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75d9cc0) {
  %41 = "arith.trunci"(%22) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.shrui'(0x5623a75d9be0) {
  %40 = "arith.shrui"(%16, %6) : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75d9b20) {
  %39 = "arith.extui"(%38) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75d9a60) {
  %38 = "arith.trunci"(%16) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d9980) {
  %37 = "arith.addi"(%28, %34) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d98a0) {
  %36 = "arith.addi"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d97c0) {
  %35 = "arith.addi"(%23, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d96e0) {
  %34 = "arith.subi"(%33, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d9600) {
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d9520) {
  %32 = "arith.muli"(%31, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d9360) {
  %31 = "arith.addi"(%10, %11) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d9280) {
  %30 = "arith.muli"(%11, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d91a0) {
  %29 = "arith.muli"(%10, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d90c0) {
  %28 = "arith.subi"(%27, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d8fe0) {
  %27 = "arith.subi"(%26, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8f00) {
  %26 = "arith.muli"(%18, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75dcfd0) {
  %25 = "arith.constant"() <{value = 61 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8cf0) {
  %24 = "arith.muli"(%9, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8c40) {
  %23 = "arith.muli"(%8, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d8b90) {
  %22 = "arith.subi"(%21, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d5780) {
  %21 = "arith.subi"(%20, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d56a0) {
  %20 = "arith.muli"(%18, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a7578320) {
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d54e0) {
  %18 = "arith.addi"(%8, %9) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d5400) {
  %17 = "arith.muli"(%9, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8680) {
  %16 = "arith.muli"(%8, %12) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75daa10) {
  %15 = "arith.constant"() <{value = 31 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75dce30) {
  %14 = "arith.constant"() <{value = 30 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75dd170) {
  %13 = "arith.constant"() <{value = 29 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a759ba70) {
  %12 = "arith.constant"() <{value = 28 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d48f0) {
  %7 = "arith.constant"() <{value = 0 : index}> : () -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d5e20) {
  %6 = "arith.constant"() <{value = 8 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d4da0) {
  %4 = "arith.constant"() <{value = 1 : index}> : () -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d4e70) {
  %3 = "arith.constant"() <{value = 2 : index}> : () -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d7f70) {
  %2 = "arith.constant"() <{value = 3 : index}> : () -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75d8010) {
  %11 = "tensor.extract"(%0, %2) : (tensor<4xi16>, index) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75d4f10) {
  %10 = "tensor.extract"(%0, %3) : (tensor<4xi16>, index) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a7599580) {
  %9 = "tensor.extract"(%0, %4) : (tensor<4xi16>, index) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a757fdb0) {
  %8 = "tensor.extract"(%0, %7) : (tensor<4xi16>, index) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'builtin.unrealized_conversion_cast'(0x5623a7569c40) {
  %0 = "builtin.unrealized_conversion_cast"(%arg4, %arg5, %arg6, %arg7) {"__one-to-n-type-conversion_cast-kind__" = "argument"} : (i16, i16, i16, i16) -> tensor<4xi16>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'builtin.unrealized_conversion_cast'(0x5623a7569e00) {
  %1 = "builtin.unrealized_conversion_cast"(%arg0, %arg1, %arg2, %arg3) {"__one-to-n-type-conversion_cast-kind__" = "argument"} : (i16, i16, i16, i16) -> tensor<4xi16>

  ** Erase   : 'builtin.unrealized_conversion_cast'(0x5623a7569e00)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'func.func'(0x5623a75797b0) {

  * Pattern mlir::(anonymous namespace)::FunctionOpInterfaceSignatureConversion : 'func.func -> ()' {
Trying to match "mlir::(anonymous namespace)::FunctionOpInterfaceSignatureConversion"
"mlir::(anonymous namespace)::FunctionOpInterfaceSignatureConversion" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d3010) {
  %4 = "arith.constant"() <{value = dense<[28, 29, 30, 31]> : tensor<4xi16>}> : () -> tensor<4xi16>

  ** Erase   : 'arith.constant'(0x5623a75d3010)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'func.return'(0x5623a75cef10) {
  "func.return"(%37, %47, %48, %49) : (i16, i16, i16, i16) -> ()


  * Pattern (anonymous namespace)::ConvertTypesInFuncReturnOp : 'func.return -> ()' {
Trying to match "(anonymous namespace)::ConvertTypesInFuncReturnOp"
"(anonymous namespace)::ConvertTypesInFuncReturnOp" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75da4c0) {
  %49 = "arith.addi"(%46, %44) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75da3e0) {
  %48 = "arith.addi"(%43, %41) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75da300) {
  %47 = "arith.addi"(%40, %38) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75da240) {
  %46 = "arith.extui"(%45) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75da180) {
  %45 = "arith.trunci"(%35) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.shrui'(0x5623a75da0a0) {
  %44 = "arith.shrui"(%34, %7) : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75d9fe0) {
  %43 = "arith.extui"(%42) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75d9f20) {
  %42 = "arith.trunci"(%34) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.shrui'(0x5623a75d9e40) {
  %41 = "arith.shrui"(%21, %7) : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75d9d80) {
  %40 = "arith.extui"(%39) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75d9cc0) {
  %39 = "arith.trunci"(%21) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.shrui'(0x5623a75d9be0) {
  %38 = "arith.shrui"(%16, %7) : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75d9b20) {
  %37 = "arith.extui"(%36) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75d9a60) {
  %36 = "arith.trunci"(%16) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d9980) {
  %35 = "arith.addi"(%26, %32) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d98a0) {
  %34 = "arith.addi"(%33, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d97c0) {
  %33 = "arith.addi"(%22, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d96e0) {
  %32 = "arith.subi"(%31, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d9600) {
  %31 = "arith.subi"(%30, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d9520) {
  %30 = "arith.muli"(%29, %1) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d9360) {
  %29 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d9280) {
  %28 = "arith.muli"(%15, %4) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d91a0) {
  %27 = "arith.muli"(%14, %5) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d90c0) {
  %26 = "arith.subi"(%25, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d8fe0) {
  %25 = "arith.subi"(%24, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8f00) {
  %24 = "arith.muli"(%18, %0) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75dcfd0) {
  %0 = "arith.constant"() <{value = 61 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8cf0) {
  %23 = "arith.muli"(%13, %2) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8c40) {
  %22 = "arith.muli"(%12, %3) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d8b90) {
  %21 = "arith.subi"(%20, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d5780) {
  %20 = "arith.subi"(%19, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d56a0) {
  %19 = "arith.muli"(%18, %1) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a7578320) {
  %1 = "arith.constant"() <{value = 57 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d54e0) {
  %18 = "arith.addi"(%12, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d5400) {
  %17 = "arith.muli"(%13, %4) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8680) {
  %16 = "arith.muli"(%12, %5) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75daa10) {
  %2 = "arith.constant"() <{value = 31 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75dce30) {
  %3 = "arith.constant"() <{value = 30 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75dd170) {
  %4 = "arith.constant"() <{value = 29 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a759ba70) {
  %5 = "arith.constant"() <{value = 28 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75d8010) {
  %15 = "tensor.extract"(%11, %10) : (tensor<4xi16>, index) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75d4f10) {
  %14 = "tensor.extract"(%11, %9) : (tensor<4xi16>, index) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a7599580) {
  %13 = "tensor.extract"(%11, %8) : (tensor<4xi16>, index) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a757fdb0) {
  %12 = "tensor.extract"(%11, %6) : (tensor<4xi16>, index) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d48f0) {
  %6 = "arith.constant"() <{value = 0 : index}> : () -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d5e20) {
  %7 = "arith.constant"() <{value = 8 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d4da0) {
  %8 = "arith.constant"() <{value = 1 : index}> : () -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d4e70) {
  %9 = "arith.constant"() <{value = 2 : index}> : () -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d7f70) {
  %10 = "arith.constant"() <{value = 3 : index}> : () -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'func.func'(0x5623a75797b0) {

  * Pattern mlir::(anonymous namespace)::FunctionOpInterfaceSignatureConversion : 'func.func -> ()' {
Trying to match "mlir::(anonymous namespace)::FunctionOpInterfaceSignatureConversion"
"mlir::(anonymous namespace)::FunctionOpInterfaceSignatureConversion" result 0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'builtin.unrealized_conversion_cast'(0x5623a7569c40) {
  %11 = "builtin.unrealized_conversion_cast"(%arg4, %arg5, %arg6, %arg7) {"__one-to-n-type-conversion_cast-kind__" = "argument"} : (i16, i16, i16, i16) -> tensor<4xi16>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'func.return'(0x5623a75cef10) {
  "func.return"(%37, %47, %48, %49) : (i16, i16, i16, i16) -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75da4c0) {
  %49 = "arith.addi"(%46, %44) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75da3e0) {
  %48 = "arith.addi"(%43, %41) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75da300) {
  %47 = "arith.addi"(%40, %38) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75da240) {
  %46 = "arith.extui"(%45) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75da180) {
  %45 = "arith.trunci"(%35) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.shrui'(0x5623a75da0a0) {
  %44 = "arith.shrui"(%34, %7) : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75d9fe0) {
  %43 = "arith.extui"(%42) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75d9f20) {
  %42 = "arith.trunci"(%34) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.shrui'(0x5623a75d9e40) {
  %41 = "arith.shrui"(%21, %7) : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75d9d80) {
  %40 = "arith.extui"(%39) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75d9cc0) {
  %39 = "arith.trunci"(%21) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.shrui'(0x5623a75d9be0) {
  %38 = "arith.shrui"(%16, %7) : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75d9b20) {
  %37 = "arith.extui"(%36) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75d9a60) {
  %36 = "arith.trunci"(%16) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d9980) {
  %35 = "arith.addi"(%26, %32) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d98a0) {
  %34 = "arith.addi"(%33, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d97c0) {
  %33 = "arith.addi"(%22, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d96e0) {
  %32 = "arith.subi"(%31, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d9600) {
  %31 = "arith.subi"(%30, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d9520) {
  %30 = "arith.muli"(%29, %1) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d9360) {
  %29 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d9280) {
  %28 = "arith.muli"(%15, %4) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d91a0) {
  %27 = "arith.muli"(%14, %5) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d90c0) {
  %26 = "arith.subi"(%25, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d8fe0) {
  %25 = "arith.subi"(%24, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8f00) {
  %24 = "arith.muli"(%18, %0) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8cf0) {
  %23 = "arith.muli"(%13, %2) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8c40) {
  %22 = "arith.muli"(%12, %3) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d8b90) {
  %21 = "arith.subi"(%20, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d5780) {
  %20 = "arith.subi"(%19, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d56a0) {
  %19 = "arith.muli"(%18, %1) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d54e0) {
  %18 = "arith.addi"(%12, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d5400) {
  %17 = "arith.muli"(%13, %4) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8680) {
  %16 = "arith.muli"(%12, %5) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75d8010) {
  %15 = "tensor.extract"(%11, %10) : (tensor<4xi16>, index) -> i16

} -> success : operation was folded
//===-------------------------------------------===//
** Replace : 'tensor.extract'(0x5623a75d8010)
** Modified: 'arith.addi'(0x5623a75d9360)
** Modified: 'arith.muli'(0x5623a75d9280)
** Erase   : 'tensor.extract'(0x5623a75d8010)
// *** IR Dump After Successful Folding ***
func.func @test_simple_split(%arg0: i16, %arg1: i16, %arg2: i16, %arg3: i16, %arg4: i16, %arg5: i16, %arg6: i16, %arg7: i16) -> (i16, i16, i16, i16) {
  %c61_i16 = arith.constant 61 : i16
  %c57_i16 = arith.constant 57 : i16
  %c31_i16 = arith.constant 31 : i16
  %c30_i16 = arith.constant 30 : i16
  %c29_i16 = arith.constant 29 : i16
  %c28_i16 = arith.constant 28 : i16
  %c0 = arith.constant 0 : index
  %c8_i16 = arith.constant 8 : i16
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %from_elements = tensor.from_elements %arg4, %arg5, %arg6, %arg7 : tensor<4xi16>
  %extracted = tensor.extract %from_elements[%c0] : tensor<4xi16>
  %extracted_0 = tensor.extract %from_elements[%c1] : tensor<4xi16>
  %extracted_1 = tensor.extract %from_elements[%c2] : tensor<4xi16>
  %0 = arith.muli %extracted, %c28_i16 : i16
  %1 = arith.muli %extracted_0, %c29_i16 : i16
  %2 = arith.addi %extracted, %extracted_0 : i16
  %3 = arith.muli %2, %c57_i16 : i16
  %4 = arith.subi %3, %0 : i16
  %5 = arith.subi %4, %1 : i16
  %6 = arith.muli %extracted, %c30_i16 : i16
  %7 = arith.muli %extracted_0, %c31_i16 : i16
  %8 = arith.muli %2, %c61_i16 : i16
  %9 = arith.subi %8, %6 : i16
  %10 = arith.subi %9, %7 : i16
  %11 = arith.muli %extracted_1, %c28_i16 : i16
  %12 = arith.muli %arg7, %c29_i16 : i16
  %13 = arith.addi %extracted_1, %arg7 : i16
  %14 = arith.muli %13, %c57_i16 : i16
  %15 = arith.subi %14, %11 : i16
  %16 = arith.subi %15, %12 : i16
  %17 = arith.addi %6, %11 : i16
  %18 = arith.addi %17, %1 : i16
  %19 = arith.addi %10, %16 : i16
  %20 = arith.trunci %0 : i16 to i8
  %21 = arith.extui %20 : i8 to i16
  %22 = arith.shrui %0, %c8_i16 : i16
  %23 = arith.trunci %5 : i16 to i8
  %24 = arith.extui %23 : i8 to i16
  %25 = arith.shrui %5, %c8_i16 : i16
  %26 = arith.trunci %18 : i16 to i8
  %27 = arith.extui %26 : i8 to i16
  %28 = arith.shrui %18, %c8_i16 : i16
  %29 = arith.trunci %19 : i16 to i8
  %30 = arith.extui %29 : i8 to i16
  %31 = arith.addi %24, %22 : i16
  %32 = arith.addi %27, %25 : i16
  %33 = arith.addi %30, %28 : i16
  return %21, %31, %32, %33 : i16, i16, i16, i16
}



//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d9280) {
  %27 = "arith.muli"(%arg7, %4) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d9360) {
  %28 = "arith.addi"(%14, %arg7) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a75d4f10) {
  %14 = "tensor.extract"(%11, %9) : (tensor<4xi16>, index) -> i16

} -> success : operation was folded
//===-------------------------------------------===//
** Replace : 'tensor.extract'(0x5623a75d4f10)
** Modified: 'arith.addi'(0x5623a75d9360)
** Modified: 'arith.muli'(0x5623a75d91a0)
** Erase   : 'tensor.extract'(0x5623a75d4f10)
// *** IR Dump After Successful Folding ***
func.func @test_simple_split(%arg0: i16, %arg1: i16, %arg2: i16, %arg3: i16, %arg4: i16, %arg5: i16, %arg6: i16, %arg7: i16) -> (i16, i16, i16, i16) {
  %c61_i16 = arith.constant 61 : i16
  %c57_i16 = arith.constant 57 : i16
  %c31_i16 = arith.constant 31 : i16
  %c30_i16 = arith.constant 30 : i16
  %c29_i16 = arith.constant 29 : i16
  %c28_i16 = arith.constant 28 : i16
  %c0 = arith.constant 0 : index
  %c8_i16 = arith.constant 8 : i16
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %from_elements = tensor.from_elements %arg4, %arg5, %arg6, %arg7 : tensor<4xi16>
  %extracted = tensor.extract %from_elements[%c0] : tensor<4xi16>
  %extracted_0 = tensor.extract %from_elements[%c1] : tensor<4xi16>
  %0 = arith.muli %extracted, %c28_i16 : i16
  %1 = arith.muli %extracted_0, %c29_i16 : i16
  %2 = arith.addi %extracted, %extracted_0 : i16
  %3 = arith.muli %2, %c57_i16 : i16
  %4 = arith.subi %3, %0 : i16
  %5 = arith.subi %4, %1 : i16
  %6 = arith.muli %extracted, %c30_i16 : i16
  %7 = arith.muli %extracted_0, %c31_i16 : i16
  %8 = arith.muli %2, %c61_i16 : i16
  %9 = arith.subi %8, %6 : i16
  %10 = arith.subi %9, %7 : i16
  %11 = arith.muli %arg6, %c28_i16 : i16
  %12 = arith.muli %arg7, %c29_i16 : i16
  %13 = arith.addi %arg6, %arg7 : i16
  %14 = arith.muli %13, %c57_i16 : i16
  %15 = arith.subi %14, %11 : i16
  %16 = arith.subi %15, %12 : i16
  %17 = arith.addi %6, %11 : i16
  %18 = arith.addi %17, %1 : i16
  %19 = arith.addi %10, %16 : i16
  %20 = arith.trunci %0 : i16 to i8
  %21 = arith.extui %20 : i8 to i16
  %22 = arith.shrui %0, %c8_i16 : i16
  %23 = arith.trunci %5 : i16 to i8
  %24 = arith.extui %23 : i8 to i16
  %25 = arith.shrui %5, %c8_i16 : i16
  %26 = arith.trunci %18 : i16 to i8
  %27 = arith.extui %26 : i8 to i16
  %28 = arith.shrui %18, %c8_i16 : i16
  %29 = arith.trunci %19 : i16 to i8
  %30 = arith.extui %29 : i8 to i16
  %31 = arith.addi %24, %22 : i16
  %32 = arith.addi %27, %25 : i16
  %33 = arith.addi %30, %28 : i16
  return %21, %31, %32, %33 : i16, i16, i16, i16
}



//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d91a0) {
  %25 = "arith.muli"(%arg6, %5) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d9360) {
  %27 = "arith.addi"(%arg6, %arg7) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a7599580) {
  %13 = "tensor.extract"(%11, %8) : (tensor<4xi16>, index) -> i16

} -> success : operation was folded
//===-------------------------------------------===//
** Replace : 'tensor.extract'(0x5623a7599580)
** Modified: 'arith.muli'(0x5623a75d8cf0)
** Modified: 'arith.addi'(0x5623a75d54e0)
** Modified: 'arith.muli'(0x5623a75d5400)
** Erase   : 'tensor.extract'(0x5623a7599580)
// *** IR Dump After Successful Folding ***
func.func @test_simple_split(%arg0: i16, %arg1: i16, %arg2: i16, %arg3: i16, %arg4: i16, %arg5: i16, %arg6: i16, %arg7: i16) -> (i16, i16, i16, i16) {
  %c61_i16 = arith.constant 61 : i16
  %c57_i16 = arith.constant 57 : i16
  %c31_i16 = arith.constant 31 : i16
  %c30_i16 = arith.constant 30 : i16
  %c29_i16 = arith.constant 29 : i16
  %c28_i16 = arith.constant 28 : i16
  %c0 = arith.constant 0 : index
  %c8_i16 = arith.constant 8 : i16
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %from_elements = tensor.from_elements %arg4, %arg5, %arg6, %arg7 : tensor<4xi16>
  %extracted = tensor.extract %from_elements[%c0] : tensor<4xi16>
  %0 = arith.muli %extracted, %c28_i16 : i16
  %1 = arith.muli %arg5, %c29_i16 : i16
  %2 = arith.addi %extracted, %arg5 : i16
  %3 = arith.muli %2, %c57_i16 : i16
  %4 = arith.subi %3, %0 : i16
  %5 = arith.subi %4, %1 : i16
  %6 = arith.muli %extracted, %c30_i16 : i16
  %7 = arith.muli %arg5, %c31_i16 : i16
  %8 = arith.muli %2, %c61_i16 : i16
  %9 = arith.subi %8, %6 : i16
  %10 = arith.subi %9, %7 : i16
  %11 = arith.muli %arg6, %c28_i16 : i16
  %12 = arith.muli %arg7, %c29_i16 : i16
  %13 = arith.addi %arg6, %arg7 : i16
  %14 = arith.muli %13, %c57_i16 : i16
  %15 = arith.subi %14, %11 : i16
  %16 = arith.subi %15, %12 : i16
  %17 = arith.addi %6, %11 : i16
  %18 = arith.addi %17, %1 : i16
  %19 = arith.addi %10, %16 : i16
  %20 = arith.trunci %0 : i16 to i8
  %21 = arith.extui %20 : i8 to i16
  %22 = arith.shrui %0, %c8_i16 : i16
  %23 = arith.trunci %5 : i16 to i8
  %24 = arith.extui %23 : i8 to i16
  %25 = arith.shrui %5, %c8_i16 : i16
  %26 = arith.trunci %18 : i16 to i8
  %27 = arith.extui %26 : i8 to i16
  %28 = arith.shrui %18, %c8_i16 : i16
  %29 = arith.trunci %19 : i16 to i8
  %30 = arith.extui %29 : i8 to i16
  %31 = arith.addi %24, %22 : i16
  %32 = arith.addi %27, %25 : i16
  %33 = arith.addi %30, %28 : i16
  return %21, %31, %32, %33 : i16, i16, i16, i16
}



//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d5400) {
  %14 = "arith.muli"(%arg5, %4) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d54e0) {
  %15 = "arith.addi"(%12, %arg5) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8cf0) {
  %20 = "arith.muli"(%arg5, %2) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.extract'(0x5623a757fdb0) {
  %12 = "tensor.extract"(%11, %6) : (tensor<4xi16>, index) -> i16

} -> success : operation was folded
//===-------------------------------------------===//
** Replace : 'tensor.extract'(0x5623a757fdb0)
** Modified: 'arith.muli'(0x5623a75d8c40)
** Modified: 'arith.addi'(0x5623a75d54e0)
** Modified: 'arith.muli'(0x5623a75d8680)
** Erase   : 'tensor.extract'(0x5623a757fdb0)
// *** IR Dump After Successful Folding ***
func.func @test_simple_split(%arg0: i16, %arg1: i16, %arg2: i16, %arg3: i16, %arg4: i16, %arg5: i16, %arg6: i16, %arg7: i16) -> (i16, i16, i16, i16) {
  %c61_i16 = arith.constant 61 : i16
  %c57_i16 = arith.constant 57 : i16
  %c31_i16 = arith.constant 31 : i16
  %c30_i16 = arith.constant 30 : i16
  %c29_i16 = arith.constant 29 : i16
  %c28_i16 = arith.constant 28 : i16
  %c0 = arith.constant 0 : index
  %c8_i16 = arith.constant 8 : i16
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %from_elements = tensor.from_elements %arg4, %arg5, %arg6, %arg7 : tensor<4xi16>
  %0 = arith.muli %arg4, %c28_i16 : i16
  %1 = arith.muli %arg5, %c29_i16 : i16
  %2 = arith.addi %arg4, %arg5 : i16
  %3 = arith.muli %2, %c57_i16 : i16
  %4 = arith.subi %3, %0 : i16
  %5 = arith.subi %4, %1 : i16
  %6 = arith.muli %arg4, %c30_i16 : i16
  %7 = arith.muli %arg5, %c31_i16 : i16
  %8 = arith.muli %2, %c61_i16 : i16
  %9 = arith.subi %8, %6 : i16
  %10 = arith.subi %9, %7 : i16
  %11 = arith.muli %arg6, %c28_i16 : i16
  %12 = arith.muli %arg7, %c29_i16 : i16
  %13 = arith.addi %arg6, %arg7 : i16
  %14 = arith.muli %13, %c57_i16 : i16
  %15 = arith.subi %14, %11 : i16
  %16 = arith.subi %15, %12 : i16
  %17 = arith.addi %6, %11 : i16
  %18 = arith.addi %17, %1 : i16
  %19 = arith.addi %10, %16 : i16
  %20 = arith.trunci %0 : i16 to i8
  %21 = arith.extui %20 : i8 to i16
  %22 = arith.shrui %0, %c8_i16 : i16
  %23 = arith.trunci %5 : i16 to i8
  %24 = arith.extui %23 : i8 to i16
  %25 = arith.shrui %5, %c8_i16 : i16
  %26 = arith.trunci %18 : i16 to i8
  %27 = arith.extui %26 : i8 to i16
  %28 = arith.shrui %18, %c8_i16 : i16
  %29 = arith.trunci %19 : i16 to i8
  %30 = arith.extui %29 : i8 to i16
  %31 = arith.addi %24, %22 : i16
  %32 = arith.addi %27, %25 : i16
  %33 = arith.addi %30, %28 : i16
  return %21, %31, %32, %33 : i16, i16, i16, i16
}



//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8680) {
  %12 = "arith.muli"(%arg4, %5) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d54e0) {
  %14 = "arith.addi"(%arg4, %arg5) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8c40) {
  %18 = "arith.muli"(%arg4, %3) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tensor.from_elements'(0x5623a7569e00) {
  %11 = "tensor.from_elements"(%arg4, %arg5, %arg6, %arg7) : (i16, i16, i16, i16) -> tensor<4xi16>

  ** Erase   : 'tensor.from_elements'(0x5623a7569e00)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d7f70) {
  %10 = "arith.constant"() <{value = 3 : index}> : () -> index

  ** Erase   : 'arith.constant'(0x5623a75d7f70)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d4e70) {
  %9 = "arith.constant"() <{value = 2 : index}> : () -> index

  ** Erase   : 'arith.constant'(0x5623a75d4e70)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d4da0) {
  %8 = "arith.constant"() <{value = 1 : index}> : () -> index

  ** Erase   : 'arith.constant'(0x5623a75d4da0)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d5e20) {
  %7 = "arith.constant"() <{value = 8 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d48f0) {
  %6 = "arith.constant"() <{value = 0 : index}> : () -> index

  ** Erase   : 'arith.constant'(0x5623a75d48f0)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a759ba70) {
  %5 = "arith.constant"() <{value = 28 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75dd170) {
  %4 = "arith.constant"() <{value = 29 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75dce30) {
  %3 = "arith.constant"() <{value = 30 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75daa10) {
  %2 = "arith.constant"() <{value = 31 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a7578320) {
  %1 = "arith.constant"() <{value = 57 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'func.func'(0x5623a75797b0) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75dcfd0) {
  %0 = "arith.constant"() <{value = 61 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'func.return'(0x5623a75cef10) {
  "func.return"(%28, %38, %39, %40) : (i16, i16, i16, i16) -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75da4c0) {
  %40 = "arith.addi"(%37, %35) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75da3e0) {
  %39 = "arith.addi"(%34, %32) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75da300) {
  %38 = "arith.addi"(%31, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75da240) {
  %37 = "arith.extui"(%36) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75da180) {
  %36 = "arith.trunci"(%26) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.shrui'(0x5623a75da0a0) {
  %35 = "arith.shrui"(%25, %6) : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75d9fe0) {
  %34 = "arith.extui"(%33) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75d9f20) {
  %33 = "arith.trunci"(%25) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.shrui'(0x5623a75d9e40) {
  %32 = "arith.shrui"(%12, %6) : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75d9d80) {
  %31 = "arith.extui"(%30) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75d9cc0) {
  %30 = "arith.trunci"(%12) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.shrui'(0x5623a75d9be0) {
  %29 = "arith.shrui"(%7, %6) : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.extui'(0x5623a75d9b20) {
  %28 = "arith.extui"(%27) : (i8) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.trunci'(0x5623a75d9a60) {
  %27 = "arith.trunci"(%7) : (i16) -> i8

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d9980) {
  %26 = "arith.addi"(%17, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d98a0) {
  %25 = "arith.addi"(%24, %8) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d97c0) {
  %24 = "arith.addi"(%13, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d96e0) {
  %23 = "arith.subi"(%22, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d9600) {
  %22 = "arith.subi"(%21, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d9520) {
  %21 = "arith.muli"(%20, %1) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d9360) {
  %20 = "arith.addi"(%arg6, %arg7) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d9280) {
  %19 = "arith.muli"(%arg7, %4) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d91a0) {
  %18 = "arith.muli"(%arg6, %5) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d90c0) {
  %17 = "arith.subi"(%16, %14) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d8fe0) {
  %16 = "arith.subi"(%15, %13) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8f00) {
  %15 = "arith.muli"(%9, %0) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8cf0) {
  %14 = "arith.muli"(%arg5, %2) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8c40) {
  %13 = "arith.muli"(%arg4, %3) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d8b90) {
  %12 = "arith.subi"(%11, %8) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.subi'(0x5623a75d5780) {
  %11 = "arith.subi"(%10, %7) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d56a0) {
  %10 = "arith.muli"(%9, %1) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x5623a75d54e0) {
  %9 = "arith.addi"(%arg4, %arg5) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d5400) {
  %8 = "arith.muli"(%arg5, %4) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x5623a75d8680) {
  %7 = "arith.muli"(%arg4, %5) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75d5e20) {
  %6 = "arith.constant"() <{value = 8 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a759ba70) {
  %5 = "arith.constant"() <{value = 28 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75dd170) {
  %4 = "arith.constant"() <{value = 29 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75dce30) {
  %3 = "arith.constant"() <{value = 30 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75daa10) {
  %2 = "arith.constant"() <{value = 31 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a7578320) {
  %1 = "arith.constant"() <{value = 57 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'func.func'(0x5623a75797b0) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x5623a75dcfd0) {
  %0 = "arith.constant"() <{value = 61 : i16}> : () -> i16

} -> failure : pattern failed to match
//===-------------------------------------------===//
user: %8 = arith.muli %2, %c61_i16 : i16 0
user: %3 = arith.muli %2, %c57_i16 : i16 0
user: %14 = arith.muli %13, %c57_i16 : i16 0
user: %7 = arith.muli %arg5, %c31_i16 : i16 0
user: %6 = arith.muli %arg4, %c30_i16 : i16 0
user: %1 = arith.muli %arg5, %c29_i16 : i16 0
user: %12 = arith.muli %arg7, %c29_i16 : i16 0
user: %0 = arith.muli %arg4, %c28_i16 : i16 0
user: %11 = arith.muli %arg6, %c28_i16 : i16 0
user: %28 = arith.shrui %18, %c8_i16 : i16 0
user: %25 = arith.shrui %5, %c8_i16 : i16 0
user: %22 = arith.shrui %0, %c8_i16 : i16 0

//===-------------------------------------------===//
Legalizing operation : 'builtin.module'(0x5623a7568820) {
} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.func'(0x5623a75797b0) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.func -> ()' {
Trying to match "(anonymous namespace)::FunctionOpInterfaceSignatureConversion"
    ** Insert Block into : 'func.func'(0x5623a75797b0)
"(anonymous namespace)::FunctionOpInterfaceSignatureConversion" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'func.func'(0x5623a75797b0) {
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'builtin.module' failed to verify and will be printed in generic form
"builtin.module"() ({
  "func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
  ^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
    %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
    %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
    %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
    %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
    %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
    %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
    %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
    %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
    %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
    %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
    %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
    %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
    %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
    %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
    %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
    %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
    %16 = "arith.constant"() <{value = 61 : i16}> : () -> i16
    %17 = "arith.constant"() <{value = 57 : i16}> : () -> i16
    %18 = "arith.constant"() <{value = 31 : i16}> : () -> i16
    %19 = "arith.constant"() <{value = 30 : i16}> : () -> i16
    %20 = "arith.constant"() <{value = 29 : i16}> : () -> i16
    %21 = "arith.constant"() <{value = 28 : i16}> : () -> i16
    %22 = "arith.constant"() <{value = 8 : i16}> : () -> i16
    %23 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %24 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %20) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %25 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %26 = "arith.muli"(%25, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %27 = "arith.subi"(%26, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %28 = "arith.subi"(%27, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %29 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %30 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %31 = "arith.muli"(%25, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %32 = "arith.subi"(%31, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %33 = "arith.subi"(%32, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %34 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %35 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %20) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %36 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %37 = "arith.muli"(%36, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %38 = "arith.subi"(%37, %34) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %39 = "arith.subi"(%38, %35) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %40 = "arith.addi"(%29, %34) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %41 = "arith.addi"(%40, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %42 = "arith.addi"(%33, %39) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %43 = "arith.trunci"(%23) : (i16) -> i8
    %44 = "arith.extui"(%43) : (i8) -> i16
    %45 = "arith.shrui"(%23, %22) : (i16, i16) -> i16
    %46 = "arith.trunci"(%28) : (i16) -> i8
    %47 = "arith.extui"(%46) : (i8) -> i16
    %48 = "arith.shrui"(%28, %22) : (i16, i16) -> i16
    %49 = "arith.trunci"(%41) : (i16) -> i8
    %50 = "arith.extui"(%49) : (i8) -> i16
    %51 = "arith.shrui"(%41, %22) : (i16, i16) -> i16
    %52 = "arith.trunci"(%42) : (i16) -> i8
    %53 = "arith.extui"(%52) : (i8) -> i16
    %54 = "arith.addi"(%47, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %55 = "arith.addi"(%50, %48) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    %56 = "arith.addi"(%53, %51) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
    "func.return"(%44, %54, %55, %56) : (i16, i16, i16, i16) -> ()
  }) : () -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x5623a75dcfd0) {
  %16 = "arith.constant"() <{value = 61 : i16}> : () -> i16

user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%31 = "arith.muli"(%25, %16) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16 0
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
Trying to match "mlir::heir::arith::ConvertConstantOp"
ImplicitTypeIDRegistry::lookupOrInsert(mlir::heir::cggi::detail::CreateTrivialOpGenericAdaptorBase::Properties)
    ** Insert  : 'cggi.create_trivial'(0x5623a75dbb20)
    ** Replace : 'arith.constant'(0x5623a75dcfd0)
"mlir::heir::arith::ConvertConstantOp" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.create_trivial'(0x5623a75dbb20) {
      %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %19 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %20 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %21 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %22 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %23 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %24 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %25 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %26 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %27 = "arith.muli"(%26, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.subi"(%27, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.subi"(%28, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %20) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.muli"(%26, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.subi"(%33, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.muli"(%37, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %39 = "arith.subi"(%38, %35) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "arith.subi"(%39, %36) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %41 = "arith.addi"(%30, %35) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "arith.addi"(%41, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %43 = "arith.addi"(%34, %40) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "arith.trunci"(%24) : (i16) -> i8
  %45 = "arith.extui"(%44) : (i8) -> i16
  %46 = "arith.shrui"(%24, %23) : (i16, i16) -> i16
  %47 = "arith.trunci"(%29) : (i16) -> i8
  %48 = "arith.extui"(%47) : (i8) -> i16
  %49 = "arith.shrui"(%29, %23) : (i16, i16) -> i16
  %50 = "arith.trunci"(%42) : (i16) -> i8
  %51 = "arith.extui"(%50) : (i8) -> i16
  %52 = "arith.shrui"(%42, %23) : (i16, i16) -> i16
  %53 = "arith.trunci"(%43) : (i16) -> i8
  %54 = "arith.extui"(%53) : (i8) -> i16
  %55 = "arith.addi"(%48, %46) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "arith.addi"(%51, %49) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %57 = "arith.addi"(%54, %52) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%45, %55, %56, %57) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x5623a7578320) {
  %18 = "arith.constant"() <{value = 57 : i16}> : () -> i16

user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%27 = "arith.muli"(%26, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16 0
user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%38 = "arith.muli"(%37, %18) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16 0
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
Trying to match "mlir::heir::arith::ConvertConstantOp"
    ** Insert  : 'cggi.create_trivial'(0x5623a75dbb80)
    ** Replace : 'arith.constant'(0x5623a7578320)
"mlir::heir::arith::ConvertConstantOp" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.create_trivial'(0x5623a75dbb80) {
      %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %21 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %22 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %23 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %24 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %25 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %26 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %27 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.muli"(%27, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.subi"(%28, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.subi"(%29, %26) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %20) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.muli"(%27, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.subi"(%33, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.subi"(%34, %32) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %39 = "arith.muli"(%38, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "arith.subi"(%39, %36) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %41 = "arith.subi"(%40, %37) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "arith.addi"(%31, %36) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %43 = "arith.addi"(%42, %26) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "arith.addi"(%35, %41) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %45 = "arith.trunci"(%25) : (i16) -> i8
  %46 = "arith.extui"(%45) : (i8) -> i16
  %47 = "arith.shrui"(%25, %24) : (i16, i16) -> i16
  %48 = "arith.trunci"(%30) : (i16) -> i8
  %49 = "arith.extui"(%48) : (i8) -> i16
  %50 = "arith.shrui"(%30, %24) : (i16, i16) -> i16
  %51 = "arith.trunci"(%43) : (i16) -> i8
  %52 = "arith.extui"(%51) : (i8) -> i16
  %53 = "arith.shrui"(%43, %24) : (i16, i16) -> i16
  %54 = "arith.trunci"(%44) : (i16) -> i8
  %55 = "arith.extui"(%54) : (i8) -> i16
  %56 = "arith.addi"(%49, %47) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %57 = "arith.addi"(%52, %50) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "arith.addi"(%55, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%46, %56, %57, %58) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x5623a75daa10) {
  %20 = "arith.constant"() <{value = 31 : i16}> : () -> i16

user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%32 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %20) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16 0
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
Trying to match "mlir::heir::arith::ConvertConstantOp"
    ** Insert  : 'cggi.create_trivial'(0x5623a75dbbe0)
    ** Replace : 'arith.constant'(0x5623a75daa10)
"mlir::heir::arith::ConvertConstantOp" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.create_trivial'(0x5623a75dbbe0) {
      %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %23 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %24 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %25 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %26 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %27 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.muli"(%28, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.subi"(%29, %26) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.subi"(%30, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.muli"(%28, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.subi"(%34, %32) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.subi"(%35, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %39 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "arith.muli"(%39, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %41 = "arith.subi"(%40, %37) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "arith.subi"(%41, %38) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %43 = "arith.addi"(%32, %37) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "arith.addi"(%43, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %45 = "arith.addi"(%36, %42) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "arith.trunci"(%26) : (i16) -> i8
  %47 = "arith.extui"(%46) : (i8) -> i16
  %48 = "arith.shrui"(%26, %25) : (i16, i16) -> i16
  %49 = "arith.trunci"(%31) : (i16) -> i8
  %50 = "arith.extui"(%49) : (i8) -> i16
  %51 = "arith.shrui"(%31, %25) : (i16, i16) -> i16
  %52 = "arith.trunci"(%44) : (i16) -> i8
  %53 = "arith.extui"(%52) : (i8) -> i16
  %54 = "arith.shrui"(%44, %25) : (i16, i16) -> i16
  %55 = "arith.trunci"(%45) : (i16) -> i8
  %56 = "arith.extui"(%55) : (i8) -> i16
  %57 = "arith.addi"(%50, %48) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "arith.addi"(%53, %51) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %59 = "arith.addi"(%56, %54) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%47, %57, %58, %59) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x5623a75dce30) {
  %22 = "arith.constant"() <{value = 30 : i16}> : () -> i16

user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%32 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %22) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16 0
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
Trying to match "mlir::heir::arith::ConvertConstantOp"
    ** Insert  : 'cggi.create_trivial'(0x5623a75dbc40)
    ** Replace : 'arith.constant'(0x5623a75dce30)
"mlir::heir::arith::ConvertConstantOp" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.create_trivial'(0x5623a75dbc40) {
      %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %25 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %26 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %27 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %28 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.muli"(%29, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.subi"(%30, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.subi"(%31, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.muli"(%29, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.subi"(%35, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.subi"(%36, %34) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %39 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %41 = "arith.muli"(%40, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "arith.subi"(%41, %38) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %43 = "arith.subi"(%42, %39) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "arith.addi"(%33, %38) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %45 = "arith.addi"(%44, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "arith.addi"(%37, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %47 = "arith.trunci"(%27) : (i16) -> i8
  %48 = "arith.extui"(%47) : (i8) -> i16
  %49 = "arith.shrui"(%27, %26) : (i16, i16) -> i16
  %50 = "arith.trunci"(%32) : (i16) -> i8
  %51 = "arith.extui"(%50) : (i8) -> i16
  %52 = "arith.shrui"(%32, %26) : (i16, i16) -> i16
  %53 = "arith.trunci"(%45) : (i16) -> i8
  %54 = "arith.extui"(%53) : (i8) -> i16
  %55 = "arith.shrui"(%45, %26) : (i16, i16) -> i16
  %56 = "arith.trunci"(%46) : (i16) -> i8
  %57 = "arith.extui"(%56) : (i8) -> i16
  %58 = "arith.addi"(%51, %49) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %59 = "arith.addi"(%54, %52) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "arith.addi"(%57, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%48, %58, %59, %60) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x5623a75dd170) {
  %24 = "arith.constant"() <{value = 29 : i16}> : () -> i16

user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%28 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16 0
user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%39 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %24) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16 0
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
Trying to match "mlir::heir::arith::ConvertConstantOp"
    ** Insert  : 'cggi.create_trivial'(0x5623a75e1c70)
    ** Replace : 'arith.constant'(0x5623a75dd170)
"mlir::heir::arith::ConvertConstantOp" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.create_trivial'(0x5623a75e1c70) {
      %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %27 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %28 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %26) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %29 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.muli"(%30, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.subi"(%31, %28) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.muli"(%30, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.subi"(%36, %34) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.subi"(%37, %35) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %39 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %26) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %41 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "arith.muli"(%41, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %43 = "arith.subi"(%42, %39) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "arith.subi"(%43, %40) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %45 = "arith.addi"(%34, %39) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "arith.addi"(%45, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %47 = "arith.addi"(%38, %44) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "arith.trunci"(%28) : (i16) -> i8
  %49 = "arith.extui"(%48) : (i8) -> i16
  %50 = "arith.shrui"(%28, %27) : (i16, i16) -> i16
  %51 = "arith.trunci"(%33) : (i16) -> i8
  %52 = "arith.extui"(%51) : (i8) -> i16
  %53 = "arith.shrui"(%33, %27) : (i16, i16) -> i16
  %54 = "arith.trunci"(%46) : (i16) -> i8
  %55 = "arith.extui"(%54) : (i8) -> i16
  %56 = "arith.shrui"(%46, %27) : (i16, i16) -> i16
  %57 = "arith.trunci"(%47) : (i16) -> i8
  %58 = "arith.extui"(%57) : (i8) -> i16
  %59 = "arith.addi"(%52, %50) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "arith.addi"(%55, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %61 = "arith.addi"(%58, %56) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%49, %59, %60, %61) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x5623a759ba70) {
  %26 = "arith.constant"() <{value = 28 : i16}> : () -> i16

user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%28 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %26) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16 0
user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%39 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %26) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16 0
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
Trying to match "mlir::heir::arith::ConvertConstantOp"
    ** Insert  : 'cggi.create_trivial'(0x5623a75e1cd0)
    ** Replace : 'arith.constant'(0x5623a759ba70)
"mlir::heir::arith::ConvertConstantOp" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.create_trivial'(0x5623a75e1cd0) {
      %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %29 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %30 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.muli"(%31, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.subi"(%32, %29) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.subi"(%33, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.muli"(%31, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.subi"(%37, %35) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %39 = "arith.subi"(%38, %36) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %41 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %43 = "arith.muli"(%42, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "arith.subi"(%43, %40) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %45 = "arith.subi"(%44, %41) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "arith.addi"(%35, %40) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %47 = "arith.addi"(%46, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "arith.addi"(%39, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.trunci"(%29) : (i16) -> i8
  %50 = "arith.extui"(%49) : (i8) -> i16
  %51 = "arith.shrui"(%29, %28) : (i16, i16) -> i16
  %52 = "arith.trunci"(%34) : (i16) -> i8
  %53 = "arith.extui"(%52) : (i8) -> i16
  %54 = "arith.shrui"(%34, %28) : (i16, i16) -> i16
  %55 = "arith.trunci"(%47) : (i16) -> i8
  %56 = "arith.extui"(%55) : (i8) -> i16
  %57 = "arith.shrui"(%47, %28) : (i16, i16) -> i16
  %58 = "arith.trunci"(%48) : (i16) -> i8
  %59 = "arith.extui"(%58) : (i8) -> i16
  %60 = "arith.addi"(%53, %51) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %61 = "arith.addi"(%56, %54) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "arith.addi"(%59, %57) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%50, %60, %61, %62) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x5623a75d5e20) {
  %28 = "arith.constant"() <{value = 8 : i16}> : () -> i16

user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%57 = "arith.shrui"(%47, %28) : (i16, i16) -> i16 0
user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%54 = "arith.shrui"(%34, %28) : (i16, i16) -> i16 0
user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%51 = "arith.shrui"(%29, %28) : (i16, i16) -> i16 0
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
Trying to match "mlir::heir::arith::ConvertConstantOp"
    ** Insert  : 'cggi.create_trivial'(0x5623a75e1d30)
    ** Replace : 'arith.constant'(0x5623a75d5e20)
"mlir::heir::arith::ConvertConstantOp" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.create_trivial'(0x5623a75e1d30) {
      %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.muli"(%32, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.subi"(%33, %30) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.subi"(%34, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.muli"(%32, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %39 = "arith.subi"(%38, %36) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "arith.subi"(%39, %37) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %41 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %43 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "arith.muli"(%43, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %45 = "arith.subi"(%44, %41) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "arith.subi"(%45, %42) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %47 = "arith.addi"(%36, %41) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "arith.addi"(%47, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.addi"(%40, %46) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.trunci"(%30) : (i16) -> i8
  %51 = "arith.extui"(%50) : (i8) -> i16
  %52 = "arith.shrui"(%30, %29) : (i16, i16) -> i16
  %53 = "arith.trunci"(%35) : (i16) -> i8
  %54 = "arith.extui"(%53) : (i8) -> i16
  %55 = "arith.shrui"(%35, %29) : (i16, i16) -> i16
  %56 = "arith.trunci"(%48) : (i16) -> i8
  %57 = "arith.extui"(%56) : (i8) -> i16
  %58 = "arith.shrui"(%48, %29) : (i16, i16) -> i16
  %59 = "arith.trunci"(%49) : (i16) -> i8
  %60 = "arith.extui"(%59) : (i8) -> i16
  %61 = "arith.addi"(%54, %52) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "arith.addi"(%57, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %63 = "arith.addi"(%60, %58) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%51, %61, %62, %63) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.muli'(0x5623a75d8680) {
  %30 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.muli -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::MulIOp, mlir::heir::cggi::MulOp>"
    ** Insert  : 'cggi.mul'(0x5623a75dcaf0)
    ** Replace : 'arith.muli'(0x5623a75d8680)
"mlir::heir::ConvertBinOp<mlir::arith::MulIOp, mlir::heir::cggi::MulOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.mul'(0x5623a75dcaf0) {
      %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %33 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.muli"(%33, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.subi"(%34, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.subi"(%35, %32) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %39 = "arith.muli"(%33, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "arith.subi"(%39, %37) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %41 = "arith.subi"(%40, %38) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %45 = "arith.muli"(%44, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "arith.subi"(%45, %42) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %47 = "arith.subi"(%46, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "arith.addi"(%37, %42) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.addi"(%48, %32) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%41, %47) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.trunci"(%31) : (i16) -> i8
  %52 = "arith.extui"(%51) : (i8) -> i16
  %53 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %54 = "arith.trunci"(%36) : (i16) -> i8
  %55 = "arith.extui"(%54) : (i8) -> i16
  %56 = "arith.shrui"(%36, %29) : (i16, i16) -> i16
  %57 = "arith.trunci"(%49) : (i16) -> i8
  %58 = "arith.extui"(%57) : (i8) -> i16
  %59 = "arith.shrui"(%49, %29) : (i16, i16) -> i16
  %60 = "arith.trunci"(%50) : (i16) -> i8
  %61 = "arith.extui"(%60) : (i8) -> i16
  %62 = "arith.addi"(%55, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %63 = "arith.addi"(%58, %56) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "arith.addi"(%61, %59) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%52, %62, %63, %64) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.muli'(0x5623a75d5400) {
  %32 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.muli -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::MulIOp, mlir::heir::cggi::MulOp>"
    ** Insert  : 'cggi.mul'(0x5623a75dcbd0)
    ** Replace : 'arith.muli'(0x5623a75d5400)
"mlir::heir::ConvertBinOp<mlir::arith::MulIOp, mlir::heir::cggi::MulOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.mul'(0x5623a75dcbd0) {
      %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %35 = "arith.muli"(%34, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.subi"(%35, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.subi"(%36, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %39 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "arith.muli"(%34, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %41 = "arith.subi"(%40, %38) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "arith.subi"(%41, %39) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %45 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "arith.muli"(%45, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %47 = "arith.subi"(%46, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "arith.subi"(%47, %44) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.addi"(%38, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%49, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.addi"(%42, %48) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "arith.trunci"(%31) : (i16) -> i8
  %53 = "arith.extui"(%52) : (i8) -> i16
  %54 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %55 = "arith.trunci"(%37) : (i16) -> i8
  %56 = "arith.extui"(%55) : (i8) -> i16
  %57 = "arith.shrui"(%37, %29) : (i16, i16) -> i16
  %58 = "arith.trunci"(%50) : (i16) -> i8
  %59 = "arith.extui"(%58) : (i8) -> i16
  %60 = "arith.shrui"(%50, %29) : (i16, i16) -> i16
  %61 = "arith.trunci"(%51) : (i16) -> i8
  %62 = "arith.extui"(%61) : (i8) -> i16
  %63 = "arith.addi"(%56, %54) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "arith.addi"(%59, %57) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %65 = "arith.addi"(%62, %60) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%53, %63, %64, %65) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x5623a75d54e0) {
  %34 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::AddIOp, mlir::heir::cggi::AddOp>"
    ** Insert  : 'cggi.add'(0x5623a75dccb0)
    ** Replace : 'arith.addi'(0x5623a75d54e0)
"mlir::heir::ConvertBinOp<mlir::arith::AddIOp, mlir::heir::cggi::AddOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.add'(0x5623a75dccb0) {
      %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %37 = "arith.subi"(%36, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.subi"(%37, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %39 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %41 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "arith.subi"(%41, %39) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %43 = "arith.subi"(%42, %40) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %47 = "arith.muli"(%46, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "arith.subi"(%47, %44) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.subi"(%48, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(%39, %44) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.addi"(%50, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "arith.addi"(%43, %49) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %53 = "arith.trunci"(%31) : (i16) -> i8
  %54 = "arith.extui"(%53) : (i8) -> i16
  %55 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %56 = "arith.trunci"(%38) : (i16) -> i8
  %57 = "arith.extui"(%56) : (i8) -> i16
  %58 = "arith.shrui"(%38, %29) : (i16, i16) -> i16
  %59 = "arith.trunci"(%51) : (i16) -> i8
  %60 = "arith.extui"(%59) : (i8) -> i16
  %61 = "arith.shrui"(%51, %29) : (i16, i16) -> i16
  %62 = "arith.trunci"(%52) : (i16) -> i8
  %63 = "arith.extui"(%62) : (i8) -> i16
  %64 = "arith.addi"(%57, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %65 = "arith.addi"(%60, %58) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "arith.addi"(%63, %61) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%54, %64, %65, %66) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.muli'(0x5623a75d56a0) {
  %36 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.muli -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::MulIOp, mlir::heir::cggi::MulOp>"
    ** Insert  : 'cggi.mul'(0x5623a75d9440)
    ** Replace : 'arith.muli'(0x5623a75d56a0)
"mlir::heir::ConvertBinOp<mlir::arith::MulIOp, mlir::heir::cggi::MulOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.mul'(0x5623a75d9440) {
      %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %39 = "arith.subi"(%38, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %41 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %43 = "arith.subi"(%42, %40) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "arith.subi"(%43, %41) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %47 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "arith.muli"(%47, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.subi"(%48, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.subi"(%49, %46) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.addi"(%40, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "arith.addi"(%51, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %53 = "arith.addi"(%44, %50) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "arith.trunci"(%31) : (i16) -> i8
  %55 = "arith.extui"(%54) : (i8) -> i16
  %56 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %57 = "arith.trunci"(%39) : (i16) -> i8
  %58 = "arith.extui"(%57) : (i8) -> i16
  %59 = "arith.shrui"(%39, %29) : (i16, i16) -> i16
  %60 = "arith.trunci"(%52) : (i16) -> i8
  %61 = "arith.extui"(%60) : (i8) -> i16
  %62 = "arith.shrui"(%52, %29) : (i16, i16) -> i16
  %63 = "arith.trunci"(%53) : (i16) -> i8
  %64 = "arith.extui"(%63) : (i8) -> i16
  %65 = "arith.addi"(%58, %56) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "arith.addi"(%61, %59) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %67 = "arith.addi"(%64, %62) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%55, %65, %66, %67) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.subi'(0x5623a75d5780) {
  %38 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.subi -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::SubIOp, mlir::heir::cggi::SubOp>"
    ** Insert  : 'cggi.sub'(0x5623a75d8da0)
    ** Replace : 'arith.subi'(0x5623a75d5780)
"mlir::heir::ConvertBinOp<mlir::arith::SubIOp, mlir::heir::cggi::SubOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.sub'(0x5623a75d8da0) {
      %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %41 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %43 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "arith.subi"(%43, %41) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %45 = "arith.subi"(%44, %42) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %47 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.muli"(%48, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.subi"(%49, %46) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.subi"(%50, %47) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "arith.addi"(%41, %46) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %53 = "arith.addi"(%52, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "arith.addi"(%45, %51) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %55 = "arith.trunci"(%31) : (i16) -> i8
  %56 = "arith.extui"(%55) : (i8) -> i16
  %57 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %58 = "arith.trunci"(%40) : (i16) -> i8
  %59 = "arith.extui"(%58) : (i8) -> i16
  %60 = "arith.shrui"(%40, %29) : (i16, i16) -> i16
  %61 = "arith.trunci"(%53) : (i16) -> i8
  %62 = "arith.extui"(%61) : (i8) -> i16
  %63 = "arith.shrui"(%53, %29) : (i16, i16) -> i16
  %64 = "arith.trunci"(%54) : (i16) -> i8
  %65 = "arith.extui"(%64) : (i8) -> i16
  %66 = "arith.addi"(%59, %57) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %67 = "arith.addi"(%62, %60) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "arith.addi"(%65, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%56, %66, %67, %68) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.subi'(0x5623a75d8b90) {
  %40 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.subi -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::SubIOp, mlir::heir::cggi::SubOp>"
    ** Insert  : 'cggi.sub'(0x5623a75733b0)
    ** Replace : 'arith.subi'(0x5623a75d8b90)
"mlir::heir::ConvertBinOp<mlir::arith::SubIOp, mlir::heir::cggi::SubOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.sub'(0x5623a75733b0) {
      %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %45 = "arith.subi"(%44, %42) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "arith.subi"(%45, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %47 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.muli"(%49, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.subi"(%50, %47) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "arith.subi"(%51, %48) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %53 = "arith.addi"(%42, %47) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "arith.addi"(%53, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %55 = "arith.addi"(%46, %52) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "arith.trunci"(%31) : (i16) -> i8
  %57 = "arith.extui"(%56) : (i8) -> i16
  %58 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %59 = "arith.trunci"(%41) : (i16) -> i8
  %60 = "arith.extui"(%59) : (i8) -> i16
  %61 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %62 = "arith.trunci"(%54) : (i16) -> i8
  %63 = "arith.extui"(%62) : (i8) -> i16
  %64 = "arith.shrui"(%54, %29) : (i16, i16) -> i16
  %65 = "arith.trunci"(%55) : (i16) -> i8
  %66 = "arith.extui"(%65) : (i8) -> i16
  %67 = "arith.addi"(%60, %58) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "arith.addi"(%63, %61) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %69 = "arith.addi"(%66, %64) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%57, %67, %68, %69) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.muli'(0x5623a75d8c40) {
  %42 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.muli -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::MulIOp, mlir::heir::cggi::MulOp>"
    ** Insert  : 'cggi.mul'(0x5623a7563b40)
    ** Replace : 'arith.muli'(0x5623a75d8c40)
"mlir::heir::ConvertBinOp<mlir::arith::MulIOp, mlir::heir::cggi::MulOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.mul'(0x5623a7563b40) {
      %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %45 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "arith.subi"(%45, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %47 = "arith.subi"(%46, %44) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.muli"(%50, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "arith.subi"(%51, %48) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %53 = "arith.subi"(%52, %49) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "arith.addi"(%43, %48) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %55 = "arith.addi"(%54, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "arith.addi"(%47, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %57 = "arith.trunci"(%31) : (i16) -> i8
  %58 = "arith.extui"(%57) : (i8) -> i16
  %59 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %60 = "arith.trunci"(%41) : (i16) -> i8
  %61 = "arith.extui"(%60) : (i8) -> i16
  %62 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %63 = "arith.trunci"(%55) : (i16) -> i8
  %64 = "arith.extui"(%63) : (i8) -> i16
  %65 = "arith.shrui"(%55, %29) : (i16, i16) -> i16
  %66 = "arith.trunci"(%56) : (i16) -> i8
  %67 = "arith.extui"(%66) : (i8) -> i16
  %68 = "arith.addi"(%61, %59) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %69 = "arith.addi"(%64, %62) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %70 = "arith.addi"(%67, %65) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%58, %68, %69, %70) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.muli'(0x5623a75d8cf0) {
  %44 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.muli -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::MulIOp, mlir::heir::cggi::MulOp>"
    ** Insert  : 'cggi.mul'(0x5623a75e4080)
    ** Replace : 'arith.muli'(0x5623a75d8cf0)
"mlir::heir::ConvertBinOp<mlir::arith::MulIOp, mlir::heir::cggi::MulOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.mul'(0x5623a75e4080) {
      %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %47 = "arith.subi"(%46, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "arith.subi"(%47, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "arith.muli"(%51, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %53 = "arith.subi"(%52, %49) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "arith.subi"(%53, %50) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %55 = "arith.addi"(%43, %49) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "arith.addi"(%55, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %57 = "arith.addi"(%48, %54) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "arith.trunci"(%31) : (i16) -> i8
  %59 = "arith.extui"(%58) : (i8) -> i16
  %60 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %61 = "arith.trunci"(%41) : (i16) -> i8
  %62 = "arith.extui"(%61) : (i8) -> i16
  %63 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %64 = "arith.trunci"(%56) : (i16) -> i8
  %65 = "arith.extui"(%64) : (i8) -> i16
  %66 = "arith.shrui"(%56, %29) : (i16, i16) -> i16
  %67 = "arith.trunci"(%57) : (i16) -> i8
  %68 = "arith.extui"(%67) : (i8) -> i16
  %69 = "arith.addi"(%62, %60) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %70 = "arith.addi"(%65, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %71 = "arith.addi"(%68, %66) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%59, %69, %70, %71) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.muli'(0x5623a75d8f00) {
  %46 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.muli -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::MulIOp, mlir::heir::cggi::MulOp>"
    ** Insert  : 'cggi.mul'(0x5623a75cea90)
    ** Replace : 'arith.muli'(0x5623a75d8f00)
"mlir::heir::ConvertBinOp<mlir::arith::MulIOp, mlir::heir::cggi::MulOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.mul'(0x5623a75cea90) {
      %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %49 = "arith.subi"(%48, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %53 = "arith.muli"(%52, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "arith.subi"(%53, %50) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %55 = "arith.subi"(%54, %51) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "arith.addi"(%43, %50) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %57 = "arith.addi"(%56, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "arith.addi"(%49, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %59 = "arith.trunci"(%31) : (i16) -> i8
  %60 = "arith.extui"(%59) : (i8) -> i16
  %61 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %62 = "arith.trunci"(%41) : (i16) -> i8
  %63 = "arith.extui"(%62) : (i8) -> i16
  %64 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %65 = "arith.trunci"(%57) : (i16) -> i8
  %66 = "arith.extui"(%65) : (i8) -> i16
  %67 = "arith.shrui"(%57, %29) : (i16, i16) -> i16
  %68 = "arith.trunci"(%58) : (i16) -> i8
  %69 = "arith.extui"(%68) : (i8) -> i16
  %70 = "arith.addi"(%63, %61) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %71 = "arith.addi"(%66, %64) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %72 = "arith.addi"(%69, %67) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%60, %70, %71, %72) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.subi'(0x5623a75d8fe0) {
  %48 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.subi -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::SubIOp, mlir::heir::cggi::SubOp>"
    ** Insert  : 'cggi.sub'(0x5623a75e3e30)
    ** Replace : 'arith.subi'(0x5623a75d8fe0)
"mlir::heir::ConvertBinOp<mlir::arith::SubIOp, mlir::heir::cggi::SubOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.sub'(0x5623a75e3e30) {
      %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %51 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %53 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "arith.muli"(%53, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %55 = "arith.subi"(%54, %51) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "arith.subi"(%55, %52) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %57 = "arith.addi"(%43, %51) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "arith.addi"(%57, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %59 = "arith.addi"(%50, %56) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "arith.trunci"(%31) : (i16) -> i8
  %61 = "arith.extui"(%60) : (i8) -> i16
  %62 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %63 = "arith.trunci"(%41) : (i16) -> i8
  %64 = "arith.extui"(%63) : (i8) -> i16
  %65 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %66 = "arith.trunci"(%58) : (i16) -> i8
  %67 = "arith.extui"(%66) : (i8) -> i16
  %68 = "arith.shrui"(%58, %29) : (i16, i16) -> i16
  %69 = "arith.trunci"(%59) : (i16) -> i8
  %70 = "arith.extui"(%69) : (i8) -> i16
  %71 = "arith.addi"(%64, %62) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %72 = "arith.addi"(%67, %65) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %73 = "arith.addi"(%70, %68) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%61, %71, %72, %73) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.subi'(0x5623a75d90c0) {
  %50 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.subi -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::SubIOp, mlir::heir::cggi::SubOp>"
    ** Insert  : 'cggi.sub'(0x5623a75e25b0)
    ** Replace : 'arith.subi'(0x5623a75d90c0)
"mlir::heir::ConvertBinOp<mlir::arith::SubIOp, mlir::heir::cggi::SubOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.sub'(0x5623a75e25b0) {
      %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %55 = "arith.muli"(%54, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "arith.subi"(%55, %52) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %57 = "arith.subi"(%56, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "arith.addi"(%43, %52) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %59 = "arith.addi"(%58, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "arith.addi"(%51, %57) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %61 = "arith.trunci"(%31) : (i16) -> i8
  %62 = "arith.extui"(%61) : (i8) -> i16
  %63 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %64 = "arith.trunci"(%41) : (i16) -> i8
  %65 = "arith.extui"(%64) : (i8) -> i16
  %66 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %67 = "arith.trunci"(%59) : (i16) -> i8
  %68 = "arith.extui"(%67) : (i8) -> i16
  %69 = "arith.shrui"(%59, %29) : (i16, i16) -> i16
  %70 = "arith.trunci"(%60) : (i16) -> i8
  %71 = "arith.extui"(%70) : (i8) -> i16
  %72 = "arith.addi"(%65, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %73 = "arith.addi"(%68, %66) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %74 = "arith.addi"(%71, %69) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%62, %72, %73, %74) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.muli'(0x5623a75d91a0) {
  %52 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.muli -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::MulIOp, mlir::heir::cggi::MulOp>"
    ** Insert  : 'cggi.mul'(0x5623a75e2660)
    ** Replace : 'arith.muli'(0x5623a75d91a0)
"mlir::heir::ConvertBinOp<mlir::arith::MulIOp, mlir::heir::cggi::MulOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.mul'(0x5623a75e2660) {
      %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %55 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "arith.muli"(%55, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %57 = "arith.subi"(%56, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "arith.subi"(%57, %54) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %59 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "arith.addi"(%59, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %61 = "arith.addi"(%51, %58) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "arith.trunci"(%31) : (i16) -> i8
  %63 = "arith.extui"(%62) : (i8) -> i16
  %64 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %65 = "arith.trunci"(%41) : (i16) -> i8
  %66 = "arith.extui"(%65) : (i8) -> i16
  %67 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %68 = "arith.trunci"(%60) : (i16) -> i8
  %69 = "arith.extui"(%68) : (i8) -> i16
  %70 = "arith.shrui"(%60, %29) : (i16, i16) -> i16
  %71 = "arith.trunci"(%61) : (i16) -> i8
  %72 = "arith.extui"(%71) : (i8) -> i16
  %73 = "arith.addi"(%66, %64) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %74 = "arith.addi"(%69, %67) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %75 = "arith.addi"(%72, %70) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%63, %73, %74, %75) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.muli'(0x5623a75d9280) {
  %54 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.muli -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::MulIOp, mlir::heir::cggi::MulOp>"
    ** Insert  : 'cggi.mul'(0x5623a75e2710)
    ** Replace : 'arith.muli'(0x5623a75d9280)
"mlir::heir::ConvertBinOp<mlir::arith::MulIOp, mlir::heir::cggi::MulOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.mul'(0x5623a75e2710) {
      %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %57 = "arith.muli"(%56, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "arith.subi"(%57, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %59 = "arith.subi"(%58, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %61 = "arith.addi"(%60, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "arith.addi"(%51, %59) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %63 = "arith.trunci"(%31) : (i16) -> i8
  %64 = "arith.extui"(%63) : (i8) -> i16
  %65 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %66 = "arith.trunci"(%41) : (i16) -> i8
  %67 = "arith.extui"(%66) : (i8) -> i16
  %68 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %69 = "arith.trunci"(%61) : (i16) -> i8
  %70 = "arith.extui"(%69) : (i8) -> i16
  %71 = "arith.shrui"(%61, %29) : (i16, i16) -> i16
  %72 = "arith.trunci"(%62) : (i16) -> i8
  %73 = "arith.extui"(%72) : (i8) -> i16
  %74 = "arith.addi"(%67, %65) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %75 = "arith.addi"(%70, %68) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %76 = "arith.addi"(%73, %71) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%64, %74, %75, %76) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x5623a75d9360) {
  %56 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::AddIOp, mlir::heir::cggi::AddOp>"
    ** Insert  : 'cggi.add'(0x5623a75e3be0)
    ** Replace : 'arith.addi'(0x5623a75d9360)
"mlir::heir::ConvertBinOp<mlir::arith::AddIOp, mlir::heir::cggi::AddOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.add'(0x5623a75e3be0) {
      %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %59 = "arith.subi"(%58, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "arith.subi"(%59, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %61 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "arith.addi"(%61, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %63 = "arith.addi"(%51, %60) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "arith.trunci"(%31) : (i16) -> i8
  %65 = "arith.extui"(%64) : (i8) -> i16
  %66 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %67 = "arith.trunci"(%41) : (i16) -> i8
  %68 = "arith.extui"(%67) : (i8) -> i16
  %69 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %70 = "arith.trunci"(%62) : (i16) -> i8
  %71 = "arith.extui"(%70) : (i8) -> i16
  %72 = "arith.shrui"(%62, %29) : (i16, i16) -> i16
  %73 = "arith.trunci"(%63) : (i16) -> i8
  %74 = "arith.extui"(%73) : (i8) -> i16
  %75 = "arith.addi"(%68, %66) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %76 = "arith.addi"(%71, %69) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %77 = "arith.addi"(%74, %72) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%65, %75, %76, %77) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.muli'(0x5623a75d9520) {
  %58 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.muli -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::MulIOp, mlir::heir::cggi::MulOp>"
    ** Insert  : 'cggi.mul'(0x5623a75e27c0)
    ** Replace : 'arith.muli'(0x5623a75d9520)
"mlir::heir::ConvertBinOp<mlir::arith::MulIOp, mlir::heir::cggi::MulOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.mul'(0x5623a75e27c0) {
      %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %61 = "arith.subi"(%60, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %63 = "arith.addi"(%62, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "arith.addi"(%51, %61) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %65 = "arith.trunci"(%31) : (i16) -> i8
  %66 = "arith.extui"(%65) : (i8) -> i16
  %67 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %68 = "arith.trunci"(%41) : (i16) -> i8
  %69 = "arith.extui"(%68) : (i8) -> i16
  %70 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %71 = "arith.trunci"(%63) : (i16) -> i8
  %72 = "arith.extui"(%71) : (i8) -> i16
  %73 = "arith.shrui"(%63, %29) : (i16, i16) -> i16
  %74 = "arith.trunci"(%64) : (i16) -> i8
  %75 = "arith.extui"(%74) : (i8) -> i16
  %76 = "arith.addi"(%69, %67) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %77 = "arith.addi"(%72, %70) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %78 = "arith.addi"(%75, %73) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%66, %76, %77, %78) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.subi'(0x5623a75d9600) {
  %60 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.subi -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::SubIOp, mlir::heir::cggi::SubOp>"
    ** Insert  : 'cggi.sub'(0x5623a75e38e0)
    ** Replace : 'arith.subi'(0x5623a75d9600)
"mlir::heir::ConvertBinOp<mlir::arith::SubIOp, mlir::heir::cggi::SubOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.sub'(0x5623a75e38e0) {
      %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %63 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "arith.addi"(%63, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %65 = "arith.addi"(%51, %62) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "arith.trunci"(%31) : (i16) -> i8
  %67 = "arith.extui"(%66) : (i8) -> i16
  %68 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %69 = "arith.trunci"(%41) : (i16) -> i8
  %70 = "arith.extui"(%69) : (i8) -> i16
  %71 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %72 = "arith.trunci"(%64) : (i16) -> i8
  %73 = "arith.extui"(%72) : (i8) -> i16
  %74 = "arith.shrui"(%64, %29) : (i16, i16) -> i16
  %75 = "arith.trunci"(%65) : (i16) -> i8
  %76 = "arith.extui"(%75) : (i8) -> i16
  %77 = "arith.addi"(%70, %68) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %78 = "arith.addi"(%73, %71) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %79 = "arith.addi"(%76, %74) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%67, %77, %78, %79) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.subi'(0x5623a75d96e0) {
  %62 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.subi -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::SubIOp, mlir::heir::cggi::SubOp>"
    ** Insert  : 'cggi.sub'(0x5623a75e2870)
    ** Replace : 'arith.subi'(0x5623a75d96e0)
"mlir::heir::ConvertBinOp<mlir::arith::SubIOp, mlir::heir::cggi::SubOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.sub'(0x5623a75e2870) {
      %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %65 = "arith.addi"(%64, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %67 = "arith.trunci"(%31) : (i16) -> i8
  %68 = "arith.extui"(%67) : (i8) -> i16
  %69 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %70 = "arith.trunci"(%41) : (i16) -> i8
  %71 = "arith.extui"(%70) : (i8) -> i16
  %72 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %73 = "arith.trunci"(%65) : (i16) -> i8
  %74 = "arith.extui"(%73) : (i8) -> i16
  %75 = "arith.shrui"(%65, %29) : (i16, i16) -> i16
  %76 = "arith.trunci"(%66) : (i16) -> i8
  %77 = "arith.extui"(%76) : (i8) -> i16
  %78 = "arith.addi"(%71, %69) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %79 = "arith.addi"(%74, %72) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %80 = "arith.addi"(%77, %75) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%68, %78, %79, %80) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x5623a75d97c0) {
  %64 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::AddIOp, mlir::heir::cggi::AddOp>"
    ** Insert  : 'cggi.add'(0x5623a75e2920)
    ** Replace : 'arith.addi'(0x5623a75d97c0)
"mlir::heir::ConvertBinOp<mlir::arith::AddIOp, mlir::heir::cggi::AddOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.add'(0x5623a75e2920) {
      %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %65 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %67 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "arith.trunci"(%31) : (i16) -> i8
  %69 = "arith.extui"(%68) : (i8) -> i16
  %70 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %71 = "arith.trunci"(%41) : (i16) -> i8
  %72 = "arith.extui"(%71) : (i8) -> i16
  %73 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %74 = "arith.trunci"(%66) : (i16) -> i8
  %75 = "arith.extui"(%74) : (i8) -> i16
  %76 = "arith.shrui"(%66, %29) : (i16, i16) -> i16
  %77 = "arith.trunci"(%67) : (i16) -> i8
  %78 = "arith.extui"(%77) : (i8) -> i16
  %79 = "arith.addi"(%72, %70) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %80 = "arith.addi"(%75, %73) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %81 = "arith.addi"(%78, %76) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%69, %79, %80, %81) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x5623a75d98a0) {
  %66 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::AddIOp, mlir::heir::cggi::AddOp>"
    ** Insert  : 'cggi.add'(0x5623a75e29d0)
    ** Replace : 'arith.addi'(0x5623a75d98a0)
"mlir::heir::ConvertBinOp<mlir::arith::AddIOp, mlir::heir::cggi::AddOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.add'(0x5623a75e29d0) {
      %66 = "cggi.add"(%64, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %65 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "cggi.add"(%64, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %67 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %69 = "arith.trunci"(%31) : (i16) -> i8
  %70 = "arith.extui"(%69) : (i8) -> i16
  %71 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %72 = "arith.trunci"(%41) : (i16) -> i8
  %73 = "arith.extui"(%72) : (i8) -> i16
  %74 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %75 = "arith.trunci"(%67) : (i16) -> i8
  %76 = "arith.extui"(%75) : (i8) -> i16
  %77 = "arith.shrui"(%67, %29) : (i16, i16) -> i16
  %78 = "arith.trunci"(%68) : (i16) -> i8
  %79 = "arith.extui"(%78) : (i8) -> i16
  %80 = "arith.addi"(%73, %71) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %81 = "arith.addi"(%76, %74) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %82 = "arith.addi"(%79, %77) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%70, %80, %81, %82) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x5623a75d9980) {
  %68 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::AddIOp, mlir::heir::cggi::AddOp>"
    ** Insert  : 'cggi.add'(0x5623a75e32c0)
    ** Replace : 'arith.addi'(0x5623a75d9980)
"mlir::heir::ConvertBinOp<mlir::arith::AddIOp, mlir::heir::cggi::AddOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.add'(0x5623a75e32c0) {
      %68 = "cggi.add"(%50, %62) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %65 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "cggi.add"(%64, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %67 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "cggi.add"(%50, %62) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %69 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %70 = "arith.trunci"(%31) : (i16) -> i8
  %71 = "arith.extui"(%70) : (i8) -> i16
  %72 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %73 = "arith.trunci"(%41) : (i16) -> i8
  %74 = "arith.extui"(%73) : (i8) -> i16
  %75 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %76 = "arith.trunci"(%67) : (i16) -> i8
  %77 = "arith.extui"(%76) : (i8) -> i16
  %78 = "arith.shrui"(%67, %29) : (i16, i16) -> i16
  %79 = "arith.trunci"(%69) : (i16) -> i8
  %80 = "arith.extui"(%79) : (i8) -> i16
  %81 = "arith.addi"(%74, %72) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %82 = "arith.addi"(%77, %75) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %83 = "arith.addi"(%80, %78) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%71, %81, %82, %83) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.trunci'(0x5623a75d9a60) {
  %70 = "arith.trunci"(%31) : (i16) -> i8

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.trunci -> ()' {
Trying to match "mlir::heir::arith::ConvertTruncIOp"
    ** Insert  : 'arith.constant'(0x5623a75dbea0)
    ** Insert  : 'cggi.shr'(0x5623a75e2ef0)
    ** Insert  : 'cggi.cast'(0x5623a75e3ff0)
    ** Replace : 'arith.trunci'(0x5623a75d9a60)
"mlir::heir::arith::ConvertTruncIOp" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x5623a75dbea0) {
      %70 = "arith.constant"() <{value = 8 : i8}> : () -> i8

user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%71 = "cggi.shr"(%30, %70) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>> 1
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.shr'(0x5623a75e2ef0) {
      %71 = "cggi.shr"(%30, %70) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.cast'(0x5623a75e3ff0) {
      %72 = "cggi.cast"(%30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %65 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "cggi.add"(%64, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %67 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "cggi.add"(%50, %62) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %69 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %70 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %71 = "cggi.shr"(%30, %70) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %72 = "cggi.cast"(%30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %73 = "arith.trunci"(%31) : (i16) -> i8
  %74 = "arith.extui"(%73) : (i8) -> i16
  %75 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %76 = "arith.trunci"(%41) : (i16) -> i8
  %77 = "arith.extui"(%76) : (i8) -> i16
  %78 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %79 = "arith.trunci"(%67) : (i16) -> i8
  %80 = "arith.extui"(%79) : (i8) -> i16
  %81 = "arith.shrui"(%67, %29) : (i16, i16) -> i16
  %82 = "arith.trunci"(%69) : (i16) -> i8
  %83 = "arith.extui"(%82) : (i8) -> i16
  %84 = "arith.addi"(%77, %75) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %85 = "arith.addi"(%80, %78) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %86 = "arith.addi"(%83, %81) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%74, %84, %85, %86) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.extui'(0x5623a75d9b20) {
  %74 = "arith.extui"(%73) : (i8) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.extui -> ()' {
Trying to match "mlir::heir::arith::ConvertExtUIOp"
    ** Insert  : 'cggi.cast'(0x5623a75d0800)
    ** Replace : 'arith.extui'(0x5623a75d9b20)
"mlir::heir::arith::ConvertExtUIOp" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.cast'(0x5623a75d0800) {
      %74 = "cggi.cast"(%72) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %65 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "cggi.add"(%64, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %67 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "cggi.add"(%50, %62) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %69 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %70 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %71 = "cggi.shr"(%30, %70) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %72 = "cggi.cast"(%30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %73 = "arith.trunci"(%31) : (i16) -> i8
  %74 = "cggi.cast"(%72) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %75 = "arith.extui"(%73) : (i8) -> i16
  %76 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %77 = "arith.trunci"(%41) : (i16) -> i8
  %78 = "arith.extui"(%77) : (i8) -> i16
  %79 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %80 = "arith.trunci"(%67) : (i16) -> i8
  %81 = "arith.extui"(%80) : (i8) -> i16
  %82 = "arith.shrui"(%67, %29) : (i16, i16) -> i16
  %83 = "arith.trunci"(%69) : (i16) -> i8
  %84 = "arith.extui"(%83) : (i8) -> i16
  %85 = "arith.addi"(%78, %76) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %86 = "arith.addi"(%81, %79) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %87 = "arith.addi"(%84, %82) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%75, %85, %86, %87) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.shrui'(0x5623a75d9be0) {
  %76 = "arith.shrui"(%31, %29) : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.shrui -> ()' {
Trying to match "mlir::heir::arith::ConvertShRUIOp"
    ** Insert  : 'arith.constant'(0x5623a75cf9e0)
    ** Insert  : 'cggi.shr'(0x5623a75e3120)
    ** Replace : 'arith.shrui'(0x5623a75d9be0)
"mlir::heir::arith::ConvertShRUIOp" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x5623a75cf9e0) {
      %76 = "arith.constant"() <{value = 8 : i8}> : () -> i8

user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%77 = "cggi.shr"(%30, %76) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>> 1
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.shr'(0x5623a75e3120) {
      %77 = "cggi.shr"(%30, %76) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %65 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "cggi.add"(%64, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %67 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "cggi.add"(%50, %62) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %69 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %70 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %71 = "cggi.shr"(%30, %70) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %72 = "cggi.cast"(%30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %73 = "arith.trunci"(%31) : (i16) -> i8
  %74 = "cggi.cast"(%72) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %75 = "arith.extui"(%73) : (i8) -> i16
  %76 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %77 = "cggi.shr"(%30, %76) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %78 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %79 = "arith.trunci"(%41) : (i16) -> i8
  %80 = "arith.extui"(%79) : (i8) -> i16
  %81 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %82 = "arith.trunci"(%67) : (i16) -> i8
  %83 = "arith.extui"(%82) : (i8) -> i16
  %84 = "arith.shrui"(%67, %29) : (i16, i16) -> i16
  %85 = "arith.trunci"(%69) : (i16) -> i8
  %86 = "arith.extui"(%85) : (i8) -> i16
  %87 = "arith.addi"(%80, %78) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %88 = "arith.addi"(%83, %81) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %89 = "arith.addi"(%86, %84) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%75, %87, %88, %89) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.trunci'(0x5623a75d9cc0) {
  %79 = "arith.trunci"(%41) : (i16) -> i8

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.trunci -> ()' {
Trying to match "mlir::heir::arith::ConvertTruncIOp"
    ** Insert  : 'arith.constant'(0x5623a75ceb90)
    ** Insert  : 'cggi.shr'(0x5623a75e6f10)
    ** Insert  : 'cggi.cast'(0x5623a75e3090)
    ** Replace : 'arith.trunci'(0x5623a75d9cc0)
"mlir::heir::arith::ConvertTruncIOp" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x5623a75ceb90) {
      %79 = "arith.constant"() <{value = 8 : i8}> : () -> i8

user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%80 = "cggi.shr"(%40, %79) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>> 1
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.shr'(0x5623a75e6f10) {
      %80 = "cggi.shr"(%40, %79) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.cast'(0x5623a75e3090) {
      %81 = "cggi.cast"(%40) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %65 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "cggi.add"(%64, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %67 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "cggi.add"(%50, %62) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %69 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %70 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %71 = "cggi.shr"(%30, %70) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %72 = "cggi.cast"(%30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %73 = "arith.trunci"(%31) : (i16) -> i8
  %74 = "cggi.cast"(%72) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %75 = "arith.extui"(%73) : (i8) -> i16
  %76 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %77 = "cggi.shr"(%30, %76) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %78 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %79 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %80 = "cggi.shr"(%40, %79) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %81 = "cggi.cast"(%40) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %82 = "arith.trunci"(%41) : (i16) -> i8
  %83 = "arith.extui"(%82) : (i8) -> i16
  %84 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %85 = "arith.trunci"(%67) : (i16) -> i8
  %86 = "arith.extui"(%85) : (i8) -> i16
  %87 = "arith.shrui"(%67, %29) : (i16, i16) -> i16
  %88 = "arith.trunci"(%69) : (i16) -> i8
  %89 = "arith.extui"(%88) : (i8) -> i16
  %90 = "arith.addi"(%83, %78) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %91 = "arith.addi"(%86, %84) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %92 = "arith.addi"(%89, %87) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%75, %90, %91, %92) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.extui'(0x5623a75d9d80) {
  %83 = "arith.extui"(%82) : (i8) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.extui -> ()' {
Trying to match "mlir::heir::arith::ConvertExtUIOp"
    ** Insert  : 'cggi.cast'(0x5623a75e8080)
    ** Replace : 'arith.extui'(0x5623a75d9d80)
"mlir::heir::arith::ConvertExtUIOp" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.cast'(0x5623a75e8080) {
      %83 = "cggi.cast"(%81) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %65 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "cggi.add"(%64, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %67 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "cggi.add"(%50, %62) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %69 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %70 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %71 = "cggi.shr"(%30, %70) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %72 = "cggi.cast"(%30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %73 = "arith.trunci"(%31) : (i16) -> i8
  %74 = "cggi.cast"(%72) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %75 = "arith.extui"(%73) : (i8) -> i16
  %76 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %77 = "cggi.shr"(%30, %76) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %78 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %79 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %80 = "cggi.shr"(%40, %79) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %81 = "cggi.cast"(%40) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %82 = "arith.trunci"(%41) : (i16) -> i8
  %83 = "cggi.cast"(%81) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %84 = "arith.extui"(%82) : (i8) -> i16
  %85 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %86 = "arith.trunci"(%67) : (i16) -> i8
  %87 = "arith.extui"(%86) : (i8) -> i16
  %88 = "arith.shrui"(%67, %29) : (i16, i16) -> i16
  %89 = "arith.trunci"(%69) : (i16) -> i8
  %90 = "arith.extui"(%89) : (i8) -> i16
  %91 = "arith.addi"(%84, %78) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %92 = "arith.addi"(%87, %85) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %93 = "arith.addi"(%90, %88) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%75, %91, %92, %93) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.shrui'(0x5623a75d9e40) {
  %85 = "arith.shrui"(%41, %29) : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.shrui -> ()' {
Trying to match "mlir::heir::arith::ConvertShRUIOp"
    ** Insert  : 'arith.constant'(0x5623a75e7f90)
    ** Insert  : 'cggi.shr'(0x5623a75e48b0)
    ** Replace : 'arith.shrui'(0x5623a75d9e40)
"mlir::heir::arith::ConvertShRUIOp" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x5623a75e7f90) {
      %85 = "arith.constant"() <{value = 8 : i8}> : () -> i8

user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%86 = "cggi.shr"(%40, %85) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>> 1
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.shr'(0x5623a75e48b0) {
      %86 = "cggi.shr"(%40, %85) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %65 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "cggi.add"(%64, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %67 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "cggi.add"(%50, %62) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %69 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %70 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %71 = "cggi.shr"(%30, %70) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %72 = "cggi.cast"(%30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %73 = "arith.trunci"(%31) : (i16) -> i8
  %74 = "cggi.cast"(%72) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %75 = "arith.extui"(%73) : (i8) -> i16
  %76 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %77 = "cggi.shr"(%30, %76) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %78 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %79 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %80 = "cggi.shr"(%40, %79) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %81 = "cggi.cast"(%40) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %82 = "arith.trunci"(%41) : (i16) -> i8
  %83 = "cggi.cast"(%81) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %84 = "arith.extui"(%82) : (i8) -> i16
  %85 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %86 = "cggi.shr"(%40, %85) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %87 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %88 = "arith.trunci"(%67) : (i16) -> i8
  %89 = "arith.extui"(%88) : (i8) -> i16
  %90 = "arith.shrui"(%67, %29) : (i16, i16) -> i16
  %91 = "arith.trunci"(%69) : (i16) -> i8
  %92 = "arith.extui"(%91) : (i8) -> i16
  %93 = "arith.addi"(%84, %78) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %94 = "arith.addi"(%89, %87) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %95 = "arith.addi"(%92, %90) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%75, %93, %94, %95) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.trunci'(0x5623a75d9f20) {
  %88 = "arith.trunci"(%67) : (i16) -> i8

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.trunci -> ()' {
Trying to match "mlir::heir::arith::ConvertTruncIOp"
    ** Insert  : 'arith.constant'(0x5623a75e6dd0)
    ** Insert  : 'cggi.shr'(0x5623a75e4960)
    ** Insert  : 'cggi.cast'(0x5623a75e7f00)
    ** Replace : 'arith.trunci'(0x5623a75d9f20)
"mlir::heir::arith::ConvertTruncIOp" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x5623a75e6dd0) {
      %88 = "arith.constant"() <{value = 8 : i8}> : () -> i8

user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%89 = "cggi.shr"(%66, %88) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>> 1
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.shr'(0x5623a75e4960) {
      %89 = "cggi.shr"(%66, %88) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.cast'(0x5623a75e7f00) {
      %90 = "cggi.cast"(%66) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %65 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "cggi.add"(%64, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %67 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "cggi.add"(%50, %62) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %69 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %70 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %71 = "cggi.shr"(%30, %70) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %72 = "cggi.cast"(%30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %73 = "arith.trunci"(%31) : (i16) -> i8
  %74 = "cggi.cast"(%72) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %75 = "arith.extui"(%73) : (i8) -> i16
  %76 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %77 = "cggi.shr"(%30, %76) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %78 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %79 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %80 = "cggi.shr"(%40, %79) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %81 = "cggi.cast"(%40) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %82 = "arith.trunci"(%41) : (i16) -> i8
  %83 = "cggi.cast"(%81) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %84 = "arith.extui"(%82) : (i8) -> i16
  %85 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %86 = "cggi.shr"(%40, %85) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %87 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %88 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %89 = "cggi.shr"(%66, %88) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %90 = "cggi.cast"(%66) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %91 = "arith.trunci"(%67) : (i16) -> i8
  %92 = "arith.extui"(%91) : (i8) -> i16
  %93 = "arith.shrui"(%67, %29) : (i16, i16) -> i16
  %94 = "arith.trunci"(%69) : (i16) -> i8
  %95 = "arith.extui"(%94) : (i8) -> i16
  %96 = "arith.addi"(%84, %78) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %97 = "arith.addi"(%92, %87) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %98 = "arith.addi"(%95, %93) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%75, %96, %97, %98) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.extui'(0x5623a75d9fe0) {
  %92 = "arith.extui"(%91) : (i8) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.extui -> ()' {
Trying to match "mlir::heir::arith::ConvertExtUIOp"
    ** Insert  : 'cggi.cast'(0x5623a75e68d0)
    ** Replace : 'arith.extui'(0x5623a75d9fe0)
"mlir::heir::arith::ConvertExtUIOp" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.cast'(0x5623a75e68d0) {
      %92 = "cggi.cast"(%90) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %65 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "cggi.add"(%64, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %67 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "cggi.add"(%50, %62) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %69 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %70 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %71 = "cggi.shr"(%30, %70) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %72 = "cggi.cast"(%30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %73 = "arith.trunci"(%31) : (i16) -> i8
  %74 = "cggi.cast"(%72) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %75 = "arith.extui"(%73) : (i8) -> i16
  %76 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %77 = "cggi.shr"(%30, %76) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %78 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %79 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %80 = "cggi.shr"(%40, %79) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %81 = "cggi.cast"(%40) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %82 = "arith.trunci"(%41) : (i16) -> i8
  %83 = "cggi.cast"(%81) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %84 = "arith.extui"(%82) : (i8) -> i16
  %85 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %86 = "cggi.shr"(%40, %85) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %87 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %88 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %89 = "cggi.shr"(%66, %88) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %90 = "cggi.cast"(%66) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %91 = "arith.trunci"(%67) : (i16) -> i8
  %92 = "cggi.cast"(%90) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %93 = "arith.extui"(%91) : (i8) -> i16
  %94 = "arith.shrui"(%67, %29) : (i16, i16) -> i16
  %95 = "arith.trunci"(%69) : (i16) -> i8
  %96 = "arith.extui"(%95) : (i8) -> i16
  %97 = "arith.addi"(%84, %78) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %98 = "arith.addi"(%93, %87) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %99 = "arith.addi"(%96, %94) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%75, %97, %98, %99) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.shrui'(0x5623a75da0a0) {
  %94 = "arith.shrui"(%67, %29) : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.shrui -> ()' {
Trying to match "mlir::heir::arith::ConvertShRUIOp"
    ** Insert  : 'arith.constant'(0x5623a75e81a0)
    ** Insert  : 'cggi.shr'(0x5623a75e8210)
    ** Replace : 'arith.shrui'(0x5623a75da0a0)
"mlir::heir::arith::ConvertShRUIOp" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x5623a75e81a0) {
      %94 = "arith.constant"() <{value = 8 : i8}> : () -> i8

user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%95 = "cggi.shr"(%66, %94) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>> 1
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.shr'(0x5623a75e8210) {
      %95 = "cggi.shr"(%66, %94) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %65 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "cggi.add"(%64, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %67 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "cggi.add"(%50, %62) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %69 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %70 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %71 = "cggi.shr"(%30, %70) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %72 = "cggi.cast"(%30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %73 = "arith.trunci"(%31) : (i16) -> i8
  %74 = "cggi.cast"(%72) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %75 = "arith.extui"(%73) : (i8) -> i16
  %76 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %77 = "cggi.shr"(%30, %76) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %78 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %79 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %80 = "cggi.shr"(%40, %79) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %81 = "cggi.cast"(%40) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %82 = "arith.trunci"(%41) : (i16) -> i8
  %83 = "cggi.cast"(%81) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %84 = "arith.extui"(%82) : (i8) -> i16
  %85 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %86 = "cggi.shr"(%40, %85) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %87 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %88 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %89 = "cggi.shr"(%66, %88) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %90 = "cggi.cast"(%66) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %91 = "arith.trunci"(%67) : (i16) -> i8
  %92 = "cggi.cast"(%90) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %93 = "arith.extui"(%91) : (i8) -> i16
  %94 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %95 = "cggi.shr"(%66, %94) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %96 = "arith.shrui"(%67, %29) : (i16, i16) -> i16
  %97 = "arith.trunci"(%69) : (i16) -> i8
  %98 = "arith.extui"(%97) : (i8) -> i16
  %99 = "arith.addi"(%84, %78) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %100 = "arith.addi"(%93, %87) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %101 = "arith.addi"(%98, %96) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%75, %99, %100, %101) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.trunci'(0x5623a75da180) {
  %97 = "arith.trunci"(%69) : (i16) -> i8

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.trunci -> ()' {
Trying to match "mlir::heir::arith::ConvertTruncIOp"
    ** Insert  : 'arith.constant'(0x5623a75e9360)
    ** Insert  : 'cggi.shr'(0x5623a75e93d0)
    ** Insert  : 'cggi.cast'(0x5623a75e97c0)
    ** Replace : 'arith.trunci'(0x5623a75da180)
"mlir::heir::arith::ConvertTruncIOp" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x5623a75e9360) {
      %97 = "arith.constant"() <{value = 8 : i8}> : () -> i8

user: type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
%98 = "cggi.shr"(%68, %97) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>> 1
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.shr'(0x5623a75e93d0) {
      %98 = "cggi.shr"(%68, %97) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.cast'(0x5623a75e97c0) {
      %99 = "cggi.cast"(%68) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %65 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "cggi.add"(%64, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %67 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "cggi.add"(%50, %62) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %69 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %70 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %71 = "cggi.shr"(%30, %70) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %72 = "cggi.cast"(%30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %73 = "arith.trunci"(%31) : (i16) -> i8
  %74 = "cggi.cast"(%72) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %75 = "arith.extui"(%73) : (i8) -> i16
  %76 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %77 = "cggi.shr"(%30, %76) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %78 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %79 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %80 = "cggi.shr"(%40, %79) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %81 = "cggi.cast"(%40) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %82 = "arith.trunci"(%41) : (i16) -> i8
  %83 = "cggi.cast"(%81) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %84 = "arith.extui"(%82) : (i8) -> i16
  %85 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %86 = "cggi.shr"(%40, %85) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %87 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %88 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %89 = "cggi.shr"(%66, %88) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %90 = "cggi.cast"(%66) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %91 = "arith.trunci"(%67) : (i16) -> i8
  %92 = "cggi.cast"(%90) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %93 = "arith.extui"(%91) : (i8) -> i16
  %94 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %95 = "cggi.shr"(%66, %94) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %96 = "arith.shrui"(%67, %29) : (i16, i16) -> i16
  %97 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %98 = "cggi.shr"(%68, %97) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %99 = "cggi.cast"(%68) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %100 = "arith.trunci"(%69) : (i16) -> i8
  %101 = "arith.extui"(%100) : (i8) -> i16
  %102 = "arith.addi"(%84, %78) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %103 = "arith.addi"(%93, %87) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %104 = "arith.addi"(%101, %96) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%75, %102, %103, %104) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.extui'(0x5623a75da240) {
  %101 = "arith.extui"(%100) : (i8) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.extui -> ()' {
Trying to match "mlir::heir::arith::ConvertExtUIOp"
    ** Insert  : 'cggi.cast'(0x5623a75e6640)
    ** Replace : 'arith.extui'(0x5623a75da240)
"mlir::heir::arith::ConvertExtUIOp" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.cast'(0x5623a75e6640) {
      %101 = "cggi.cast"(%99) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %65 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "cggi.add"(%64, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %67 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "cggi.add"(%50, %62) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %69 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %70 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %71 = "cggi.shr"(%30, %70) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %72 = "cggi.cast"(%30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %73 = "arith.trunci"(%31) : (i16) -> i8
  %74 = "cggi.cast"(%72) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %75 = "arith.extui"(%73) : (i8) -> i16
  %76 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %77 = "cggi.shr"(%30, %76) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %78 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %79 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %80 = "cggi.shr"(%40, %79) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %81 = "cggi.cast"(%40) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %82 = "arith.trunci"(%41) : (i16) -> i8
  %83 = "cggi.cast"(%81) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %84 = "arith.extui"(%82) : (i8) -> i16
  %85 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %86 = "cggi.shr"(%40, %85) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %87 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %88 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %89 = "cggi.shr"(%66, %88) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %90 = "cggi.cast"(%66) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %91 = "arith.trunci"(%67) : (i16) -> i8
  %92 = "cggi.cast"(%90) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %93 = "arith.extui"(%91) : (i8) -> i16
  %94 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %95 = "cggi.shr"(%66, %94) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %96 = "arith.shrui"(%67, %29) : (i16, i16) -> i16
  %97 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %98 = "cggi.shr"(%68, %97) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %99 = "cggi.cast"(%68) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %100 = "arith.trunci"(%69) : (i16) -> i8
  %101 = "cggi.cast"(%99) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %102 = "arith.extui"(%100) : (i8) -> i16
  %103 = "arith.addi"(%84, %78) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %104 = "arith.addi"(%93, %87) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %105 = "arith.addi"(%102, %96) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%75, %103, %104, %105) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x5623a75da300) {
  %103 = "arith.addi"(%84, %78) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::AddIOp, mlir::heir::cggi::AddOp>"
    ** Insert  : 'cggi.add'(0x5623a75e6790)
    ** Replace : 'arith.addi'(0x5623a75da300)
"mlir::heir::ConvertBinOp<mlir::arith::AddIOp, mlir::heir::cggi::AddOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.add'(0x5623a75e6790) {
      %103 = "cggi.add"(%83, %77) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %65 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "cggi.add"(%64, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %67 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "cggi.add"(%50, %62) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %69 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %70 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %71 = "cggi.shr"(%30, %70) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %72 = "cggi.cast"(%30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %73 = "arith.trunci"(%31) : (i16) -> i8
  %74 = "cggi.cast"(%72) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %75 = "arith.extui"(%73) : (i8) -> i16
  %76 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %77 = "cggi.shr"(%30, %76) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %78 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %79 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %80 = "cggi.shr"(%40, %79) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %81 = "cggi.cast"(%40) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %82 = "arith.trunci"(%41) : (i16) -> i8
  %83 = "cggi.cast"(%81) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %84 = "arith.extui"(%82) : (i8) -> i16
  %85 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %86 = "cggi.shr"(%40, %85) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %87 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %88 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %89 = "cggi.shr"(%66, %88) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %90 = "cggi.cast"(%66) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %91 = "arith.trunci"(%67) : (i16) -> i8
  %92 = "cggi.cast"(%90) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %93 = "arith.extui"(%91) : (i8) -> i16
  %94 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %95 = "cggi.shr"(%66, %94) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %96 = "arith.shrui"(%67, %29) : (i16, i16) -> i16
  %97 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %98 = "cggi.shr"(%68, %97) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %99 = "cggi.cast"(%68) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %100 = "arith.trunci"(%69) : (i16) -> i8
  %101 = "cggi.cast"(%99) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %102 = "arith.extui"(%100) : (i8) -> i16
  %103 = "cggi.add"(%83, %77) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %104 = "arith.addi"(%84, %78) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %105 = "arith.addi"(%93, %87) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %106 = "arith.addi"(%102, %96) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%75, %104, %105, %106) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x5623a75da3e0) {
  %105 = "arith.addi"(%93, %87) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::AddIOp, mlir::heir::cggi::AddOp>"
    ** Insert  : 'cggi.add'(0x5623a75db800)
    ** Replace : 'arith.addi'(0x5623a75da3e0)
"mlir::heir::ConvertBinOp<mlir::arith::AddIOp, mlir::heir::cggi::AddOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.add'(0x5623a75db800) {
      %105 = "cggi.add"(%92, %86) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %65 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "cggi.add"(%64, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %67 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "cggi.add"(%50, %62) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %69 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %70 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %71 = "cggi.shr"(%30, %70) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %72 = "cggi.cast"(%30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %73 = "arith.trunci"(%31) : (i16) -> i8
  %74 = "cggi.cast"(%72) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %75 = "arith.extui"(%73) : (i8) -> i16
  %76 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %77 = "cggi.shr"(%30, %76) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %78 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %79 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %80 = "cggi.shr"(%40, %79) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %81 = "cggi.cast"(%40) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %82 = "arith.trunci"(%41) : (i16) -> i8
  %83 = "cggi.cast"(%81) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %84 = "arith.extui"(%82) : (i8) -> i16
  %85 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %86 = "cggi.shr"(%40, %85) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %87 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %88 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %89 = "cggi.shr"(%66, %88) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %90 = "cggi.cast"(%66) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %91 = "arith.trunci"(%67) : (i16) -> i8
  %92 = "cggi.cast"(%90) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %93 = "arith.extui"(%91) : (i8) -> i16
  %94 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %95 = "cggi.shr"(%66, %94) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %96 = "arith.shrui"(%67, %29) : (i16, i16) -> i16
  %97 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %98 = "cggi.shr"(%68, %97) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %99 = "cggi.cast"(%68) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %100 = "arith.trunci"(%69) : (i16) -> i8
  %101 = "cggi.cast"(%99) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %102 = "arith.extui"(%100) : (i8) -> i16
  %103 = "cggi.add"(%83, %77) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %104 = "arith.addi"(%84, %78) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %105 = "cggi.add"(%92, %86) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %106 = "arith.addi"(%93, %87) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %107 = "arith.addi"(%102, %96) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%75, %104, %106, %107) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x5623a75da4c0) {
  %107 = "arith.addi"(%102, %96) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
Trying to match "mlir::heir::ConvertBinOp<mlir::arith::AddIOp, mlir::heir::cggi::AddOp>"
    ** Insert  : 'cggi.add'(0x5623a75db910)
    ** Replace : 'arith.addi'(0x5623a75da4c0)
"mlir::heir::ConvertBinOp<mlir::arith::AddIOp, mlir::heir::cggi::AddOp>" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'cggi.add'(0x5623a75db910) {
      %107 = "cggi.add"(%101, %95) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
type of return operand 0 ('i16') doesn't match function result type ('!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>') in function @test_simple_split
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %65 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "cggi.add"(%64, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %67 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "cggi.add"(%50, %62) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %69 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %70 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %71 = "cggi.shr"(%30, %70) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %72 = "cggi.cast"(%30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %73 = "arith.trunci"(%31) : (i16) -> i8
  %74 = "cggi.cast"(%72) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %75 = "arith.extui"(%73) : (i8) -> i16
  %76 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %77 = "cggi.shr"(%30, %76) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %78 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %79 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %80 = "cggi.shr"(%40, %79) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %81 = "cggi.cast"(%40) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %82 = "arith.trunci"(%41) : (i16) -> i8
  %83 = "cggi.cast"(%81) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %84 = "arith.extui"(%82) : (i8) -> i16
  %85 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %86 = "cggi.shr"(%40, %85) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %87 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %88 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %89 = "cggi.shr"(%66, %88) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %90 = "cggi.cast"(%66) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %91 = "arith.trunci"(%67) : (i16) -> i8
  %92 = "cggi.cast"(%90) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %93 = "arith.extui"(%91) : (i8) -> i16
  %94 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %95 = "cggi.shr"(%66, %94) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %96 = "arith.shrui"(%67, %29) : (i16, i16) -> i16
  %97 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %98 = "cggi.shr"(%68, %97) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %99 = "cggi.cast"(%68) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %100 = "arith.trunci"(%69) : (i16) -> i8
  %101 = "cggi.cast"(%99) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %102 = "arith.extui"(%100) : (i8) -> i16
  %103 = "cggi.add"(%83, %77) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %104 = "arith.addi"(%84, %78) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %105 = "cggi.add"(%92, %86) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %106 = "arith.addi"(%93, %87) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %107 = "cggi.add"(%101, %95) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %108 = "arith.addi"(%102, %96) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%75, %104, %106, %108) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.return'(0x5623a75cef10) {
  "func.return"(%75, %104, %106, %108) : (i16, i16, i16, i16) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.return -> ()' {
Trying to match "(anonymous namespace)::ReturnOpTypeConversion"
    ** Insert  : 'func.return'(0x5623a75d66e0)
    ** Replace : 'func.return'(0x5623a75cef10)
"(anonymous namespace)::ReturnOpTypeConversion" result 1

    //===-------------------------------------------===//
    Legalizing operation : 'func.return'(0x5623a75d66e0) {
      "func.return"(%74, %103, %105, %107) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
// *** IR Dump After Pattern Application ***
'func.return' op must be the last operation in the parent block
mlir-asm-printer: 'func.func' failed to verify and will be printed in generic form
"func.func"() <{function_type = (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>), sym_name = "test_simple_split"}> ({
^bb0(%arg0: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg1: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg2: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg3: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg4: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg5: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg6: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, %arg7: !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>):
  %0 = "builtin.unrealized_conversion_cast"(%arg7) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %1 = "builtin.unrealized_conversion_cast"(%0) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %2 = "builtin.unrealized_conversion_cast"(%arg6) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %3 = "builtin.unrealized_conversion_cast"(%2) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %4 = "builtin.unrealized_conversion_cast"(%arg5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %5 = "builtin.unrealized_conversion_cast"(%4) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %6 = "builtin.unrealized_conversion_cast"(%arg4) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %7 = "builtin.unrealized_conversion_cast"(%6) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %8 = "builtin.unrealized_conversion_cast"(%arg3) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %9 = "builtin.unrealized_conversion_cast"(%8) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %10 = "builtin.unrealized_conversion_cast"(%arg2) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %11 = "builtin.unrealized_conversion_cast"(%10) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %12 = "builtin.unrealized_conversion_cast"(%arg1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %13 = "builtin.unrealized_conversion_cast"(%12) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %14 = "builtin.unrealized_conversion_cast"(%arg0) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> i16
  %15 = "builtin.unrealized_conversion_cast"(%14) : (i16) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %16 = "cggi.create_trivial"() <{value = 61 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %17 = "arith.constant"() <{value = 61 : i16}> : () -> i16
  %18 = "cggi.create_trivial"() <{value = 57 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %19 = "arith.constant"() <{value = 57 : i16}> : () -> i16
  %20 = "cggi.create_trivial"() <{value = 31 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %21 = "arith.constant"() <{value = 31 : i16}> : () -> i16
  %22 = "cggi.create_trivial"() <{value = 30 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %23 = "arith.constant"() <{value = 30 : i16}> : () -> i16
  %24 = "cggi.create_trivial"() <{value = 29 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %25 = "arith.constant"() <{value = 29 : i16}> : () -> i16
  %26 = "cggi.create_trivial"() <{value = 28 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %27 = "arith.constant"() <{value = 28 : i16}> : () -> i16
  %28 = "cggi.create_trivial"() <{value = 8 : i16}> : () -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %29 = "arith.constant"() <{value = 8 : i16}> : () -> i16
  %30 = "cggi.mul"(%7, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %31 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %32 = "cggi.mul"(%5, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %33 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %34 = "cggi.add"(%7, %5) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %35 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %36 = "cggi.mul"(%34, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %37 = "arith.muli"(%35, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %38 = "cggi.sub"(%36, %30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %39 = "arith.subi"(%37, %31) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %40 = "cggi.sub"(%38, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %41 = "arith.subi"(%39, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %42 = "cggi.mul"(%7, %22) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %43 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %23) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %44 = "cggi.mul"(%5, %20) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %45 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %21) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %46 = "cggi.mul"(%34, %16) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %47 = "arith.muli"(%35, %17) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %48 = "cggi.sub"(%46, %42) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %49 = "arith.subi"(%47, %43) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %50 = "cggi.sub"(%48, %44) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %51 = "arith.subi"(%49, %45) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %52 = "cggi.mul"(%3, %26) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %53 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %27) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %54 = "cggi.mul"(%1, %24) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %55 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %25) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %56 = "cggi.add"(%3, %1) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %58 = "cggi.mul"(%56, %18) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %59 = "arith.muli"(%57, %19) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %60 = "cggi.sub"(%58, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %61 = "arith.subi"(%59, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %62 = "cggi.sub"(%60, %54) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %63 = "arith.subi"(%61, %55) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %64 = "cggi.add"(%42, %52) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %65 = "arith.addi"(%43, %53) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %66 = "cggi.add"(%64, %32) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %67 = "arith.addi"(%65, %33) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %68 = "cggi.add"(%50, %62) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %69 = "arith.addi"(%51, %63) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %70 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %71 = "cggi.shr"(%30, %70) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %72 = "cggi.cast"(%30) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %73 = "arith.trunci"(%31) : (i16) -> i8
  %74 = "cggi.cast"(%72) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %75 = "arith.extui"(%73) : (i8) -> i16
  %76 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %77 = "cggi.shr"(%30, %76) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %78 = "arith.shrui"(%31, %29) : (i16, i16) -> i16
  %79 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %80 = "cggi.shr"(%40, %79) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %81 = "cggi.cast"(%40) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %82 = "arith.trunci"(%41) : (i16) -> i8
  %83 = "cggi.cast"(%81) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %84 = "arith.extui"(%82) : (i8) -> i16
  %85 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %86 = "cggi.shr"(%40, %85) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %87 = "arith.shrui"(%41, %29) : (i16, i16) -> i16
  %88 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %89 = "cggi.shr"(%66, %88) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %90 = "cggi.cast"(%66) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %91 = "arith.trunci"(%67) : (i16) -> i8
  %92 = "cggi.cast"(%90) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %93 = "arith.extui"(%91) : (i8) -> i16
  %94 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %95 = "cggi.shr"(%66, %94) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %96 = "arith.shrui"(%67, %29) : (i16, i16) -> i16
  %97 = "arith.constant"() <{value = 8 : i8}> : () -> i8
  %98 = "cggi.shr"(%68, %97) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, i8) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %99 = "cggi.cast"(%68) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>
  %100 = "arith.trunci"(%69) : (i16) -> i8
  %101 = "cggi.cast"(%99) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %102 = "arith.extui"(%100) : (i8) -> i16
  %103 = "cggi.add"(%83, %77) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %104 = "arith.addi"(%84, %78) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %105 = "cggi.add"(%92, %86) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %106 = "arith.addi"(%93, %87) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  %107 = "cggi.add"(%101, %95) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>
  %108 = "arith.addi"(%102, %96) <{overflowFlags = #arith.overflow<none>}> : (i16, i16) -> i16
  "func.return"(%74, %103, %105, %107) : (!lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>, !lwe.lwe_ciphertext<encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>>) -> ()
  "func.return"(%75, %104, %106, %108) : (i16, i16, i16, i16) -> ()
}) : () -> ()


} -> SUCCESS
//===-------------------------------------------===//
ImplicitTypeIDRegistry::lookupOrInsert(mlir::AttributeTrait::IsLocation<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::TypedAttr::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::StorageUserTrait::IsMutable<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::VerifiableTensorEncoding::Trait<Empty>)
#unspecified_bit_field_encoding = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 16>
#unspecified_bit_field_encoding1 = #lwe.unspecified_bit_field_encoding<cleartext_bitwidth = 8>
module {
  func.func @test_simple_split(%arg0: !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, %arg1: !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, %arg2: !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, %arg3: !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, %arg4: !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, %arg5: !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, %arg6: !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, %arg7: !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>) -> (!lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>) {
    %0 = cggi.create_trivial  {value = 61 : i16} : () -> !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %1 = cggi.create_trivial  {value = 57 : i16} : () -> !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %2 = cggi.create_trivial  {value = 31 : i16} : () -> !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %3 = cggi.create_trivial  {value = 30 : i16} : () -> !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %4 = cggi.create_trivial  {value = 29 : i16} : () -> !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %5 = cggi.create_trivial  {value = 28 : i16} : () -> !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %6 = cggi.create_trivial  {value = 8 : i16} : () -> !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %7 = cggi.mul %arg4, %5 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %8 = cggi.mul %arg5, %4 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %9 = cggi.add %arg4, %arg5 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %10 = cggi.mul %9, %1 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %11 = cggi.sub %10, %7 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %12 = cggi.sub %11, %8 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %13 = cggi.mul %arg4, %3 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %14 = cggi.mul %arg5, %2 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %15 = cggi.mul %9, %0 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %16 = cggi.sub %15, %13 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %17 = cggi.sub %16, %14 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %18 = cggi.mul %arg6, %5 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %19 = cggi.mul %arg7, %4 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %20 = cggi.add %arg6, %arg7 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %21 = cggi.mul %20, %1 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %22 = cggi.sub %21, %18 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %23 = cggi.sub %22, %19 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %24 = cggi.add %13, %18 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %25 = cggi.add %24, %8 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %26 = cggi.add %17, %23 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %c8_i8 = arith.constant 8 : i8
    %27 = cggi.shr %7, %c8_i8 : (!lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, i8) -> !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %28 = cggi.cast %7 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding> to !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding1>
    %29 = cggi.cast %28 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding1> to !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %c8_i8_0 = arith.constant 8 : i8
    %30 = cggi.shr %7, %c8_i8_0 : (!lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, i8) -> !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %c8_i8_1 = arith.constant 8 : i8
    %31 = cggi.shr %12, %c8_i8_1 : (!lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, i8) -> !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %32 = cggi.cast %12 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding> to !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding1>
    %33 = cggi.cast %32 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding1> to !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %c8_i8_2 = arith.constant 8 : i8
    %34 = cggi.shr %12, %c8_i8_2 : (!lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, i8) -> !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %c8_i8_3 = arith.constant 8 : i8
    %35 = cggi.shr %25, %c8_i8_3 : (!lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, i8) -> !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %36 = cggi.cast %25 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding> to !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding1>
    %37 = cggi.cast %36 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding1> to !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %c8_i8_4 = arith.constant 8 : i8
    %38 = cggi.shr %25, %c8_i8_4 : (!lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, i8) -> !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %c8_i8_5 = arith.constant 8 : i8
    %39 = cggi.shr %26, %c8_i8_5 : (!lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, i8) -> !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %40 = cggi.cast %26 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding> to !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding1>
    %41 = cggi.cast %40 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding1> to !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %42 = cggi.add %33, %30 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %43 = cggi.add %37, %34 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    %44 = cggi.add %41, %38 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
    return %29, %42, %43, %44 : !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>, !lwe.lwe_ciphertext<encoding = #unspecified_bit_field_encoding>
  }
}
